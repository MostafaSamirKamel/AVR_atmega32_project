
Counter_withSevenSegment_and_Timer0(CTC Mode).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000430  000004c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800080  00800080  000004e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7e  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c7  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000835  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  000025dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000615  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba3  00000000  00000000  00002ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 38       	cpi	r26, 0x83	; 131
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 01 	call	0x292	; 0x292 <main>
  8a:	0c 94 16 02 	jmp	0x42c	; 0x42c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
            case OUTPUT :   switch(Copy_u8PortNumber)
                            {
                                case PORTA :    DDRA_REG = 0xff ;   break;
                                case PORTB :    DDRB_REG = 0xff ;   break;
                                case PORTC :    DDRC_REG = 0xff ;   break;
                                case PORTD :    DDRD_REG = 0xff ;   break;
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
  96:	73 c0       	rjmp	.+230    	; 0x17e <DIO_voidSetPinDirection+0xec>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
  9c:	70 c0       	rjmp	.+224    	; 0x17e <DIO_voidSetPinDirection+0xec>
  9e:	44 23       	and	r20, r20
  a0:	19 f0       	breq	.+6      	; 0xa8 <DIO_voidSetPinDirection+0x16>
  a2:	41 30       	cpi	r20, 0x01	; 1
  a4:	c9 f1       	breq	.+114    	; 0x118 <DIO_voidSetPinDirection+0x86>
  a6:	08 95       	ret
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	91 f0       	breq	.+36     	; 0xd0 <DIO_voidSetPinDirection+0x3e>
  ac:	28 f0       	brcs	.+10     	; 0xb8 <DIO_voidSetPinDirection+0x26>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	d9 f0       	breq	.+54     	; 0xe8 <DIO_voidSetPinDirection+0x56>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	29 f1       	breq	.+74     	; 0x100 <DIO_voidSetPinDirection+0x6e>
  b6:	08 95       	ret
  b8:	2a b3       	in	r18, 0x1a	; 26
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x32>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x2e>
  c8:	80 95       	com	r24
  ca:	82 23       	and	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_voidSetPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_voidSetPinDirection+0x46>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
  e8:	24 b3       	in	r18, 0x14	; 20
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDirection+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDirection+0x5e>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	84 bb       	out	0x14, r24	; 20
  fe:	08 95       	ret
 100:	21 b3       	in	r18, 0x11	; 17
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0x7a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x76>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	81 bb       	out	0x11, r24	; 17
 116:	08 95       	ret
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	89 f0       	breq	.+34     	; 0x13e <DIO_voidSetPinDirection+0xac>
 11c:	28 f0       	brcs	.+10     	; 0x128 <DIO_voidSetPinDirection+0x96>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	c9 f0       	breq	.+50     	; 0x154 <DIO_voidSetPinDirection+0xc2>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	11 f1       	breq	.+68     	; 0x16a <DIO_voidSetPinDirection+0xd8>
 126:	08 95       	ret
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0x9e>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	08 95       	ret
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinDirection+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinDirection+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
 152:	08 95       	ret
 154:	24 b3       	in	r18, 0x14	; 20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinDirection+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinDirection+0xca>
 164:	82 2b       	or	r24, r18
 166:	84 bb       	out	0x14, r24	; 20
 168:	08 95       	ret
 16a:	21 b3       	in	r18, 0x11	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xe4>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xe0>
 17a:	82 2b       	or	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret

00000180 <DIO_voidSetPinValue>:
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	08 f0       	brcs	.+2      	; 0x186 <DIO_voidSetPinValue+0x6>
 184:	73 c0       	rjmp	.+230    	; 0x26c <DIO_voidSetPinValue+0xec>
 186:	68 30       	cpi	r22, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_voidSetPinValue+0xc>
 18a:	70 c0       	rjmp	.+224    	; 0x26c <DIO_voidSetPinValue+0xec>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
 18c:	44 23       	and	r20, r20
 18e:	19 f0       	breq	.+6      	; 0x196 <DIO_voidSetPinValue+0x16>
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	c9 f1       	breq	.+114    	; 0x206 <DIO_voidSetPinValue+0x86>
 194:	08 95       	ret
        {
            case LOW :    switch(Copy_u8PortNumber)
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	91 f0       	breq	.+36     	; 0x1be <DIO_voidSetPinValue+0x3e>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <DIO_voidSetPinValue+0x26>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	d9 f0       	breq	.+54     	; 0x1d6 <DIO_voidSetPinValue+0x56>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	29 f1       	breq	.+74     	; 0x1ee <DIO_voidSetPinValue+0x6e>
 1a4:	08 95       	ret
                            {
                                case PORTA :    CLEAR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_voidSetPinValue+0x32>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_voidSetPinValue+0x2e>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret
                                case PORTB :    CLEAR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPinValue+0x4a>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_voidSetPinValue+0x46>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
                                case PORTC :    CLEAR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_voidSetPinValue+0x62>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_voidSetPinValue+0x5e>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
                                case PORTD :    CLEAR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
 1ee:	22 b3       	in	r18, 0x12	; 18
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinValue+0x7a>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinValue+0x76>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	82 bb       	out	0x12, r24	; 18
 204:	08 95       	ret
                                default    :                                                break; 
                            }
                            break;
            case HIGH :   switch(Copy_u8PortNumber)
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	89 f0       	breq	.+34     	; 0x22c <DIO_voidSetPinValue+0xac>
 20a:	28 f0       	brcs	.+10     	; 0x216 <DIO_voidSetPinValue+0x96>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	c9 f0       	breq	.+50     	; 0x242 <DIO_voidSetPinValue+0xc2>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	11 f1       	breq	.+68     	; 0x258 <DIO_voidSetPinValue+0xd8>
 214:	08 95       	ret
                            {
                                case PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_voidSetPinValue+0xa2>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_voidSetPinValue+0x9e>
 226:	82 2b       	or	r24, r18
 228:	8b bb       	out	0x1b, r24	; 27
 22a:	08 95       	ret
                                case PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0xb8>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0xb4>
 23c:	82 2b       	or	r24, r18
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
                                case PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
 242:	25 b3       	in	r18, 0x15	; 21
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinValue+0xce>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinValue+0xca>
 252:	82 2b       	or	r24, r18
 254:	85 bb       	out	0x15, r24	; 21
 256:	08 95       	ret
                                case PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_voidSetPinValue+0xe4>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_voidSetPinValue+0xe0>
 268:	82 2b       	or	r24, r18
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	08 95       	ret

0000026e <DIO_voidSetPortValue>:
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD )
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	78 f4       	brcc	.+30     	; 0x290 <DIO_voidSetPortValue+0x22>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	41 f0       	breq	.+16     	; 0x286 <DIO_voidSetPortValue+0x18>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_voidSetPortValue+0x14>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	39 f0       	breq	.+14     	; 0x28a <DIO_voidSetPortValue+0x1c>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	39 f0       	breq	.+14     	; 0x28e <DIO_voidSetPortValue+0x20>
 280:	08 95       	ret
        {
            case PORTA: PORTA_REG = Copy_u8Value;
 282:	6b bb       	out	0x1b, r22	; 27
                        break;
 284:	08 95       	ret
    
            case PORTB: PORTB_REG = Copy_u8Value;
 286:	68 bb       	out	0x18, r22	; 24
                        break;
 288:	08 95       	ret
    
            case PORTC: PORTC_REG = Copy_u8Value;
 28a:	65 bb       	out	0x15, r22	; 21
                        break;
 28c:	08 95       	ret
    
            case PORTD: PORTD_REG = Copy_u8Value;
 28e:	62 bb       	out	0x12, r22	; 18
 290:	08 95       	ret

00000292 <main>:
vu8 count_10ms = 0;
u8 counter_7seg = 0 ;

int main(void)
{
	TIMER0_voidInit();
 292:	0e 94 ff 01 	call	0x3fe	; 0x3fe <TIMER0_voidInit>
	SEGMENT_voidInitSegmentPort(PORTC);
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 bc 01 	call	0x378	; 0x378 <SEGMENT_voidInitSegmentPort>
	
	DIO_voidSetPinDirection(PORTD,PIN0,HIGH); // A
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTD,PIN1,HIGH); // A
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	
    while (1) 
    {
		DIO_voidSetPinValue(PORTD,PIN0,LOW);
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTD,PIN1,HIGH);
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		SEGMENT_COMCATH_voidPrintNumber(PORTC,counter_7seg % 10);
 2c4:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <__data_end>
 2c8:	8d ec       	ldi	r24, 0xCD	; 205
 2ca:	68 9f       	mul	r22, r24
 2cc:	81 2d       	mov	r24, r1
 2ce:	11 24       	eor	r1, r1
 2d0:	86 95       	lsr	r24
 2d2:	86 95       	lsr	r24
 2d4:	86 95       	lsr	r24
 2d6:	88 0f       	add	r24, r24
 2d8:	98 2f       	mov	r25, r24
 2da:	99 0f       	add	r25, r25
 2dc:	99 0f       	add	r25, r25
 2de:	89 0f       	add	r24, r25
 2e0:	68 1b       	sub	r22, r24
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SEGMENT_COMCATH_voidPrintNumber>
		
		while(count_10ms == 0);
 2e8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <count_10ms>
 2ec:	88 23       	and	r24, r24
 2ee:	e1 f3       	breq	.-8      	; 0x2e8 <main+0x56>
		count_10ms = 0;
 2f0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <count_10ms>
		
		DIO_voidSetPinValue(PORTD,PIN0,HIGH);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	83 e0       	ldi	r24, 0x03	; 3
 2fa:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTD,PIN1,LOW);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		SEGMENT_COMCATH_voidPrintNumber(PORTC,counter_7seg / 10);
 308:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 30c:	6d ec       	ldi	r22, 0xCD	; 205
 30e:	86 9f       	mul	r24, r22
 310:	61 2d       	mov	r22, r1
 312:	11 24       	eor	r1, r1
 314:	66 95       	lsr	r22
 316:	66 95       	lsr	r22
 318:	66 95       	lsr	r22
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SEGMENT_COMCATH_voidPrintNumber>
		
		while(count_10ms == 0);
 320:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <count_10ms>
 324:	88 23       	and	r24, r24
 326:	e1 f3       	breq	.-8      	; 0x320 <main+0x8e>
		count_10ms = 0;
 328:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <count_10ms>
		
		if (conut_1sec >= 100)
 32c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <conut_1sec>
 330:	84 36       	cpi	r24, 0x64	; 100
 332:	08 f4       	brcc	.+2      	; 0x336 <main+0xa4>
 334:	bd cf       	rjmp	.-134    	; 0x2b0 <main+0x1e>
		{
			conut_1sec = 0;
 336:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <conut_1sec>
			counter_7seg++;
 33a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
			if (counter_7seg > 30)
 344:	8f 31       	cpi	r24, 0x1F	; 31
 346:	08 f4       	brcc	.+2      	; 0x34a <main+0xb8>
 348:	b3 cf       	rjmp	.-154    	; 0x2b0 <main+0x1e>
			{
				counter_7seg = 0;
 34a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
 34e:	b0 cf       	rjmp	.-160    	; 0x2b0 <main+0x1e>

00000350 <__vector_10>:


// TIMER0_COMP_vect -> VECTOR(10)
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	8f 93       	push	r24
	conut_1sec++ ;
 35c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <conut_1sec>
 360:	8f 5f       	subi	r24, 0xFF	; 255
 362:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <conut_1sec>
	count_10ms = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <count_10ms>
}
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <SEGMENT_voidInitSegmentPort>:



void SEGMENT_voidInitSegmentPort ( u8 Copy_u8PortNumber )
{
	switch(Copy_u8PortNumber)
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	49 f0       	breq	.+18     	; 0x38e <SEGMENT_voidInitSegmentPort+0x16>
 37c:	28 f0       	brcs	.+10     	; 0x388 <SEGMENT_voidInitSegmentPort+0x10>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	49 f0       	breq	.+18     	; 0x394 <SEGMENT_voidInitSegmentPort+0x1c>
 382:	83 30       	cpi	r24, 0x03	; 3
 384:	51 f0       	breq	.+20     	; 0x39a <SEGMENT_voidInitSegmentPort+0x22>
 386:	08 95       	ret
	{
		case PORTA :    DDRA_REG = 0xff ;   break;
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	8a bb       	out	0x1a, r24	; 26
 38c:	08 95       	ret
		case PORTB :    DDRB_REG = 0xff ;   break;
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	87 bb       	out	0x17, r24	; 23
 392:	08 95       	ret
		case PORTC :    DDRC_REG = 0xff ;   break;
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	84 bb       	out	0x14, r24	; 20
 398:	08 95       	ret
		case PORTD :    DDRD_REG = 0xff ;   break;
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	81 bb       	out	0x11, r24	; 17
 39e:	08 95       	ret

000003a0 <SEGMENT_COMCATH_voidPrintNumber>:
		default    :                        break;
	}
}

void SEGMENT_COMCATH_voidPrintNumber ( u8 Copy_u8PortNumber , u8 Copy_u8Number )
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	60 97       	sbiw	r28, 0x10	; 16
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
	// Corrected values for Common Cathode 7-segment display
	u8 Arr[] = {
 3b4:	90 e1       	ldi	r25, 0x10	; 16
 3b6:	e0 e6       	ldi	r30, 0x60	; 96
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	de 01       	movw	r26, r28
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	01 90       	ld	r0, Z+
 3c0:	0d 92       	st	X+, r0
 3c2:	9a 95       	dec	r25
 3c4:	e1 f7       	brne	.-8      	; 0x3be <SEGMENT_COMCATH_voidPrintNumber+0x1e>
		0x79, // E
		0x71  // F
	};

	// Prevent out-of-bounds memory access
	if (Copy_u8Number < 16)
 3c6:	60 31       	cpi	r22, 0x10	; 16
 3c8:	50 f4       	brcc	.+20     	; 0x3de <SEGMENT_COMCATH_voidPrintNumber+0x3e>
	{
		DIO_voidSetPortValue(Copy_u8PortNumber, Arr[Copy_u8Number]);
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ec 0f       	add	r30, r28
 3d0:	fd 1f       	adc	r31, r29
 3d2:	e6 0f       	add	r30, r22
 3d4:	f1 1d       	adc	r31, r1
 3d6:	60 81       	ld	r22, Z
 3d8:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_voidSetPortValue>
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <SEGMENT_COMCATH_voidPrintNumber+0x44>
	}
	else
	{
		DIO_voidSetPortValue(Copy_u8PortNumber, 0x00);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_voidSetPortValue>
	}
}
 3e4:	60 96       	adiw	r28, 0x10	; 16
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <Enterrupt_GlobalEnable>:
#include "Timer0_config.h"


void Enterrupt_GlobalEnable()
{
	SET_BIT(SREG_REG,GINT_BIT);
 3f6:	8f b7       	in	r24, 0x3f	; 63
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8f bf       	out	0x3f, r24	; 63
 3fc:	08 95       	ret

000003fe <TIMER0_voidInit>:
	// Enable T0 OVF Interrupt [PIE].
	Enterrupt_GlobalEnable();
	SET_BIT(TIMSK_REG,TIMER0_TIMSK_TOIE0);   	
	   
	#elif (MODE == CTC)                  // CTC Mode of Timer/Counter0
	CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_WGM00);
 3fe:	83 b7       	in	r24, 0x33	; 51
 400:	8f 7b       	andi	r24, 0xBF	; 191
 402:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_REG,TIMER0_TCCR0_WGM01);
 404:	83 b7       	in	r24, 0x33	; 51
 406:	88 60       	ori	r24, 0x08	; 8
 408:	83 bf       	out	0x33, r24	; 51
	// Enable T0 CTC Interrupt [PIE].
	Enterrupt_GlobalEnable();
 40a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <Enterrupt_GlobalEnable>
	SET_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);   
 40e:	89 b7       	in	r24, 0x39	; 57
 410:	82 60       	ori	r24, 0x02	; 2
 412:	89 bf       	out	0x39, r24	; 57
	// load a value in OCR0 
	OCR0_REG = 78; // (10ms * 8MHz) / (1024 prescaler) - 1 ? 78
 414:	8e e4       	ldi	r24, 0x4E	; 78
 416:	8c bf       	out	0x3c, r24	; 60
	 CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
	 CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
	 SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
	 
	 #elif (PRESCALER == PRESCALER_DIVISION_BY_1024) //
	 SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
 418:	83 b7       	in	r24, 0x33	; 51
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	83 bf       	out	0x33, r24	; 51
	 CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
 41e:	83 b7       	in	r24, 0x33	; 51
 420:	8d 7f       	andi	r24, 0xFD	; 253
 422:	83 bf       	out	0x33, r24	; 51
	 SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
 424:	83 b7       	in	r24, 0x33	; 51
 426:	84 60       	ori	r24, 0x04	; 4
 428:	83 bf       	out	0x33, r24	; 51
 42a:	08 95       	ret

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
