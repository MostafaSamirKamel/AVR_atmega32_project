
ElectronicVotingMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000a8e  00000b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800092  00800092  00000b54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ed  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ea  00000000  00000000  00003015  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea9  00000000  00000000  000039ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000048a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000074b  00000000  00000000  00004b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a4  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000696b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 03 	call	0x73a	; 0x73a <main>
  8a:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_u8Get_button_Pin>:
{
	// local Variable
	 u8 Local_u8Variable;
	
	/* i/p validation */
	if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	28 f4       	brcc	.+10     	; 0xa0 <BUTTON_u8Get_button_Pin+0xe>
  96:	68 30       	cpi	r22, 0x08	; 8
  98:	18 f4       	brcc	.+6      	; 0xa0 <BUTTON_u8Get_button_Pin+0xe>
	{
		// Do Nothing
	}
	else
	{
		Local_u8Variable = DIO_u8GetPinValue(Copy_u8PortNumber,Copy_u8PinNumber);
  9a:	0e 94 40 01 	call	0x280	; 0x280 <DIO_u8GetPinValue>
  9e:	98 2f       	mov	r25, r24
	}
	
	return Local_u8Variable ;
}
  a0:	89 2f       	mov	r24, r25
  a2:	08 95       	ret

000000a4 <DIO_voidSetPinDirection>:
    else
    {
       switch(Copy_u8PullUpStatus)
       {
            case ON :  DIO_voidSetPortValue (Copy_u8PortNumber, HIGH );  break;
            case OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, LOW );   break;
  a4:	84 30       	cpi	r24, 0x04	; 4
  a6:	08 f0       	brcs	.+2      	; 0xaa <DIO_voidSetPinDirection+0x6>
  a8:	73 c0       	rjmp	.+230    	; 0x190 <DIO_voidSetPinDirection+0xec>
  aa:	68 30       	cpi	r22, 0x08	; 8
  ac:	08 f0       	brcs	.+2      	; 0xb0 <DIO_voidSetPinDirection+0xc>
  ae:	70 c0       	rjmp	.+224    	; 0x190 <DIO_voidSetPinDirection+0xec>
  b0:	44 23       	and	r20, r20
  b2:	19 f0       	breq	.+6      	; 0xba <DIO_voidSetPinDirection+0x16>
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	c9 f1       	breq	.+114    	; 0x12a <DIO_voidSetPinDirection+0x86>
  b8:	08 95       	ret
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	91 f0       	breq	.+36     	; 0xe2 <DIO_voidSetPinDirection+0x3e>
  be:	28 f0       	brcs	.+10     	; 0xca <DIO_voidSetPinDirection+0x26>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	d9 f0       	breq	.+54     	; 0xfa <DIO_voidSetPinDirection+0x56>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	29 f1       	breq	.+74     	; 0x112 <DIO_voidSetPinDirection+0x6e>
  c8:	08 95       	ret
  ca:	2a b3       	in	r18, 0x1a	; 26
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_voidSetPinDirection+0x32>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_voidSetPinDirection+0x2e>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	8a bb       	out	0x1a, r24	; 26
  e0:	08 95       	ret
  e2:	27 b3       	in	r18, 0x17	; 23
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_voidSetPinDirection+0x4a>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_voidSetPinDirection+0x46>
  f2:	80 95       	com	r24
  f4:	82 23       	and	r24, r18
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	08 95       	ret
  fa:	24 b3       	in	r18, 0x14	; 20
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDirection+0x62>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDirection+0x5e>
 10a:	80 95       	com	r24
 10c:	82 23       	and	r24, r18
 10e:	84 bb       	out	0x14, r24	; 20
 110:	08 95       	ret
 112:	21 b3       	in	r18, 0x11	; 17
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_voidSetPinDirection+0x7a>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_voidSetPinDirection+0x76>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	81 bb       	out	0x11, r24	; 17
 128:	08 95       	ret
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	89 f0       	breq	.+34     	; 0x150 <DIO_voidSetPinDirection+0xac>
 12e:	28 f0       	brcs	.+10     	; 0x13a <DIO_voidSetPinDirection+0x96>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	c9 f0       	breq	.+50     	; 0x166 <DIO_voidSetPinDirection+0xc2>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	11 f1       	breq	.+68     	; 0x17c <DIO_voidSetPinDirection+0xd8>
 138:	08 95       	ret
 13a:	2a b3       	in	r18, 0x1a	; 26
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_voidSetPinDirection+0xa2>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_voidSetPinDirection+0x9e>
 14a:	82 2b       	or	r24, r18
 14c:	8a bb       	out	0x1a, r24	; 26
 14e:	08 95       	ret
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_voidSetPinDirection+0xb8>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_voidSetPinDirection+0xb4>
 160:	82 2b       	or	r24, r18
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
 166:	24 b3       	in	r18, 0x14	; 20
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinDirection+0xce>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinDirection+0xca>
 176:	82 2b       	or	r24, r18
 178:	84 bb       	out	0x14, r24	; 20
 17a:	08 95       	ret
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_voidSetPinDirection+0xe4>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_voidSetPinDirection+0xe0>
 18c:	82 2b       	or	r24, r18
 18e:	81 bb       	out	0x11, r24	; 17
 190:	08 95       	ret

00000192 <DIO_voidSetPinValue>:
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	08 f0       	brcs	.+2      	; 0x198 <DIO_voidSetPinValue+0x6>
 196:	73 c0       	rjmp	.+230    	; 0x27e <DIO_voidSetPinValue+0xec>
 198:	68 30       	cpi	r22, 0x08	; 8
 19a:	08 f0       	brcs	.+2      	; 0x19e <DIO_voidSetPinValue+0xc>
 19c:	70 c0       	rjmp	.+224    	; 0x27e <DIO_voidSetPinValue+0xec>
 19e:	44 23       	and	r20, r20
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <DIO_voidSetPinValue+0x16>
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	c9 f1       	breq	.+114    	; 0x218 <DIO_voidSetPinValue+0x86>
 1a6:	08 95       	ret
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	91 f0       	breq	.+36     	; 0x1d0 <DIO_voidSetPinValue+0x3e>
 1ac:	28 f0       	brcs	.+10     	; 0x1b8 <DIO_voidSetPinValue+0x26>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	d9 f0       	breq	.+54     	; 0x1e8 <DIO_voidSetPinValue+0x56>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	29 f1       	breq	.+74     	; 0x200 <DIO_voidSetPinValue+0x6e>
 1b6:	08 95       	ret
 1b8:	2b b3       	in	r18, 0x1b	; 27
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_voidSetPinValue+0x32>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_voidSetPinValue+0x2e>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	08 95       	ret
 1d0:	28 b3       	in	r18, 0x18	; 24
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_voidSetPinValue+0x4a>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_voidSetPinValue+0x46>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	08 95       	ret
 1e8:	25 b3       	in	r18, 0x15	; 21
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_voidSetPinValue+0x62>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_voidSetPinValue+0x5e>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	85 bb       	out	0x15, r24	; 21
 1fe:	08 95       	ret
 200:	22 b3       	in	r18, 0x12	; 18
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_voidSetPinValue+0x7a>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_voidSetPinValue+0x76>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	82 bb       	out	0x12, r24	; 18
 216:	08 95       	ret
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	89 f0       	breq	.+34     	; 0x23e <DIO_voidSetPinValue+0xac>
 21c:	28 f0       	brcs	.+10     	; 0x228 <DIO_voidSetPinValue+0x96>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	c9 f0       	breq	.+50     	; 0x254 <DIO_voidSetPinValue+0xc2>
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	11 f1       	breq	.+68     	; 0x26a <DIO_voidSetPinValue+0xd8>
 226:	08 95       	ret
 228:	2b b3       	in	r18, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_voidSetPinValue+0xa2>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_voidSetPinValue+0x9e>
 238:	82 2b       	or	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_voidSetPinValue+0xb8>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_voidSetPinValue+0xb4>
 24e:	82 2b       	or	r24, r18
 250:	88 bb       	out	0x18, r24	; 24
 252:	08 95       	ret
 254:	25 b3       	in	r18, 0x15	; 21
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPinValue+0xce>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPinValue+0xca>
 264:	82 2b       	or	r24, r18
 266:	85 bb       	out	0x15, r24	; 21
 268:	08 95       	ret
 26a:	22 b3       	in	r18, 0x12	; 18
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_voidSetPinValue+0xe4>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_voidSetPinValue+0xe0>
 27a:	82 2b       	or	r24, r18
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	08 95       	ret

00000280 <DIO_u8GetPinValue>:
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	08 f0       	brcs	.+2      	; 0x286 <DIO_u8GetPinValue+0x6>
 284:	5f c0       	rjmp	.+190    	; 0x344 <DIO_u8GetPinValue+0xc4>
 286:	68 30       	cpi	r22, 0x08	; 8
 288:	08 f0       	brcs	.+2      	; 0x28c <DIO_u8GetPinValue+0xc>
 28a:	5c c0       	rjmp	.+184    	; 0x344 <DIO_u8GetPinValue+0xc4>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	e1 f0       	breq	.+56     	; 0x2c8 <DIO_u8GetPinValue+0x48>
 290:	30 f0       	brcs	.+12     	; 0x29e <DIO_u8GetPinValue+0x1e>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	71 f1       	breq	.+92     	; 0x2f2 <DIO_u8GetPinValue+0x72>
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	09 f4       	brne	.+2      	; 0x29c <DIO_u8GetPinValue+0x1c>
 29a:	40 c0       	rjmp	.+128    	; 0x31c <DIO_u8GetPinValue+0x9c>
 29c:	53 c0       	rjmp	.+166    	; 0x344 <DIO_u8GetPinValue+0xc4>
 29e:	49 b3       	in	r20, 0x19	; 25
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	9c 01       	movw	r18, r24
 2a6:	06 2e       	mov	r0, r22
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_u8GetPinValue+0x2e>
 2aa:	22 0f       	add	r18, r18
 2ac:	33 1f       	adc	r19, r19
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_u8GetPinValue+0x2a>
 2b2:	84 2f       	mov	r24, r20
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	82 23       	and	r24, r18
 2b8:	93 23       	and	r25, r19
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_u8GetPinValue+0x40>
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_u8GetPinValue+0x3c>
 2c4:	98 2f       	mov	r25, r24
 2c6:	3e c0       	rjmp	.+124    	; 0x344 <DIO_u8GetPinValue+0xc4>
 2c8:	46 b3       	in	r20, 0x16	; 22
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9c 01       	movw	r18, r24
 2d0:	06 2e       	mov	r0, r22
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8GetPinValue+0x58>
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8GetPinValue+0x54>
 2dc:	84 2f       	mov	r24, r20
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	82 23       	and	r24, r18
 2e2:	93 23       	and	r25, r19
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_u8GetPinValue+0x6a>
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_u8GetPinValue+0x66>
 2ee:	98 2f       	mov	r25, r24
 2f0:	29 c0       	rjmp	.+82     	; 0x344 <DIO_u8GetPinValue+0xc4>
 2f2:	43 b3       	in	r20, 0x13	; 19
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	9c 01       	movw	r18, r24
 2fa:	06 2e       	mov	r0, r22
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8GetPinValue+0x82>
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8GetPinValue+0x7e>
 306:	84 2f       	mov	r24, r20
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	82 23       	and	r24, r18
 30c:	93 23       	and	r25, r19
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_u8GetPinValue+0x94>
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_u8GetPinValue+0x90>
 318:	98 2f       	mov	r25, r24
 31a:	14 c0       	rjmp	.+40     	; 0x344 <DIO_u8GetPinValue+0xc4>
 31c:	40 b3       	in	r20, 0x10	; 16
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9c 01       	movw	r18, r24
 324:	06 2e       	mov	r0, r22
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8GetPinValue+0xac>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8GetPinValue+0xa8>
 330:	84 2f       	mov	r24, r20
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	82 23       	and	r24, r18
 336:	93 23       	and	r25, r19
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_u8GetPinValue+0xbe>
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_u8GetPinValue+0xba>
 342:	98 2f       	mov	r25, r24
 344:	89 2f       	mov	r24, r25
 346:	08 95       	ret

00000348 <DIO_voidSetNibbleDirection>:
    }    
}
/*=================================================================================================*/
/*=================================================================================================*/

void DIO_voidSetNibbleDirection (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Direction) {
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 34c:	84 30       	cpi	r24, 0x04	; 4
 34e:	58 f5       	brcc	.+86     	; 0x3a6 <DIO_voidSetNibbleDirection+0x5e>
 350:	d4 2f       	mov	r29, r20
 352:	c8 2f       	mov	r28, r24
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 354:	66 23       	and	r22, r22
 356:	a9 f0       	breq	.+42     	; 0x382 <DIO_voidSetNibbleDirection+0x3a>
 358:	61 30       	cpi	r22, 0x01	; 1
 35a:	29 f5       	brne	.+74     	; 0x3a6 <DIO_voidSetNibbleDirection+0x5e>
		{
			case LOW_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,0,Copy_u8Direction);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,1,Copy_u8Direction);
 362:	4d 2f       	mov	r20, r29
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	8c 2f       	mov	r24, r28
 368:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,2,Copy_u8Direction);
 36c:	4d 2f       	mov	r20, r29
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,3,Copy_u8Direction);
 376:	4d 2f       	mov	r20, r29
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	8c 2f       	mov	r24, r28
 37c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
			break;
 380:	12 c0       	rjmp	.+36     	; 0x3a6 <DIO_voidSetNibbleDirection+0x5e>
			case HIGH_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,4,Copy_u8Direction);
 382:	64 e0       	ldi	r22, 0x04	; 4
 384:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,5,Copy_u8Direction);
 388:	4d 2f       	mov	r20, r29
 38a:	65 e0       	ldi	r22, 0x05	; 5
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,6,Copy_u8Direction);
 392:	4d 2f       	mov	r20, r29
 394:	66 e0       	ldi	r22, 0x06	; 6
 396:	8c 2f       	mov	r24, r28
 398:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,7,Copy_u8Direction);
 39c:	4d 2f       	mov	r20, r29
 39e:	67 e0       	ldi	r22, 0x07	; 7
 3a0:	8c 2f       	mov	r24, r28
 3a2:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
			break;
			default:
			break;
		}
	}
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <DIO_voidSetNibbleValue>:


void DIO_voidSetNibbleValue (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Value) {
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 3ac:	84 30       	cpi	r24, 0x04	; 4
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <DIO_voidSetNibbleValue+0x6>
 3b0:	4f c0       	rjmp	.+158    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 3b2:	66 23       	and	r22, r22
 3b4:	41 f1       	breq	.+80     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3b6:	61 30       	cpi	r22, 0x01	; 1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <DIO_voidSetNibbleValue+0x10>
 3ba:	4a c0       	rjmp	.+148    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			case LOW_NIBBLE:
					Copy_u8Value&=0x0f;
 3bc:	4f 70       	andi	r20, 0x0F	; 15
					switch(Copy_u8PortNumber)
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	69 f0       	breq	.+26     	; 0x3dc <DIO_voidSetNibbleValue+0x30>
 3c2:	28 f0       	brcs	.+10     	; 0x3ce <DIO_voidSetNibbleValue+0x22>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	89 f0       	breq	.+34     	; 0x3ea <DIO_voidSetNibbleValue+0x3e>
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	b1 f0       	breq	.+44     	; 0x3f8 <DIO_voidSetNibbleValue+0x4c>
 3cc:	08 95       	ret
					{
						case PORTA:  PORTA_REG&=0xf0;
 3ce:	8b b3       	in	r24, 0x1b	; 27
 3d0:	80 7f       	andi	r24, 0xF0	; 240
 3d2:	8b bb       	out	0x1b, r24	; 27
									PORTA_REG|=Copy_u8Value;
 3d4:	8b b3       	in	r24, 0x1b	; 27
 3d6:	48 2b       	or	r20, r24
 3d8:	4b bb       	out	0x1b, r20	; 27
									break; 
 3da:	08 95       	ret
						case PORTB:	PORTB_REG&=0xf0;
 3dc:	88 b3       	in	r24, 0x18	; 24
 3de:	80 7f       	andi	r24, 0xF0	; 240
 3e0:	88 bb       	out	0x18, r24	; 24
									PORTB_REG|=Copy_u8Value;
 3e2:	88 b3       	in	r24, 0x18	; 24
 3e4:	48 2b       	or	r20, r24
 3e6:	48 bb       	out	0x18, r20	; 24
									break;
 3e8:	08 95       	ret
						case PORTC:	PORTC_REG&=0xf0;
 3ea:	85 b3       	in	r24, 0x15	; 21
 3ec:	80 7f       	andi	r24, 0xF0	; 240
 3ee:	85 bb       	out	0x15, r24	; 21
									PORTC_REG|=Copy_u8Value;
 3f0:	85 b3       	in	r24, 0x15	; 21
 3f2:	48 2b       	or	r20, r24
 3f4:	45 bb       	out	0x15, r20	; 21
									break;
 3f6:	08 95       	ret
						case PORTD:	PORTD_REG&=0xf0;
 3f8:	82 b3       	in	r24, 0x12	; 18
 3fa:	80 7f       	andi	r24, 0xF0	; 240
 3fc:	82 bb       	out	0x12, r24	; 18
									PORTD_REG|=Copy_u8Value;
 3fe:	82 b3       	in	r24, 0x12	; 18
 400:	48 2b       	or	r20, r24
 402:	42 bb       	out	0x12, r20	; 18
									break;
 404:	08 95       	ret
					}
			break;
			case HIGH_NIBBLE:
			Copy_u8Value <<= 4; // Shift left by 4 to align it with high nibble
 406:	42 95       	swap	r20
 408:	40 7f       	andi	r20, 0xF0	; 240
			switch(Copy_u8PortNumber)
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	69 f0       	breq	.+26     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 40e:	28 f0       	brcs	.+10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	89 f0       	breq	.+34     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 414:	83 30       	cpi	r24, 0x03	; 3
 416:	b1 f0       	breq	.+44     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 418:	08 95       	ret
			{
				case PORTA:  PORTA_REG &= 0x0F;
 41a:	8b b3       	in	r24, 0x1b	; 27
 41c:	8f 70       	andi	r24, 0x0F	; 15
 41e:	8b bb       	out	0x1b, r24	; 27
				PORTA_REG |= Copy_u8Value;
 420:	8b b3       	in	r24, 0x1b	; 27
 422:	48 2b       	or	r20, r24
 424:	4b bb       	out	0x1b, r20	; 27
				break;
 426:	08 95       	ret
				case PORTB:  PORTB_REG &= 0x0F;
 428:	88 b3       	in	r24, 0x18	; 24
 42a:	8f 70       	andi	r24, 0x0F	; 15
 42c:	88 bb       	out	0x18, r24	; 24
				PORTB_REG |= Copy_u8Value;
 42e:	88 b3       	in	r24, 0x18	; 24
 430:	48 2b       	or	r20, r24
 432:	48 bb       	out	0x18, r20	; 24
				break;
 434:	08 95       	ret
				case PORTC:  PORTC_REG &= 0x0F;
 436:	85 b3       	in	r24, 0x15	; 21
 438:	8f 70       	andi	r24, 0x0F	; 15
 43a:	85 bb       	out	0x15, r24	; 21
				PORTC_REG |= Copy_u8Value;
 43c:	85 b3       	in	r24, 0x15	; 21
 43e:	48 2b       	or	r20, r24
 440:	45 bb       	out	0x15, r20	; 21
				break;
 442:	08 95       	ret
				case PORTD:  PORTD_REG &= 0x0F;
 444:	82 b3       	in	r24, 0x12	; 18
 446:	8f 70       	andi	r24, 0x0F	; 15
 448:	82 bb       	out	0x12, r24	; 18
				PORTD_REG |= Copy_u8Value;
 44a:	82 b3       	in	r24, 0x12	; 18
 44c:	48 2b       	or	r20, r24
 44e:	42 bb       	out	0x12, r20	; 18
 450:	08 95       	ret

00000452 <LCD_voidSendCommand>:
/*****************************************************************************************/
void LCD_voidShowPattern(u8 Copy_u8Pattern, u8 Copy_u8Line, u8 Copy_u8Position)
{
	LCD_voidGoTo_XY(Copy_u8Line, Copy_u8Position); //  set DDRAM Address
	LCD_voidWriteChar(Copy_u8Pattern);
}
 452:	cf 93       	push	r28
 454:	c8 2f       	mov	r28, r24
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	66 e0       	ldi	r22, 0x06	; 6
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	65 e0       	ldi	r22, 0x05	; 5
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 46a:	4c 2f       	mov	r20, r28
 46c:	42 95       	swap	r20
 46e:	4f 70       	andi	r20, 0x0F	; 15
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_voidSetNibbleValue>
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	64 e0       	ldi	r22, 0x04	; 4
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 482:	83 ef       	ldi	r24, 0xF3	; 243
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <LCD_voidSendCommand+0x34>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <LCD_voidSendCommand+0x3a>
 48c:	00 00       	nop
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	64 e0       	ldi	r22, 0x04	; 4
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 498:	83 ef       	ldi	r24, 0xF3	; 243
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_voidSendCommand+0x4a>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <LCD_voidSendCommand+0x50>
 4a2:	00 00       	nop
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	66 e0       	ldi	r22, 0x06	; 6
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	65 e0       	ldi	r22, 0x05	; 5
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 4b8:	4c 2f       	mov	r20, r28
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_voidSetNibbleValue>
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	64 e0       	ldi	r22, 0x04	; 4
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 4cc:	83 ef       	ldi	r24, 0xF3	; 243
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_voidSendCommand+0x7e>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_voidSendCommand+0x84>
 4d6:	00 00       	nop
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	64 e0       	ldi	r22, 0x04	; 4
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 4e2:	83 ef       	ldi	r24, 0xF3	; 243
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_voidSendCommand+0x94>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD_voidSendCommand+0x9a>
 4ec:	00 00       	nop
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <LCD_voidWriteChar>:
 4f2:	cf 93       	push	r28
 4f4:	c8 2f       	mov	r28, r24
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	66 e0       	ldi	r22, 0x06	; 6
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	65 e0       	ldi	r22, 0x05	; 5
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 50a:	4c 2f       	mov	r20, r28
 50c:	42 95       	swap	r20
 50e:	4f 70       	andi	r20, 0x0F	; 15
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_voidSetNibbleValue>
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	64 e0       	ldi	r22, 0x04	; 4
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 522:	83 ef       	ldi	r24, 0xF3	; 243
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <LCD_voidWriteChar+0x34>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <LCD_voidWriteChar+0x3a>
 52c:	00 00       	nop
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	64 e0       	ldi	r22, 0x04	; 4
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 538:	83 ef       	ldi	r24, 0xF3	; 243
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <LCD_voidWriteChar+0x4a>
 540:	00 c0       	rjmp	.+0      	; 0x542 <LCD_voidWriteChar+0x50>
 542:	00 00       	nop
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	66 e0       	ldi	r22, 0x06	; 6
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 54e:	40 e0       	ldi	r20, 0x00	; 0
 550:	65 e0       	ldi	r22, 0x05	; 5
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 558:	4c 2f       	mov	r20, r28
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_voidSetNibbleValue>
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	64 e0       	ldi	r22, 0x04	; 4
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 56c:	83 ef       	ldi	r24, 0xF3	; 243
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <LCD_voidWriteChar+0x7e>
 574:	00 c0       	rjmp	.+0      	; 0x576 <LCD_voidWriteChar+0x84>
 576:	00 00       	nop
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	64 e0       	ldi	r22, 0x04	; 4
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 582:	83 ef       	ldi	r24, 0xF3	; 243
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <LCD_voidWriteChar+0x94>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <LCD_voidWriteChar+0x9a>
 58c:	00 00       	nop
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <LCD_voidWriteString>:
 592:	0f 93       	push	r16
 594:	1f 93       	push	r17
 596:	cf 93       	push	r28
 598:	8c 01       	movw	r16, r24
 59a:	c0 e0       	ldi	r28, 0x00	; 0
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <LCD_voidWriteString+0x12>
 59e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_voidWriteChar>
 5a2:	cf 5f       	subi	r28, 0xFF	; 255
 5a4:	f8 01       	movw	r30, r16
 5a6:	ec 0f       	add	r30, r28
 5a8:	f1 1d       	adc	r31, r1
 5aa:	80 81       	ld	r24, Z
 5ac:	81 11       	cpse	r24, r1
 5ae:	f7 cf       	rjmp	.-18     	; 0x59e <LCD_voidWriteString+0xc>
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <LCD_voidWriteNumber>:
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	2a 97       	sbiw	r28, 0x0a	; 10
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	61 15       	cp	r22, r1
 5d0:	71 05       	cpc	r23, r1
 5d2:	81 05       	cpc	r24, r1
 5d4:	91 05       	cpc	r25, r1
 5d6:	c1 f4       	brne	.+48     	; 0x608 <LCD_voidWriteNumber+0x50>
 5d8:	80 e3       	ldi	r24, 0x30	; 48
 5da:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_voidWriteChar>
 5de:	2a c0       	rjmp	.+84     	; 0x634 <LCD_voidWriteNumber+0x7c>
 5e0:	2a e0       	ldi	r18, 0x0A	; 10
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	0e 94 23 05 	call	0xa46	; 0xa46 <__udivmodsi4>
 5ec:	e1 e0       	ldi	r30, 0x01	; 1
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	ec 0f       	add	r30, r28
 5f2:	fd 1f       	adc	r31, r29
 5f4:	e1 0f       	add	r30, r17
 5f6:	f1 1d       	adc	r31, r1
 5f8:	60 5d       	subi	r22, 0xD0	; 208
 5fa:	60 83       	st	Z, r22
 5fc:	62 2f       	mov	r22, r18
 5fe:	73 2f       	mov	r23, r19
 600:	84 2f       	mov	r24, r20
 602:	95 2f       	mov	r25, r21
 604:	1f 5f       	subi	r17, 0xFF	; 255
 606:	01 c0       	rjmp	.+2      	; 0x60a <LCD_voidWriteNumber+0x52>
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	61 15       	cp	r22, r1
 60c:	71 05       	cpc	r23, r1
 60e:	81 05       	cpc	r24, r1
 610:	91 05       	cpc	r25, r1
 612:	31 f7       	brne	.-52     	; 0x5e0 <LCD_voidWriteNumber+0x28>
 614:	11 50       	subi	r17, 0x01	; 1
 616:	0c c0       	rjmp	.+24     	; 0x630 <LCD_voidWriteNumber+0x78>
 618:	e1 e0       	ldi	r30, 0x01	; 1
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	ec 0f       	add	r30, r28
 61e:	fd 1f       	adc	r31, r29
 620:	e1 0f       	add	r30, r17
 622:	f1 1d       	adc	r31, r1
 624:	17 fd       	sbrc	r17, 7
 626:	fa 95       	dec	r31
 628:	80 81       	ld	r24, Z
 62a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <LCD_voidWriteChar>
 62e:	11 50       	subi	r17, 0x01	; 1
 630:	11 23       	and	r17, r17
 632:	94 f7       	brge	.-28     	; 0x618 <LCD_voidWriteNumber+0x60>
 634:	2a 96       	adiw	r28, 0x0a	; 10
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	de bf       	out	0x3e, r29	; 62
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	cd bf       	out	0x3d, r28	; 61
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	08 95       	ret

00000648 <LCD_voidGoTo_XY>:
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	e0 f4       	brcc	.+56     	; 0x684 <LCD_voidGoTo_XY+0x3c>
 64c:	60 31       	cpi	r22, 0x10	; 16
 64e:	d0 f4       	brcc	.+52     	; 0x684 <LCD_voidGoTo_XY+0x3c>
 650:	88 23       	and	r24, r24
 652:	19 f0       	breq	.+6      	; 0x65a <LCD_voidGoTo_XY+0x12>
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	61 f0       	breq	.+24     	; 0x670 <LCD_voidGoTo_XY+0x28>
 658:	08 95       	ret
 65a:	80 e8       	ldi	r24, 0x80	; 128
 65c:	86 0f       	add	r24, r22
 65e:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
 662:	87 ea       	ldi	r24, 0xA7	; 167
 664:	91 e6       	ldi	r25, 0x61	; 97
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <LCD_voidGoTo_XY+0x1e>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <LCD_voidGoTo_XY+0x24>
 66c:	00 00       	nop
 66e:	08 95       	ret
 670:	80 ec       	ldi	r24, 0xC0	; 192
 672:	86 0f       	add	r24, r22
 674:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
 678:	87 ea       	ldi	r24, 0xA7	; 167
 67a:	91 e6       	ldi	r25, 0x61	; 97
 67c:	01 97       	sbiw	r24, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <LCD_voidGoTo_XY+0x34>
 680:	00 c0       	rjmp	.+0      	; 0x682 <LCD_voidGoTo_XY+0x3a>
 682:	00 00       	nop
 684:	08 95       	ret

00000686 <LCD_voidClearDisplay>:
/* Description : Clears the entire LCD display                                           */
/* Return : void                                                                         */
/*****************************************************************************************/
void LCD_voidClearDisplay(void)
{
	LCD_voidSendCommand(CLEAR_DIS);
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68c:	83 ef       	ldi	r24, 0xF3	; 243
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <LCD_voidClearDisplay+0xa>
 694:	00 c0       	rjmp	.+0      	; 0x696 <LCD_voidClearDisplay+0x10>
 696:	00 00       	nop
	_delay_ms(2); 
	LCD_voidSendCommand(RETURN_HOME);  // cursor returns to position 0
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
 69e:	83 ef       	ldi	r24, 0xF3	; 243
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <LCD_voidClearDisplay+0x1c>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <LCD_voidClearDisplay+0x22>
 6a8:	00 00       	nop
 6aa:	08 95       	ret

000006ac <LCD_voidInit>:
	LCD_voidSendCommand(ENTRY_MODE_INCREASE_NO_SHIFT);
	_delay_ms(1);
	
	#elif defined LCD_4BIT_LOW_NIBBLE
	
	DIO_voidSetNibbleDirection(LCD_DATA_PORT,LOW_NIBBLE,OUTPUT);
 6ac:	41 e0       	ldi	r20, 0x01	; 1
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_voidSetNibbleDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS_PIN, OUTPUT);
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	66 e0       	ldi	r22, 0x06	; 6
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW_PIN, OUTPUT);
 6c0:	41 e0       	ldi	r20, 0x01	; 1
 6c2:	65 e0       	ldi	r22, 0x05	; 5
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, E_PIN, OUTPUT);
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	64 e0       	ldi	r22, 0x04	; 4
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
 6d4:	8d e2       	ldi	r24, 0x2D	; 45
 6d6:	92 e2       	ldi	r25, 0x22	; 34
 6d8:	01 97       	sbiw	r24, 0x01	; 1
 6da:	f1 f7       	brne	.-4      	; 0x6d8 <LCD_voidInit+0x2c>
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <LCD_voidInit+0x32>
 6de:	00 00       	nop
	
	_delay_ms(35);

	
	/* Function Set Command */
	LCD_voidSendCommand(0x02);
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
 6e6:	89 ef       	ldi	r24, 0xF9	; 249
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_voidInit+0x3e>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <LCD_voidInit+0x44>
 6f0:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendCommand(FS_4BIT_2LINES_5x7);
 6f2:	88 e2       	ldi	r24, 0x28	; 40
 6f4:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
 6f8:	89 ef       	ldi	r24, 0xF9	; 249
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <LCD_voidInit+0x50>
 700:	00 c0       	rjmp	.+0      	; 0x702 <LCD_voidInit+0x56>
 702:	00 00       	nop
	_delay_ms(1);


	/* Display ON, Cursor ON */
	LCD_voidSendCommand(DIS_ON_CURSOR_OFF);
 704:	8c e0       	ldi	r24, 0x0C	; 12
 706:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
 70a:	89 ef       	ldi	r24, 0xF9	; 249
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <LCD_voidInit+0x62>
 712:	00 c0       	rjmp	.+0      	; 0x714 <LCD_voidInit+0x68>
 714:	00 00       	nop
	_delay_ms(1);

	/* Clear Display and Reset Cursor */
	LCD_voidClearDisplay();  // Clears display & ensures cursor at (0,0)
 716:	0e 94 43 03 	call	0x686	; 0x686 <LCD_voidClearDisplay>
 71a:	83 ef       	ldi	r24, 0xF3	; 243
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	f1 f7       	brne	.-4      	; 0x71e <LCD_voidInit+0x72>
 722:	00 c0       	rjmp	.+0      	; 0x724 <LCD_voidInit+0x78>
 724:	00 00       	nop
	_delay_ms(2);

	/* Entry Mode Set */
	LCD_voidSendCommand(ENTRY_MODE_INCREASE_NO_SHIFT);
 726:	86 e0       	ldi	r24, 0x06	; 6
 728:	0e 94 29 02 	call	0x452	; 0x452 <LCD_voidSendCommand>
 72c:	89 ef       	ldi	r24, 0xF9	; 249
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <LCD_voidInit+0x84>
 734:	00 c0       	rjmp	.+0      	; 0x736 <LCD_voidInit+0x8a>
 736:	00 00       	nop
 738:	08 95       	ret

0000073a <main>:
u8 c3 = 0;
u8 c4 = 0;

int main(void)
{
    LCD_voidInit();
 73a:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_voidInit>
    
    DIO_voidSetPinDirection(PORTB, PIN0,OUTPUT);    // LED for Candidate A
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB, PIN1,OUTPUT);    // LED for Candidate B
 748:	41 e0       	ldi	r20, 0x01	; 1
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB, PIN2,OUTPUT);    // LED for Candidate C
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	62 e0       	ldi	r22, 0x02	; 2
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTB, PIN3,OUTPUT);    // LED for Candidate D
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	63 e0       	ldi	r22, 0x03	; 3
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>

    DIO_voidSetPinDirection(PORTD, PIN0,INPUT);  // Vote A button
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	83 e0       	ldi	r24, 0x03	; 3
 76c:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTD, PIN1,INPUT);  // Vote B button
 770:	40 e0       	ldi	r20, 0x00	; 0
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTD, PIN2,INPUT);  // Vote C button
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	62 e0       	ldi	r22, 0x02	; 2
 77e:	83 e0       	ldi	r24, 0x03	; 3
 780:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTD, PIN3,INPUT);  // Vote D button
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	63 e0       	ldi	r22, 0x03	; 3
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORTD, PIN4,INPUT);  // Reset button    
 78e:	40 e0       	ldi	r20, 0x00	; 0
 790:	64 e0       	ldi	r22, 0x04	; 4
 792:	83 e0       	ldi	r24, 0x03	; 3
 794:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_voidSetPinDirection>
    
    LCD_voidWriteString("Electronic");
 798:	80 e6       	ldi	r24, 0x60	; 96
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
    LCD_voidGoTo_XY(LINE_2, 0);
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
    LCD_voidWriteString("Voting Machine");
 7a8:	8b e6       	ldi	r24, 0x6B	; 107
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
 7b0:	2f ef       	ldi	r18, 0xFF	; 255
 7b2:	83 ed       	ldi	r24, 0xD3	; 211
 7b4:	90 e3       	ldi	r25, 0x30	; 48
 7b6:	21 50       	subi	r18, 0x01	; 1
 7b8:	80 40       	sbci	r24, 0x00	; 0
 7ba:	90 40       	sbci	r25, 0x00	; 0
 7bc:	e1 f7       	brne	.-8      	; 0x7b6 <main+0x7c>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <main+0x86>
 7c0:	00 00       	nop
    _delay_ms(2000);
    LCD_voidClearDisplay();
 7c2:	0e 94 43 03 	call	0x686	; 0x686 <LCD_voidClearDisplay>
 7c6:	2f e7       	ldi	r18, 0x7F	; 127
 7c8:	8a e1       	ldi	r24, 0x1A	; 26
 7ca:	96 e0       	ldi	r25, 0x06	; 6
 7cc:	21 50       	subi	r18, 0x01	; 1
 7ce:	80 40       	sbci	r24, 0x00	; 0
 7d0:	90 40       	sbci	r25, 0x00	; 0
 7d2:	e1 f7       	brne	.-8      	; 0x7cc <main+0x92>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x9c>
 7d6:	00 00       	nop
    _delay_ms(250);

    // Initial display
    LCD_voidGoTo_XY(LINE_1, 0);
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
    LCD_voidWriteString("A = 0");
 7e0:	8a e7       	ldi	r24, 0x7A	; 122
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
    LCD_voidGoTo_XY(LINE_1, 10);
 7e8:	6a e0       	ldi	r22, 0x0A	; 10
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
    LCD_voidWriteString("B = 0");
 7f0:	80 e8       	ldi	r24, 0x80	; 128
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
    LCD_voidGoTo_XY(LINE_2, 0);
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
    LCD_voidWriteString("C = 0");
 800:	86 e8       	ldi	r24, 0x86	; 134
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
    LCD_voidGoTo_XY(LINE_2, 10);
 808:	6a e0       	ldi	r22, 0x0A	; 10
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
    LCD_voidWriteString("D = 0");
 810:	8c e8       	ldi	r24, 0x8C	; 140
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
    
    u8 RB1, RB2, RB3, RB4, RB5;

    while (1)
    {
        RB1 = BUTTON_u8Get_button_Pin(PORTD, PIN0);
 818:	60 e0       	ldi	r22, 0x00	; 0
 81a:	83 e0       	ldi	r24, 0x03	; 3
 81c:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_u8Get_button_Pin>
 820:	c8 2f       	mov	r28, r24
        RB2 = BUTTON_u8Get_button_Pin(PORTD, PIN1);
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_u8Get_button_Pin>
 82a:	d8 2f       	mov	r29, r24
        RB3 = BUTTON_u8Get_button_Pin(PORTD, PIN2);
 82c:	62 e0       	ldi	r22, 0x02	; 2
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_u8Get_button_Pin>
 834:	18 2f       	mov	r17, r24
        RB4 = BUTTON_u8Get_button_Pin(PORTD, PIN3);
 836:	63 e0       	ldi	r22, 0x03	; 3
 838:	83 e0       	ldi	r24, 0x03	; 3
 83a:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_u8Get_button_Pin>
 83e:	08 2f       	mov	r16, r24
        RB5 = BUTTON_u8Get_button_Pin(PORTD, PIN4);
 840:	64 e0       	ldi	r22, 0x04	; 4
 842:	83 e0       	ldi	r24, 0x03	; 3
 844:	0e 94 49 00 	call	0x92	; 0x92 <BUTTON_u8Get_button_Pin>
        
        if (RB1 == 1)   // Button for Candidate A
 848:	c1 30       	cpi	r28, 0x01	; 1
 84a:	21 f5       	brne	.+72     	; 0x894 <__stack+0x35>
        {
            c1++;
 84c:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <c1>
 850:	8f 5f       	subi	r24, 0xFF	; 255
 852:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <c1>
            DIO_voidSetPinValue(PORTB, PIN0, HIGH);  // Turn on LED for Candidate A
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
            LCD_voidGoTo_XY(LINE_1, 4);
 860:	64 e0       	ldi	r22, 0x04	; 4
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteNumber(c1);
 868:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <c1>
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_voidWriteNumber>
 876:	2f ef       	ldi	r18, 0xFF	; 255
 878:	80 e7       	ldi	r24, 0x70	; 112
 87a:	92 e0       	ldi	r25, 0x02	; 2
 87c:	21 50       	subi	r18, 0x01	; 1
 87e:	80 40       	sbci	r24, 0x00	; 0
 880:	90 40       	sbci	r25, 0x00	; 0
 882:	e1 f7       	brne	.-8      	; 0x87c <__stack+0x1d>
 884:	00 c0       	rjmp	.+0      	; 0x886 <__stack+0x27>
 886:	00 00       	nop
            _delay_ms(100);                          // Small delay to prevent multiple rapid counts
            DIO_voidSetPinValue(PORTB, PIN0, LOW);   // Turn off LED after the click
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 892:	cf c0       	rjmp	.+414    	; 0xa32 <__stack+0x1d3>
        }
        else if (RB2 == 1)  // Button for Candidate B
 894:	d1 30       	cpi	r29, 0x01	; 1
 896:	21 f5       	brne	.+72     	; 0x8e0 <__stack+0x81>
        {
            c2++;
 898:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <c2>
 89c:	8f 5f       	subi	r24, 0xFF	; 255
 89e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <c2>
            DIO_voidSetPinValue(PORTB, PIN1, HIGH);  // Turn on LED for Candidate B
 8a2:	41 e0       	ldi	r20, 0x01	; 1
 8a4:	61 e0       	ldi	r22, 0x01	; 1
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
            LCD_voidGoTo_XY(LINE_1, 14);
 8ac:	6e e0       	ldi	r22, 0x0E	; 14
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteNumber(c2);
 8b4:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <c2>
 8b8:	70 e0       	ldi	r23, 0x00	; 0
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_voidWriteNumber>
 8c2:	2f ef       	ldi	r18, 0xFF	; 255
 8c4:	80 e7       	ldi	r24, 0x70	; 112
 8c6:	92 e0       	ldi	r25, 0x02	; 2
 8c8:	21 50       	subi	r18, 0x01	; 1
 8ca:	80 40       	sbci	r24, 0x00	; 0
 8cc:	90 40       	sbci	r25, 0x00	; 0
 8ce:	e1 f7       	brne	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <__stack+0x73>
 8d2:	00 00       	nop
            _delay_ms(100);
            DIO_voidSetPinValue(PORTB, PIN1, LOW);   // Turn off LED after the click
 8d4:	40 e0       	ldi	r20, 0x00	; 0
 8d6:	61 e0       	ldi	r22, 0x01	; 1
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 8de:	a9 c0       	rjmp	.+338    	; 0xa32 <__stack+0x1d3>
        }
        else if (RB3 == 1)  // Button for Candidate C
 8e0:	11 30       	cpi	r17, 0x01	; 1
 8e2:	21 f5       	brne	.+72     	; 0x92c <__stack+0xcd>
        {
            c3++;
 8e4:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <c3>
 8e8:	8f 5f       	subi	r24, 0xFF	; 255
 8ea:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <c3>
            DIO_voidSetPinValue(PORTB, PIN2, HIGH);  // Turn on LED for Candidate C
 8ee:	41 e0       	ldi	r20, 0x01	; 1
 8f0:	62 e0       	ldi	r22, 0x02	; 2
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
            LCD_voidGoTo_XY(LINE_2, 4);
 8f8:	64 e0       	ldi	r22, 0x04	; 4
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteNumber(c3);
 900:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <c3>
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_voidWriteNumber>
 90e:	2f ef       	ldi	r18, 0xFF	; 255
 910:	80 e7       	ldi	r24, 0x70	; 112
 912:	92 e0       	ldi	r25, 0x02	; 2
 914:	21 50       	subi	r18, 0x01	; 1
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	e1 f7       	brne	.-8      	; 0x914 <__stack+0xb5>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0xbf>
 91e:	00 00       	nop
            _delay_ms(100);
            DIO_voidSetPinValue(PORTB, PIN2, LOW);   // Turn off LED after the click
 920:	40 e0       	ldi	r20, 0x00	; 0
 922:	62 e0       	ldi	r22, 0x02	; 2
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 92a:	83 c0       	rjmp	.+262    	; 0xa32 <__stack+0x1d3>
        }
        else if (RB4 == 1)  // Button for Candidate D
 92c:	01 30       	cpi	r16, 0x01	; 1
 92e:	21 f5       	brne	.+72     	; 0x978 <__stack+0x119>
        {
            c4++;
 930:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
 934:	8f 5f       	subi	r24, 0xFF	; 255
 936:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
            DIO_voidSetPinValue(PORTB, PIN3, HIGH);  // Turn on LED for Candidate D
 93a:	41 e0       	ldi	r20, 0x01	; 1
 93c:	63 e0       	ldi	r22, 0x03	; 3
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
            LCD_voidGoTo_XY(LINE_2, 14);
 944:	6e e0       	ldi	r22, 0x0E	; 14
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteNumber(c4);
 94c:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <__data_end>
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_voidWriteNumber>
 95a:	2f ef       	ldi	r18, 0xFF	; 255
 95c:	80 e7       	ldi	r24, 0x70	; 112
 95e:	92 e0       	ldi	r25, 0x02	; 2
 960:	21 50       	subi	r18, 0x01	; 1
 962:	80 40       	sbci	r24, 0x00	; 0
 964:	90 40       	sbci	r25, 0x00	; 0
 966:	e1 f7       	brne	.-8      	; 0x960 <__stack+0x101>
 968:	00 c0       	rjmp	.+0      	; 0x96a <__stack+0x10b>
 96a:	00 00       	nop
            _delay_ms(100);
            DIO_voidSetPinValue(PORTB, PIN3, LOW);   // Turn off LED after the click
 96c:	40 e0       	ldi	r20, 0x00	; 0
 96e:	63 e0       	ldi	r22, 0x03	; 3
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 976:	5d c0       	rjmp	.+186    	; 0xa32 <__stack+0x1d3>
        }
        else if (RB5 == 1)  // Reset Button
 978:	81 30       	cpi	r24, 0x01	; 1
 97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x11f>
 97c:	5a c0       	rjmp	.+180    	; 0xa32 <__stack+0x1d3>
        {
			DIO_voidSetPinValue(PORTB, PIN0, HIGH);
 97e:	41 e0       	ldi	r20, 0x01	; 1
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTB, PIN1, HIGH);
 986:	41 e0       	ldi	r20, 0x01	; 1
 988:	61 e0       	ldi	r22, 0x01	; 1
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTB, PIN2, HIGH);
 990:	41 e0       	ldi	r20, 0x01	; 1
 992:	62 e0       	ldi	r22, 0x02	; 2
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTB, PIN3, HIGH);
 99a:	41 e0       	ldi	r20, 0x01	; 1
 99c:	63 e0       	ldi	r22, 0x03	; 3
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
			
			
			
            // Reset vote counts
            c1 = 0;
 9a4:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <c1>
            c2 = 0;
 9a8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <c2>
            c3 = 0;
 9ac:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <c3>
            c4 = 0;
 9b0:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
            
			LCD_voidClearDisplay();
 9b4:	0e 94 43 03 	call	0x686	; 0x686 <LCD_voidClearDisplay>
            LCD_voidGoTo_XY(LINE_1, 0);
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	80 e0       	ldi	r24, 0x00	; 0
 9bc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteString("A = 0");
 9c0:	8a e7       	ldi	r24, 0x7A	; 122
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
            LCD_voidGoTo_XY(LINE_1, 10);
 9c8:	6a e0       	ldi	r22, 0x0A	; 10
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteString("B = 0");
 9d0:	80 e8       	ldi	r24, 0x80	; 128
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
            LCD_voidGoTo_XY(LINE_2, 0);
 9d8:	60 e0       	ldi	r22, 0x00	; 0
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteString("C = 0");
 9e0:	86 e8       	ldi	r24, 0x86	; 134
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
            LCD_voidGoTo_XY(LINE_2, 10);
 9e8:	6a e0       	ldi	r22, 0x0A	; 10
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	0e 94 24 03 	call	0x648	; 0x648 <LCD_voidGoTo_XY>
            LCD_voidWriteString("D = 0");
 9f0:	8c e8       	ldi	r24, 0x8C	; 140
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_voidWriteString>
 9f8:	2f ef       	ldi	r18, 0xFF	; 255
 9fa:	80 e7       	ldi	r24, 0x70	; 112
 9fc:	92 e0       	ldi	r25, 0x02	; 2
 9fe:	21 50       	subi	r18, 0x01	; 1
 a00:	80 40       	sbci	r24, 0x00	; 0
 a02:	90 40       	sbci	r25, 0x00	; 0
 a04:	e1 f7       	brne	.-8      	; 0x9fe <__stack+0x19f>
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <__stack+0x1a9>
 a08:	00 00       	nop
			
			_delay_ms(100);
			DIO_voidSetPinValue(PORTB, PIN0, LOW);
 a0a:	40 e0       	ldi	r20, 0x00	; 0
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTB, PIN1, LOW);
 a14:	40 e0       	ldi	r20, 0x00	; 0
 a16:	61 e0       	ldi	r22, 0x01	; 1
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTB, PIN2, LOW);
 a1e:	40 e0       	ldi	r20, 0x00	; 0
 a20:	62 e0       	ldi	r22, 0x02	; 2
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(PORTB, PIN3, LOW);
 a28:	40 e0       	ldi	r20, 0x00	; 0
 a2a:	63 e0       	ldi	r22, 0x03	; 3
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_voidSetPinValue>
 a32:	2f ef       	ldi	r18, 0xFF	; 255
 a34:	81 ee       	ldi	r24, 0xE1	; 225
 a36:	94 e0       	ldi	r25, 0x04	; 4
 a38:	21 50       	subi	r18, 0x01	; 1
 a3a:	80 40       	sbci	r24, 0x00	; 0
 a3c:	90 40       	sbci	r25, 0x00	; 0
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <__stack+0x1d9>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <__stack+0x1e3>
 a42:	00 00       	nop
 a44:	e9 ce       	rjmp	.-558    	; 0x818 <__DATA_REGION_LENGTH__+0x18>

00000a46 <__udivmodsi4>:
 a46:	a1 e2       	ldi	r26, 0x21	; 33
 a48:	1a 2e       	mov	r1, r26
 a4a:	aa 1b       	sub	r26, r26
 a4c:	bb 1b       	sub	r27, r27
 a4e:	fd 01       	movw	r30, r26
 a50:	0d c0       	rjmp	.+26     	; 0xa6c <__udivmodsi4_ep>

00000a52 <__udivmodsi4_loop>:
 a52:	aa 1f       	adc	r26, r26
 a54:	bb 1f       	adc	r27, r27
 a56:	ee 1f       	adc	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	a2 17       	cp	r26, r18
 a5c:	b3 07       	cpc	r27, r19
 a5e:	e4 07       	cpc	r30, r20
 a60:	f5 07       	cpc	r31, r21
 a62:	20 f0       	brcs	.+8      	; 0xa6c <__udivmodsi4_ep>
 a64:	a2 1b       	sub	r26, r18
 a66:	b3 0b       	sbc	r27, r19
 a68:	e4 0b       	sbc	r30, r20
 a6a:	f5 0b       	sbc	r31, r21

00000a6c <__udivmodsi4_ep>:
 a6c:	66 1f       	adc	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	99 1f       	adc	r25, r25
 a74:	1a 94       	dec	r1
 a76:	69 f7       	brne	.-38     	; 0xa52 <__udivmodsi4_loop>
 a78:	60 95       	com	r22
 a7a:	70 95       	com	r23
 a7c:	80 95       	com	r24
 a7e:	90 95       	com	r25
 a80:	9b 01       	movw	r18, r22
 a82:	ac 01       	movw	r20, r24
 a84:	bd 01       	movw	r22, r26
 a86:	cf 01       	movw	r24, r30
 a88:	08 95       	ret

00000a8a <_exit>:
 a8a:	f8 94       	cli

00000a8c <__stop_program>:
 a8c:	ff cf       	rjmp	.-2      	; 0xa8c <__stop_program>
