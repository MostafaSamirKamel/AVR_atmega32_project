
Temp_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000d1e  00000d92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dcc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e73  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d2  00000000  00000000  00002e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d2e  00000000  00000000  000037d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e8  00000000  00000000  00004504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ac  00000000  00000000  000047ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014c2  00000000  00000000  00004f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0000645a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <main>
  8a:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
        CLEAR_BIT(ADMUX_REG,7);
    #elif ( REFERENCE_VOLTAGE == AVCC )
        SET_BIT(ADMUX_REG,6);
        CLEAR_BIT(ADMUX_REG,7);
    #elif ( REFERENCE_VOLTAGE == INTERNAL )
        SET_BIT(ADMUX_REG,6);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
        SET_BIT(ADMUX_REG,7);
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	87 b9       	out	0x07, r24	; 7
	
/*======================================*/
/*     Select ADC  channel & mode   */
/*--------------------------------------*/
		// ACD0 - ADC1
CLEAR_BIT(ADMUX_REG,0);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	87 b9       	out	0x07, r24	; 7
CLEAR_BIT(ADMUX_REG,1);
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	87 b9       	out	0x07, r24	; 7
CLEAR_BIT(ADMUX_REG,2);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	87 b9       	out	0x07, r24	; 7
CLEAR_BIT(ADMUX_REG,3);
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	87 7f       	andi	r24, 0xF7	; 247
  b4:	87 b9       	out	0x07, r24	; 7
SET_BIT(ADMUX_REG,4);
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	87 b9       	out	0x07, r24	; 7
	
/*======================================*/
/*     Select RIGHT or LEFT Adjust      */
/*--------------------------------------*/
    #if ( ADJUST == RIGHT )
        CLEAR_BIT(ADMUX_REG,5);
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	87 b9       	out	0x07, r24	; 7
    #endif
/*======================================*/
/*        ADC Enable or Disable         */
/*--------------------------------------*/
    #if ( ADEN == ENABLE )
        SET_BIT(ADCSRA_REG,7);  
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	86 b9       	out	0x06, r24	; 6
              SET_BIT(SFIOR_REG,6);
              SET_BIT(SFIOR_REG,7);
        #endif

    #elif ( ADATE == DISABLE )
        CLEAR_BIT(ADCSRA_REG,5); 
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	8f 7d       	andi	r24, 0xDF	; 223
  cc:	86 b9       	out	0x06, r24	; 6
/*    ADC Interrupt Enable or Disable   */
/*--------------------------------------*/
    #if ( ADIE == ENABLE )          // work with Interrupt
        SET_BIT(ADCSRA_REG,3);  
    #elif ( ADIE == DISABLE )       // work with Polling
        CLEAR_BIT(ADCSRA_REG,3); 
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	87 7f       	andi	r24, 0xF7	; 247
  d2:	86 b9       	out	0x06, r24	; 6
    #endif
/*======================================*/
/*       ADC Prescaler Selection        */
/*--------------------------------------*/
    /*     Clear Prescaler      */ 
    ADCSRA_REG = ( ADCSRA_REG & 0b11111000 );
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	88 7f       	andi	r24, 0xF8	; 248
  d8:	86 b9       	out	0x06, r24	; 6
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_32 )
          SET_BIT(ADCSRA_REG,0);
        CLEAR_BIT(ADCSRA_REG,1);
          SET_BIT(ADCSRA_REG,2);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_64 )
        CLEAR_BIT(ADCSRA_REG,0);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	8e 7f       	andi	r24, 0xFE	; 254
  de:	86 b9       	out	0x06, r24	; 6
          SET_BIT(ADCSRA_REG,1);
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	86 b9       	out	0x06, r24	; 6
          SET_BIT(ADCSRA_REG,2);
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	86 b9       	out	0x06, r24	; 6
  ec:	08 95       	ret

000000ee <ADC_u16Read>:
{
    /*    Start Conversion    */ 
    #if ( ADATE == ENABLE )
        // Start Conversion When auto Triggering Occures.
    #elif ( ADATE == DISABLE )
        SET_BIT(ADCSRA_REG,6);  // Normal Start Conversion
  ee:	86 b1       	in	r24, 0x06	; 6
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	86 b9       	out	0x06, r24	; 6
/*===============================================================================================*/    
    #if ( ADIE == ENABLE )                        // work with Interrupt
        // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADI_F = 0 ;
  f4:	80 e0       	ldi	r24, 0x00	; 0
        while( ADI_F == 0 )
  f6:	09 c0       	rjmp	.+18     	; 0x10a <ADC_u16Read+0x1c>
        {
            ADI_F = GET_BIT(ADCSRA_REG,4);    // Stuck on while untill Flag Raising 1 .
  f8:	86 b1       	in	r24, 0x06	; 6
  fa:	80 71       	andi	r24, 0x10	; 16
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	92 95       	swap	r25
 100:	82 95       	swap	r24
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	89 27       	eor	r24, r25
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	89 27       	eor	r24, r25
    #if ( ADIE == ENABLE )                        // work with Interrupt
        // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADI_F = 0 ;
        while( ADI_F == 0 )
 10a:	88 23       	and	r24, r24
 10c:	a9 f3       	breq	.-22     	; 0xf8 <ADC_u16Read+0xa>
/*===============================================================================================*/
    #if ( ADIE == ENABLE )          // work with Interrupt
        // Interrupt Flag Will Cleared Automaticlly.    
    #elif ( ADIE == DISABLE )       // work with Polling
        /* Clear Flag */
        SET_BIT(ADCSRA_REG,4);
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	80 61       	ori	r24, 0x10	; 16
 112:	86 b9       	out	0x06, r24	; 6
/*********************************************************     Get Reading      *********************************************/
/*        Get Reading from 16 Bit ADC_REG  if we used RIGHT Adjust and Resoluotion 10 BIT  Return Value From { 0 -> 1023 }  */
/*        Get Reading from 8 Bit ADCH_REG  if we used LEFT Adjust and Resoluotion  8 BIT   Return Value From { 0 -> 255  }  */
/*--------------------------------------------------------------------------------------------------------------------------*/
    #if ( ADJUST == RIGHT )
        return ADC_REG ;      
 114:	84 b1       	in	r24, 0x04	; 4
 116:	95 b1       	in	r25, 0x05	; 5
    #elif ( ADJUST == LEFT )
        return ADCH_REG ;
    #endif
/*===============================================================================================*/

}
 118:	08 95       	ret

0000011a <DIO_voidSetPinDirection>:
    else
    {
       switch(Copy_u8PullUpStatus)
       {
            case ON :  DIO_voidSetPortValue (Copy_u8PortNumber, HIGH );  break;
            case OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, LOW );   break;
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	08 f0       	brcs	.+2      	; 0x120 <DIO_voidSetPinDirection+0x6>
 11e:	73 c0       	rjmp	.+230    	; 0x206 <DIO_voidSetPinDirection+0xec>
 120:	68 30       	cpi	r22, 0x08	; 8
 122:	08 f0       	brcs	.+2      	; 0x126 <DIO_voidSetPinDirection+0xc>
 124:	70 c0       	rjmp	.+224    	; 0x206 <DIO_voidSetPinDirection+0xec>
 126:	44 23       	and	r20, r20
 128:	19 f0       	breq	.+6      	; 0x130 <DIO_voidSetPinDirection+0x16>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	c9 f1       	breq	.+114    	; 0x1a0 <DIO_voidSetPinDirection+0x86>
 12e:	08 95       	ret
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	91 f0       	breq	.+36     	; 0x158 <DIO_voidSetPinDirection+0x3e>
 134:	28 f0       	brcs	.+10     	; 0x140 <DIO_voidSetPinDirection+0x26>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	d9 f0       	breq	.+54     	; 0x170 <DIO_voidSetPinDirection+0x56>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	29 f1       	breq	.+74     	; 0x188 <DIO_voidSetPinDirection+0x6e>
 13e:	08 95       	ret
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_voidSetPinDirection+0x32>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_voidSetPinDirection+0x2e>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	8a bb       	out	0x1a, r24	; 26
 156:	08 95       	ret
 158:	27 b3       	in	r18, 0x17	; 23
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_voidSetPinDirection+0x4a>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_voidSetPinDirection+0x46>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_voidSetPinDirection+0x62>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_voidSetPinDirection+0x5e>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	84 bb       	out	0x14, r24	; 20
 186:	08 95       	ret
 188:	21 b3       	in	r18, 0x11	; 17
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_voidSetPinDirection+0x7a>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_voidSetPinDirection+0x76>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	81 bb       	out	0x11, r24	; 17
 19e:	08 95       	ret
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	89 f0       	breq	.+34     	; 0x1c6 <DIO_voidSetPinDirection+0xac>
 1a4:	28 f0       	brcs	.+10     	; 0x1b0 <DIO_voidSetPinDirection+0x96>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	c9 f0       	breq	.+50     	; 0x1dc <DIO_voidSetPinDirection+0xc2>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	11 f1       	breq	.+68     	; 0x1f2 <DIO_voidSetPinDirection+0xd8>
 1ae:	08 95       	ret
 1b0:	2a b3       	in	r18, 0x1a	; 26
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPinDirection+0xa2>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPinDirection+0x9e>
 1c0:	82 2b       	or	r24, r18
 1c2:	8a bb       	out	0x1a, r24	; 26
 1c4:	08 95       	ret
 1c6:	27 b3       	in	r18, 0x17	; 23
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_voidSetPinDirection+0xb8>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_voidSetPinDirection+0xb4>
 1d6:	82 2b       	or	r24, r18
 1d8:	87 bb       	out	0x17, r24	; 23
 1da:	08 95       	ret
 1dc:	24 b3       	in	r18, 0x14	; 20
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_voidSetPinDirection+0xce>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_voidSetPinDirection+0xca>
 1ec:	82 2b       	or	r24, r18
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	08 95       	ret
 1f2:	21 b3       	in	r18, 0x11	; 17
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_voidSetPinDirection+0xe4>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_voidSetPinDirection+0xe0>
 202:	82 2b       	or	r24, r18
 204:	81 bb       	out	0x11, r24	; 17
 206:	08 95       	ret

00000208 <DIO_voidSetPinValue>:
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	08 f0       	brcs	.+2      	; 0x20e <DIO_voidSetPinValue+0x6>
 20c:	73 c0       	rjmp	.+230    	; 0x2f4 <DIO_voidSetPinValue+0xec>
 20e:	68 30       	cpi	r22, 0x08	; 8
 210:	08 f0       	brcs	.+2      	; 0x214 <DIO_voidSetPinValue+0xc>
 212:	70 c0       	rjmp	.+224    	; 0x2f4 <DIO_voidSetPinValue+0xec>
 214:	44 23       	and	r20, r20
 216:	19 f0       	breq	.+6      	; 0x21e <DIO_voidSetPinValue+0x16>
 218:	41 30       	cpi	r20, 0x01	; 1
 21a:	c9 f1       	breq	.+114    	; 0x28e <DIO_voidSetPinValue+0x86>
 21c:	08 95       	ret
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	91 f0       	breq	.+36     	; 0x246 <DIO_voidSetPinValue+0x3e>
 222:	28 f0       	brcs	.+10     	; 0x22e <DIO_voidSetPinValue+0x26>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	d9 f0       	breq	.+54     	; 0x25e <DIO_voidSetPinValue+0x56>
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	29 f1       	breq	.+74     	; 0x276 <DIO_voidSetPinValue+0x6e>
 22c:	08 95       	ret
 22e:	2b b3       	in	r18, 0x1b	; 27
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_voidSetPinValue+0x32>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_voidSetPinValue+0x2e>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	8b bb       	out	0x1b, r24	; 27
 244:	08 95       	ret
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_voidSetPinValue+0x4a>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_voidSetPinValue+0x46>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
 25e:	25 b3       	in	r18, 0x15	; 21
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_voidSetPinValue+0x62>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_voidSetPinValue+0x5e>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	85 bb       	out	0x15, r24	; 21
 274:	08 95       	ret
 276:	22 b3       	in	r18, 0x12	; 18
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_voidSetPinValue+0x7a>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_voidSetPinValue+0x76>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	89 f0       	breq	.+34     	; 0x2b4 <DIO_voidSetPinValue+0xac>
 292:	28 f0       	brcs	.+10     	; 0x29e <DIO_voidSetPinValue+0x96>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	c9 f0       	breq	.+50     	; 0x2ca <DIO_voidSetPinValue+0xc2>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	11 f1       	breq	.+68     	; 0x2e0 <DIO_voidSetPinValue+0xd8>
 29c:	08 95       	ret
 29e:	2b b3       	in	r18, 0x1b	; 27
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_voidSetPinValue+0xa2>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_voidSetPinValue+0x9e>
 2ae:	82 2b       	or	r24, r18
 2b0:	8b bb       	out	0x1b, r24	; 27
 2b2:	08 95       	ret
 2b4:	28 b3       	in	r18, 0x18	; 24
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_voidSetPinValue+0xb8>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_voidSetPinValue+0xb4>
 2c4:	82 2b       	or	r24, r18
 2c6:	88 bb       	out	0x18, r24	; 24
 2c8:	08 95       	ret
 2ca:	25 b3       	in	r18, 0x15	; 21
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_voidSetPinValue+0xce>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_voidSetPinValue+0xca>
 2da:	82 2b       	or	r24, r18
 2dc:	85 bb       	out	0x15, r24	; 21
 2de:	08 95       	ret
 2e0:	22 b3       	in	r18, 0x12	; 18
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_voidSetPinValue+0xe4>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_voidSetPinValue+0xe0>
 2f0:	82 2b       	or	r24, r18
 2f2:	82 bb       	out	0x12, r24	; 18
 2f4:	08 95       	ret

000002f6 <DIO_voidSetNibbleDirection>:
    }    
}
/*=================================================================================================*/
/*=================================================================================================*/

void DIO_voidSetNibbleDirection (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Direction) {
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 2fa:	84 30       	cpi	r24, 0x04	; 4
 2fc:	58 f5       	brcc	.+86     	; 0x354 <DIO_voidSetNibbleDirection+0x5e>
 2fe:	d4 2f       	mov	r29, r20
 300:	c8 2f       	mov	r28, r24
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 302:	66 23       	and	r22, r22
 304:	a9 f0       	breq	.+42     	; 0x330 <DIO_voidSetNibbleDirection+0x3a>
 306:	61 30       	cpi	r22, 0x01	; 1
 308:	29 f5       	brne	.+74     	; 0x354 <DIO_voidSetNibbleDirection+0x5e>
		{
			case LOW_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,0,Copy_u8Direction);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,1,Copy_u8Direction);
 310:	4d 2f       	mov	r20, r29
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	8c 2f       	mov	r24, r28
 316:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,2,Copy_u8Direction);
 31a:	4d 2f       	mov	r20, r29
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	8c 2f       	mov	r24, r28
 320:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,3,Copy_u8Direction);
 324:	4d 2f       	mov	r20, r29
 326:	63 e0       	ldi	r22, 0x03	; 3
 328:	8c 2f       	mov	r24, r28
 32a:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
			break;
 32e:	12 c0       	rjmp	.+36     	; 0x354 <DIO_voidSetNibbleDirection+0x5e>
			case HIGH_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,4,Copy_u8Direction);
 330:	64 e0       	ldi	r22, 0x04	; 4
 332:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,5,Copy_u8Direction);
 336:	4d 2f       	mov	r20, r29
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	8c 2f       	mov	r24, r28
 33c:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,6,Copy_u8Direction);
 340:	4d 2f       	mov	r20, r29
 342:	66 e0       	ldi	r22, 0x06	; 6
 344:	8c 2f       	mov	r24, r28
 346:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,7,Copy_u8Direction);
 34a:	4d 2f       	mov	r20, r29
 34c:	67 e0       	ldi	r22, 0x07	; 7
 34e:	8c 2f       	mov	r24, r28
 350:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
			break;
			default:
			break;
		}
	}
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <DIO_voidSetNibbleValue>:


void DIO_voidSetNibbleValue (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Value) {
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	08 f0       	brcs	.+2      	; 0x360 <DIO_voidSetNibbleValue+0x6>
 35e:	4f c0       	rjmp	.+158    	; 0x3fe <DIO_voidSetNibbleValue+0xa4>
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 360:	66 23       	and	r22, r22
 362:	41 f1       	breq	.+80     	; 0x3b4 <DIO_voidSetNibbleValue+0x5a>
 364:	61 30       	cpi	r22, 0x01	; 1
 366:	09 f0       	breq	.+2      	; 0x36a <DIO_voidSetNibbleValue+0x10>
 368:	4a c0       	rjmp	.+148    	; 0x3fe <DIO_voidSetNibbleValue+0xa4>
		{
			case LOW_NIBBLE:
					Copy_u8Value&=0x0f;
 36a:	4f 70       	andi	r20, 0x0F	; 15
					switch(Copy_u8PortNumber)
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	69 f0       	breq	.+26     	; 0x38a <DIO_voidSetNibbleValue+0x30>
 370:	28 f0       	brcs	.+10     	; 0x37c <DIO_voidSetNibbleValue+0x22>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	89 f0       	breq	.+34     	; 0x398 <DIO_voidSetNibbleValue+0x3e>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	b1 f0       	breq	.+44     	; 0x3a6 <DIO_voidSetNibbleValue+0x4c>
 37a:	08 95       	ret
					{
						case PORTA:  PORTA_REG&=0xf0;
 37c:	8b b3       	in	r24, 0x1b	; 27
 37e:	80 7f       	andi	r24, 0xF0	; 240
 380:	8b bb       	out	0x1b, r24	; 27
									PORTA_REG|=Copy_u8Value;
 382:	8b b3       	in	r24, 0x1b	; 27
 384:	48 2b       	or	r20, r24
 386:	4b bb       	out	0x1b, r20	; 27
									break; 
 388:	08 95       	ret
						case PORTB:	PORTB_REG&=0xf0;
 38a:	88 b3       	in	r24, 0x18	; 24
 38c:	80 7f       	andi	r24, 0xF0	; 240
 38e:	88 bb       	out	0x18, r24	; 24
									PORTB_REG|=Copy_u8Value;
 390:	88 b3       	in	r24, 0x18	; 24
 392:	48 2b       	or	r20, r24
 394:	48 bb       	out	0x18, r20	; 24
									break;
 396:	08 95       	ret
						case PORTC:	PORTC_REG&=0xf0;
 398:	85 b3       	in	r24, 0x15	; 21
 39a:	80 7f       	andi	r24, 0xF0	; 240
 39c:	85 bb       	out	0x15, r24	; 21
									PORTC_REG|=Copy_u8Value;
 39e:	85 b3       	in	r24, 0x15	; 21
 3a0:	48 2b       	or	r20, r24
 3a2:	45 bb       	out	0x15, r20	; 21
									break;
 3a4:	08 95       	ret
						case PORTD:	PORTD_REG&=0xf0;
 3a6:	82 b3       	in	r24, 0x12	; 18
 3a8:	80 7f       	andi	r24, 0xF0	; 240
 3aa:	82 bb       	out	0x12, r24	; 18
									PORTD_REG|=Copy_u8Value;
 3ac:	82 b3       	in	r24, 0x12	; 18
 3ae:	48 2b       	or	r20, r24
 3b0:	42 bb       	out	0x12, r20	; 18
									break;
 3b2:	08 95       	ret
					}
			break;
			case HIGH_NIBBLE:
			Copy_u8Value <<= 4; // Shift left by 4 to align it with high nibble
 3b4:	42 95       	swap	r20
 3b6:	40 7f       	andi	r20, 0xF0	; 240
			switch(Copy_u8PortNumber)
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	69 f0       	breq	.+26     	; 0x3d6 <DIO_voidSetNibbleValue+0x7c>
 3bc:	28 f0       	brcs	.+10     	; 0x3c8 <DIO_voidSetNibbleValue+0x6e>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	89 f0       	breq	.+34     	; 0x3e4 <DIO_voidSetNibbleValue+0x8a>
 3c2:	83 30       	cpi	r24, 0x03	; 3
 3c4:	b1 f0       	breq	.+44     	; 0x3f2 <DIO_voidSetNibbleValue+0x98>
 3c6:	08 95       	ret
			{
				case PORTA:  PORTA_REG &= 0x0F;
 3c8:	8b b3       	in	r24, 0x1b	; 27
 3ca:	8f 70       	andi	r24, 0x0F	; 15
 3cc:	8b bb       	out	0x1b, r24	; 27
				PORTA_REG |= Copy_u8Value;
 3ce:	8b b3       	in	r24, 0x1b	; 27
 3d0:	48 2b       	or	r20, r24
 3d2:	4b bb       	out	0x1b, r20	; 27
				break;
 3d4:	08 95       	ret
				case PORTB:  PORTB_REG &= 0x0F;
 3d6:	88 b3       	in	r24, 0x18	; 24
 3d8:	8f 70       	andi	r24, 0x0F	; 15
 3da:	88 bb       	out	0x18, r24	; 24
				PORTB_REG |= Copy_u8Value;
 3dc:	88 b3       	in	r24, 0x18	; 24
 3de:	48 2b       	or	r20, r24
 3e0:	48 bb       	out	0x18, r20	; 24
				break;
 3e2:	08 95       	ret
				case PORTC:  PORTC_REG &= 0x0F;
 3e4:	85 b3       	in	r24, 0x15	; 21
 3e6:	8f 70       	andi	r24, 0x0F	; 15
 3e8:	85 bb       	out	0x15, r24	; 21
				PORTC_REG |= Copy_u8Value;
 3ea:	85 b3       	in	r24, 0x15	; 21
 3ec:	48 2b       	or	r20, r24
 3ee:	45 bb       	out	0x15, r20	; 21
				break;
 3f0:	08 95       	ret
				case PORTD:  PORTD_REG &= 0x0F;
 3f2:	82 b3       	in	r24, 0x12	; 18
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	82 bb       	out	0x12, r24	; 18
				PORTD_REG |= Copy_u8Value;
 3f8:	82 b3       	in	r24, 0x12	; 18
 3fa:	48 2b       	or	r20, r24
 3fc:	42 bb       	out	0x12, r20	; 18
 3fe:	08 95       	ret

00000400 <LCD_voidSendCommand>:
/*****************************************************************************************/
void LCD_voidShowPattern(u8 Copy_u8Pattern, u8 Copy_u8Line, u8 Copy_u8Position)
{
	LCD_voidGoTo_XY(Copy_u8Line, Copy_u8Position); //  set DDRAM Address
	LCD_voidWriteChar(Copy_u8Pattern);
}
 400:	cf 93       	push	r28
 402:	c8 2f       	mov	r28, r24
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	66 e0       	ldi	r22, 0x06	; 6
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	65 e0       	ldi	r22, 0x05	; 5
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 418:	4c 2f       	mov	r20, r28
 41a:	42 95       	swap	r20
 41c:	4f 70       	andi	r20, 0x0F	; 15
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_voidSetNibbleValue>
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	64 e0       	ldi	r22, 0x04	; 4
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 430:	83 ef       	ldi	r24, 0xF3	; 243
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <LCD_voidSendCommand+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_voidSendCommand+0x3a>
 43a:	00 00       	nop
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	64 e0       	ldi	r22, 0x04	; 4
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 446:	83 ef       	ldi	r24, 0xF3	; 243
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <LCD_voidSendCommand+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_voidSendCommand+0x50>
 450:	00 00       	nop
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	65 e0       	ldi	r22, 0x05	; 5
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 466:	4c 2f       	mov	r20, r28
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_voidSetNibbleValue>
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	64 e0       	ldi	r22, 0x04	; 4
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 47a:	83 ef       	ldi	r24, 0xF3	; 243
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <LCD_voidSendCommand+0x7e>
 482:	00 c0       	rjmp	.+0      	; 0x484 <LCD_voidSendCommand+0x84>
 484:	00 00       	nop
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	64 e0       	ldi	r22, 0x04	; 4
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 490:	83 ef       	ldi	r24, 0xF3	; 243
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <LCD_voidSendCommand+0x94>
 498:	00 c0       	rjmp	.+0      	; 0x49a <LCD_voidSendCommand+0x9a>
 49a:	00 00       	nop
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <LCD_voidWriteChar>:
 4a0:	cf 93       	push	r28
 4a2:	c8 2f       	mov	r28, r24
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	66 e0       	ldi	r22, 0x06	; 6
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	65 e0       	ldi	r22, 0x05	; 5
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 4b8:	4c 2f       	mov	r20, r28
 4ba:	42 95       	swap	r20
 4bc:	4f 70       	andi	r20, 0x0F	; 15
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_voidSetNibbleValue>
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	64 e0       	ldi	r22, 0x04	; 4
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 4d0:	83 ef       	ldi	r24, 0xF3	; 243
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_voidWriteChar+0x34>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_voidWriteChar+0x3a>
 4da:	00 00       	nop
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	64 e0       	ldi	r22, 0x04	; 4
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 4e6:	83 ef       	ldi	r24, 0xF3	; 243
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <LCD_voidWriteChar+0x4a>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_voidWriteChar+0x50>
 4f0:	00 00       	nop
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	66 e0       	ldi	r22, 0x06	; 6
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	65 e0       	ldi	r22, 0x05	; 5
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 506:	4c 2f       	mov	r20, r28
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_voidSetNibbleValue>
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	64 e0       	ldi	r22, 0x04	; 4
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 51a:	83 ef       	ldi	r24, 0xF3	; 243
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCD_voidWriteChar+0x7e>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_voidWriteChar+0x84>
 524:	00 00       	nop
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	64 e0       	ldi	r22, 0x04	; 4
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 530:	83 ef       	ldi	r24, 0xF3	; 243
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <LCD_voidWriteChar+0x94>
 538:	00 c0       	rjmp	.+0      	; 0x53a <LCD_voidWriteChar+0x9a>
 53a:	00 00       	nop
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <LCD_voidWriteString>:
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	8c 01       	movw	r16, r24
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	03 c0       	rjmp	.+6      	; 0x552 <LCD_voidWriteString+0x12>
 54c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
 550:	cf 5f       	subi	r28, 0xFF	; 255
 552:	f8 01       	movw	r30, r16
 554:	ec 0f       	add	r30, r28
 556:	f1 1d       	adc	r31, r1
 558:	80 81       	ld	r24, Z
 55a:	81 11       	cpse	r24, r1
 55c:	f7 cf       	rjmp	.-18     	; 0x54c <LCD_voidWriteString+0xc>
 55e:	cf 91       	pop	r28
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	08 95       	ret

00000566 <LCD_voidWriteNumber>:
 566:	cf 93       	push	r28
 568:	61 15       	cp	r22, r1
 56a:	71 05       	cpc	r23, r1
 56c:	81 05       	cpc	r24, r1
 56e:	91 05       	cpc	r25, r1
 570:	21 f4       	brne	.+8      	; 0x57a <LCD_voidWriteNumber+0x14>
 572:	80 e3       	ldi	r24, 0x30	; 48
 574:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
 578:	24 c0       	rjmp	.+72     	; 0x5c2 <LCD_voidWriteNumber+0x5c>
 57a:	6a 30       	cpi	r22, 0x0A	; 10
 57c:	71 05       	cpc	r23, r1
 57e:	81 05       	cpc	r24, r1
 580:	91 05       	cpc	r25, r1
 582:	58 f4       	brcc	.+22     	; 0x59a <LCD_voidWriteNumber+0x34>
 584:	2a e0       	ldi	r18, 0x0A	; 10
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__udivmodsi4>
 590:	80 e3       	ldi	r24, 0x30	; 48
 592:	86 0f       	add	r24, r22
 594:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
 598:	14 c0       	rjmp	.+40     	; 0x5c2 <LCD_voidWriteNumber+0x5c>
 59a:	64 36       	cpi	r22, 0x64	; 100
 59c:	71 05       	cpc	r23, r1
 59e:	81 05       	cpc	r24, r1
 5a0:	91 05       	cpc	r25, r1
 5a2:	78 f4       	brcc	.+30     	; 0x5c2 <LCD_voidWriteNumber+0x5c>
 5a4:	2a e0       	ldi	r18, 0x0A	; 10
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__udivmodsi4>
 5b0:	c6 2f       	mov	r28, r22
 5b2:	80 e3       	ldi	r24, 0x30	; 48
 5b4:	82 0f       	add	r24, r18
 5b6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
 5ba:	80 e3       	ldi	r24, 0x30	; 48
 5bc:	8c 0f       	add	r24, r28
 5be:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <LCD_voidGoTo_XY>:
 5c6:	82 30       	cpi	r24, 0x02	; 2
 5c8:	e0 f4       	brcc	.+56     	; 0x602 <LCD_voidGoTo_XY+0x3c>
 5ca:	60 31       	cpi	r22, 0x10	; 16
 5cc:	d0 f4       	brcc	.+52     	; 0x602 <LCD_voidGoTo_XY+0x3c>
 5ce:	88 23       	and	r24, r24
 5d0:	19 f0       	breq	.+6      	; 0x5d8 <LCD_voidGoTo_XY+0x12>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	61 f0       	breq	.+24     	; 0x5ee <LCD_voidGoTo_XY+0x28>
 5d6:	08 95       	ret
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	86 0f       	add	r24, r22
 5dc:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
 5e0:	87 ea       	ldi	r24, 0xA7	; 167
 5e2:	91 e6       	ldi	r25, 0x61	; 97
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <LCD_voidGoTo_XY+0x1e>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <LCD_voidGoTo_XY+0x24>
 5ea:	00 00       	nop
 5ec:	08 95       	ret
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	86 0f       	add	r24, r22
 5f2:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
 5f6:	87 ea       	ldi	r24, 0xA7	; 167
 5f8:	91 e6       	ldi	r25, 0x61	; 97
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCD_voidGoTo_XY+0x34>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <LCD_voidGoTo_XY+0x3a>
 600:	00 00       	nop
 602:	08 95       	ret

00000604 <LCD_voidClearDisplay>:
/* Description : Clears the entire LCD display                                           */
/* Return : void                                                                         */
/*****************************************************************************************/
void LCD_voidClearDisplay(void)
{
	LCD_voidSendCommand(CLEAR_DIS);
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60a:	83 ef       	ldi	r24, 0xF3	; 243
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <LCD_voidClearDisplay+0xa>
 612:	00 c0       	rjmp	.+0      	; 0x614 <LCD_voidClearDisplay+0x10>
 614:	00 00       	nop
	_delay_ms(2); 
	LCD_voidSendCommand(RETURN_HOME);  // cursor returns to position 0
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
 61c:	83 ef       	ldi	r24, 0xF3	; 243
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <LCD_voidClearDisplay+0x1c>
 624:	00 c0       	rjmp	.+0      	; 0x626 <LCD_voidClearDisplay+0x22>
 626:	00 00       	nop
 628:	08 95       	ret

0000062a <LCD_voidInit>:
	LCD_voidSendCommand(ENTRY_MODE_INCREASE_NO_SHIFT);
	_delay_ms(1);
	
	#elif defined LCD_4BIT_LOW_NIBBLE
	
	DIO_voidSetNibbleDirection(LCD_DATA_PORT,LOW_NIBBLE,OUTPUT);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_voidSetNibbleDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS_PIN, OUTPUT);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	66 e0       	ldi	r22, 0x06	; 6
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW_PIN, OUTPUT);
 63e:	41 e0       	ldi	r20, 0x01	; 1
 640:	65 e0       	ldi	r22, 0x05	; 5
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, E_PIN, OUTPUT);
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	64 e0       	ldi	r22, 0x04	; 4
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
 652:	8d e2       	ldi	r24, 0x2D	; 45
 654:	92 e2       	ldi	r25, 0x22	; 34
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <LCD_voidInit+0x2c>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_voidInit+0x32>
 65c:	00 00       	nop
	
	_delay_ms(35);

	
	/* Function Set Command */
	LCD_voidSendCommand(0x02);
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
 664:	89 ef       	ldi	r24, 0xF9	; 249
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <LCD_voidInit+0x3e>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <LCD_voidInit+0x44>
 66e:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendCommand(FS_4BIT_2LINES_5x7);
 670:	88 e2       	ldi	r24, 0x28	; 40
 672:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
 676:	89 ef       	ldi	r24, 0xF9	; 249
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <LCD_voidInit+0x50>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <LCD_voidInit+0x56>
 680:	00 00       	nop
	_delay_ms(1);


	/* Display ON, Cursor ON */
	LCD_voidSendCommand(DIS_ON_CURSOR_OFF);
 682:	8c e0       	ldi	r24, 0x0C	; 12
 684:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
 688:	89 ef       	ldi	r24, 0xF9	; 249
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_voidInit+0x62>
 690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_voidInit+0x68>
 692:	00 00       	nop
	_delay_ms(1);

	/* Clear Display and Reset Cursor */
	LCD_voidClearDisplay();  // Clears display & ensures cursor at (0,0)
 694:	0e 94 02 03 	call	0x604	; 0x604 <LCD_voidClearDisplay>
 698:	83 ef       	ldi	r24, 0xF3	; 243
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	f1 f7       	brne	.-4      	; 0x69c <LCD_voidInit+0x72>
 6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <LCD_voidInit+0x78>
 6a2:	00 00       	nop
	_delay_ms(2);

	/* Entry Mode Set */
	LCD_voidSendCommand(ENTRY_MODE_INCREASE_NO_SHIFT);
 6a4:	86 e0       	ldi	r24, 0x06	; 6
 6a6:	0e 94 00 02 	call	0x400	; 0x400 <LCD_voidSendCommand>
 6aa:	89 ef       	ldi	r24, 0xF9	; 249
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCD_voidInit+0x84>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <LCD_voidInit+0x8a>
 6b4:	00 00       	nop
 6b6:	08 95       	ret

000006b8 <main>:
#include "ADC_Interface.h"


int main(void)
{
    LCD_voidInit();
 6b8:	0e 94 15 03 	call	0x62a	; 0x62a <LCD_voidInit>
	ADC_voidInit();
 6bc:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	
	RELAY_voidInit_relay_Pin(PORTC,PIN0);
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 1b 04 	call	0x836	; 0x836 <RELAY_voidInit_relay_Pin>
	RELAY_voidInit_relay_Pin(PORTC,PIN1);
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 1b 04 	call	0x836	; 0x836 <RELAY_voidInit_relay_Pin>
	u16 DigitalValue = 0;
	f32 AnalogValue = 0;
	s16 TempValue = 0;
	
	
	LCD_voidWriteString("Temp = ");
 6d8:	80 e6       	ldi	r24, 0x60	; 96
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidWriteString>
	
	while (1)
	{
		DigitalValue = ADC_u16Read();
 6e0:	0e 94 77 00 	call	0xee	; 0xee <ADC_u16Read>
		AnalogValue  = DigitalValue  * 2.5;	
 6e4:	bc 01       	movw	r22, r24
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 47 05 	call	0xa8e	; 0xa8e <__floatunsisf>
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	40 e2       	ldi	r20, 0x20	; 32
 6f4:	50 e4       	ldi	r21, 0x40	; 64
 6f6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__mulsf3>
 6fa:	6b 01       	movw	r12, r22
 6fc:	7c 01       	movw	r14, r24
		
		if (AnalogValue >= 1000)
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	4a e7       	ldi	r20, 0x7A	; 122
 704:	54 e4       	ldi	r21, 0x44	; 68
 706:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__gesf2>
 70a:	88 23       	and	r24, r24
 70c:	0c f4       	brge	.+2      	; 0x710 <main+0x58>
 70e:	58 c0       	rjmp	.+176    	; 0x7c0 <main+0x108>
		{
			TempValue = (AnalogValue - 1000) / 10 ;
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	4a e7       	ldi	r20, 0x7A	; 122
 716:	54 e4       	ldi	r21, 0x44	; 68
 718:	c7 01       	movw	r24, r14
 71a:	b6 01       	movw	r22, r12
 71c:	0e 94 32 04 	call	0x864	; 0x864 <__subsf3>
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	40 e2       	ldi	r20, 0x20	; 32
 726:	51 e4       	ldi	r21, 0x41	; 65
 728:	0e 94 9f 04 	call	0x93e	; 0x93e <__divsf3>
 72c:	0e 94 11 05 	call	0xa22	; 0xa22 <__fixsfsi>
 730:	6b 01       	movw	r12, r22
 732:	7c 01       	movw	r14, r24
 734:	eb 01       	movw	r28, r22
	
			LCD_voidGoTo_XY(LINE_1,7);
 736:	67 e0       	ldi	r22, 0x07	; 7
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_voidGoTo_XY>
			LCD_voidWriteNumber(TempValue);
 73e:	b6 01       	movw	r22, r12
 740:	dd 0c       	add	r13, r13
 742:	88 0b       	sbc	r24, r24
 744:	99 0b       	sbc	r25, r25
 746:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_voidWriteNumber>
			LCD_voidWriteChar(0xDF);	
 74a:	8f ed       	ldi	r24, 0xDF	; 223
 74c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
			
			if (TempValue > 20)
 750:	c5 31       	cpi	r28, 0x15	; 21
 752:	d1 05       	cpc	r29, r1
 754:	8c f0       	brlt	.+34     	; 0x778 <main+0xc0>
			{
				RELAY_voidStatus_relay_Pin(PORTC,PIN1,ON);
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	61 e0       	ldi	r22, 0x01	; 1
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
				RELAY_voidStatus_relay_Pin(PORTC,PIN0,OFF);
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
 776:	b4 cf       	rjmp	.-152    	; 0x6e0 <main+0x28>
				
			}
			else if (TempValue < 10)
 778:	2a 97       	sbiw	r28, 0x0a	; 10
 77a:	8c f4       	brge	.+34     	; 0x79e <main+0xe6>
			{
				RELAY_voidStatus_relay_Pin(PORTC,PIN0,ON);
 77c:	41 e0       	ldi	r20, 0x01	; 1
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
				RELAY_voidStatus_relay_Pin(PORTC,PIN1,OFF);
 78c:	40 e0       	ldi	r20, 0x00	; 0
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	61 e0       	ldi	r22, 0x01	; 1
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
 79c:	a1 cf       	rjmp	.-190    	; 0x6e0 <main+0x28>
			}
			else{
				RELAY_voidStatus_relay_Pin(PORTC,PIN0,OFF);
 79e:	40 e0       	ldi	r20, 0x00	; 0
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	82 e0       	ldi	r24, 0x02	; 2
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
				RELAY_voidStatus_relay_Pin(PORTC,PIN1,OFF);
 7ae:	40 e0       	ldi	r20, 0x00	; 0
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	61 e0       	ldi	r22, 0x01	; 1
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
 7be:	90 cf       	rjmp	.-224    	; 0x6e0 <main+0x28>
			}
		} 
		else
		{
			TempValue = (1000 - AnalogValue) / 10 ;
 7c0:	a7 01       	movw	r20, r14
 7c2:	96 01       	movw	r18, r12
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	8a e7       	ldi	r24, 0x7A	; 122
 7ca:	94 e4       	ldi	r25, 0x44	; 68
 7cc:	0e 94 32 04 	call	0x864	; 0x864 <__subsf3>
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	40 e2       	ldi	r20, 0x20	; 32
 7d6:	51 e4       	ldi	r21, 0x41	; 65
 7d8:	0e 94 9f 04 	call	0x93e	; 0x93e <__divsf3>
 7dc:	0e 94 11 05 	call	0xa22	; 0xa22 <__fixsfsi>
 7e0:	6b 01       	movw	r12, r22
 7e2:	7c 01       	movw	r14, r24
 7e4:	eb 01       	movw	r28, r22
			
			LCD_voidGoTo_XY(LINE_1,7);
 7e6:	67 e0       	ldi	r22, 0x07	; 7
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_voidGoTo_XY>
			LCD_voidWriteChar('-');
 7ee:	8d e2       	ldi	r24, 0x2D	; 45
 7f0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
			LCD_voidGoTo_XY(LINE_1,8);
 7f4:	68 e0       	ldi	r22, 0x08	; 8
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_voidGoTo_XY>
			LCD_voidWriteNumber(TempValue);
 7fc:	b6 01       	movw	r22, r12
 7fe:	dd 0c       	add	r13, r13
 800:	88 0b       	sbc	r24, r24
 802:	99 0b       	sbc	r25, r25
 804:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_voidWriteNumber>
			LCD_voidWriteChar(0xDF);
 808:	8f ed       	ldi	r24, 0xDF	; 223
 80a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_voidWriteChar>
			
			if (TempValue >= 0)
 80e:	dd 23       	and	r29, r29
 810:	4c f0       	brlt	.+18     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			{
				RELAY_voidStatus_relay_Pin(PORTC,PIN0,ON);
 812:	41 e0       	ldi	r20, 0x01	; 1
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	82 e0       	ldi	r24, 0x02	; 2
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
 822:	5e cf       	rjmp	.-324    	; 0x6e0 <main+0x28>
			}
			else{
				RELAY_voidStatus_relay_Pin(PORTC,PIN0,OFF);
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	82 e0       	ldi	r24, 0x02	; 2
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 23 04 	call	0x846	; 0x846 <RELAY_voidStatus_relay_Pin>
 834:	55 cf       	rjmp	.-342    	; 0x6e0 <main+0x28>

00000836 <RELAY_voidInit_relay_Pin>:


void RELAY_voidInit_relay_Pin( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
	/* i/p validation */
	if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
 836:	84 30       	cpi	r24, 0x04	; 4
 838:	28 f4       	brcc	.+10     	; 0x844 <RELAY_voidInit_relay_Pin+0xe>
 83a:	68 30       	cpi	r22, 0x08	; 8
 83c:	18 f4       	brcc	.+6      	; 0x844 <RELAY_voidInit_relay_Pin+0xe>
	{
		// Do Nothing
	}
	else
	{
		DIO_voidSetPinDirection (Copy_u8PortNumber,Copy_u8PinNumber,OUTPUT);
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	0e 94 8d 00 	call	0x11a	; 0x11a <DIO_voidSetPinDirection>
 844:	08 95       	ret

00000846 <RELAY_voidStatus_relay_Pin>:
}

void RELAY_voidStatus_relay_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Status )
{
	/* i/p validation */
	if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
 846:	84 30       	cpi	r24, 0x04	; 4
 848:	60 f4       	brcc	.+24     	; 0x862 <__stack+0x3>
 84a:	68 30       	cpi	r22, 0x08	; 8
 84c:	50 f4       	brcc	.+20     	; 0x862 <__stack+0x3>
	{
		// Do Nothing
	}
	else
	{
		switch(Copy_u8Status)
 84e:	44 23       	and	r20, r20
 850:	29 f0       	breq	.+10     	; 0x85c <RELAY_voidStatus_relay_Pin+0x16>
 852:	41 30       	cpi	r20, 0x01	; 1
 854:	31 f4       	brne	.+12     	; 0x862 <__stack+0x3>
		{
			case ON  :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, HIGH );     break;
 856:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 85a:	08 95       	ret
			case OFF :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, LOW  );     break;
 85c:	40 e0       	ldi	r20, 0x00	; 0
 85e:	0e 94 04 01 	call	0x208	; 0x208 <DIO_voidSetPinValue>
 862:	08 95       	ret

00000864 <__subsf3>:
 864:	50 58       	subi	r21, 0x80	; 128

00000866 <__addsf3>:
 866:	bb 27       	eor	r27, r27
 868:	aa 27       	eor	r26, r26
 86a:	0e 94 4a 04 	call	0x894	; 0x894 <__addsf3x>
 86e:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__fp_round>
 872:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscA>
 876:	38 f0       	brcs	.+14     	; 0x886 <__addsf3+0x20>
 878:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscB>
 87c:	20 f0       	brcs	.+8      	; 0x886 <__addsf3+0x20>
 87e:	39 f4       	brne	.+14     	; 0x88e <__addsf3+0x28>
 880:	9f 3f       	cpi	r25, 0xFF	; 255
 882:	19 f4       	brne	.+6      	; 0x88a <__addsf3+0x24>
 884:	26 f4       	brtc	.+8      	; 0x88e <__addsf3+0x28>
 886:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_nan>
 88a:	0e f4       	brtc	.+2      	; 0x88e <__addsf3+0x28>
 88c:	e0 95       	com	r30
 88e:	e7 fb       	bst	r30, 7
 890:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>

00000894 <__addsf3x>:
 894:	e9 2f       	mov	r30, r25
 896:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_split3>
 89a:	58 f3       	brcs	.-42     	; 0x872 <__addsf3+0xc>
 89c:	ba 17       	cp	r27, r26
 89e:	62 07       	cpc	r22, r18
 8a0:	73 07       	cpc	r23, r19
 8a2:	84 07       	cpc	r24, r20
 8a4:	95 07       	cpc	r25, r21
 8a6:	20 f0       	brcs	.+8      	; 0x8b0 <__addsf3x+0x1c>
 8a8:	79 f4       	brne	.+30     	; 0x8c8 <__addsf3x+0x34>
 8aa:	a6 f5       	brtc	.+104    	; 0x914 <__addsf3x+0x80>
 8ac:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_zero>
 8b0:	0e f4       	brtc	.+2      	; 0x8b4 <__addsf3x+0x20>
 8b2:	e0 95       	com	r30
 8b4:	0b 2e       	mov	r0, r27
 8b6:	ba 2f       	mov	r27, r26
 8b8:	a0 2d       	mov	r26, r0
 8ba:	0b 01       	movw	r0, r22
 8bc:	b9 01       	movw	r22, r18
 8be:	90 01       	movw	r18, r0
 8c0:	0c 01       	movw	r0, r24
 8c2:	ca 01       	movw	r24, r20
 8c4:	a0 01       	movw	r20, r0
 8c6:	11 24       	eor	r1, r1
 8c8:	ff 27       	eor	r31, r31
 8ca:	59 1b       	sub	r21, r25
 8cc:	99 f0       	breq	.+38     	; 0x8f4 <__addsf3x+0x60>
 8ce:	59 3f       	cpi	r21, 0xF9	; 249
 8d0:	50 f4       	brcc	.+20     	; 0x8e6 <__addsf3x+0x52>
 8d2:	50 3e       	cpi	r21, 0xE0	; 224
 8d4:	68 f1       	brcs	.+90     	; 0x930 <__addsf3x+0x9c>
 8d6:	1a 16       	cp	r1, r26
 8d8:	f0 40       	sbci	r31, 0x00	; 0
 8da:	a2 2f       	mov	r26, r18
 8dc:	23 2f       	mov	r18, r19
 8de:	34 2f       	mov	r19, r20
 8e0:	44 27       	eor	r20, r20
 8e2:	58 5f       	subi	r21, 0xF8	; 248
 8e4:	f3 cf       	rjmp	.-26     	; 0x8cc <__addsf3x+0x38>
 8e6:	46 95       	lsr	r20
 8e8:	37 95       	ror	r19
 8ea:	27 95       	ror	r18
 8ec:	a7 95       	ror	r26
 8ee:	f0 40       	sbci	r31, 0x00	; 0
 8f0:	53 95       	inc	r21
 8f2:	c9 f7       	brne	.-14     	; 0x8e6 <__addsf3x+0x52>
 8f4:	7e f4       	brtc	.+30     	; 0x914 <__addsf3x+0x80>
 8f6:	1f 16       	cp	r1, r31
 8f8:	ba 0b       	sbc	r27, r26
 8fa:	62 0b       	sbc	r22, r18
 8fc:	73 0b       	sbc	r23, r19
 8fe:	84 0b       	sbc	r24, r20
 900:	ba f0       	brmi	.+46     	; 0x930 <__addsf3x+0x9c>
 902:	91 50       	subi	r25, 0x01	; 1
 904:	a1 f0       	breq	.+40     	; 0x92e <__addsf3x+0x9a>
 906:	ff 0f       	add	r31, r31
 908:	bb 1f       	adc	r27, r27
 90a:	66 1f       	adc	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	c2 f7       	brpl	.-16     	; 0x902 <__addsf3x+0x6e>
 912:	0e c0       	rjmp	.+28     	; 0x930 <__addsf3x+0x9c>
 914:	ba 0f       	add	r27, r26
 916:	62 1f       	adc	r22, r18
 918:	73 1f       	adc	r23, r19
 91a:	84 1f       	adc	r24, r20
 91c:	48 f4       	brcc	.+18     	; 0x930 <__addsf3x+0x9c>
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	f7 95       	ror	r31
 928:	9e 3f       	cpi	r25, 0xFE	; 254
 92a:	08 f0       	brcs	.+2      	; 0x92e <__addsf3x+0x9a>
 92c:	b0 cf       	rjmp	.-160    	; 0x88e <__addsf3+0x28>
 92e:	93 95       	inc	r25
 930:	88 0f       	add	r24, r24
 932:	08 f0       	brcs	.+2      	; 0x936 <__addsf3x+0xa2>
 934:	99 27       	eor	r25, r25
 936:	ee 0f       	add	r30, r30
 938:	97 95       	ror	r25
 93a:	87 95       	ror	r24
 93c:	08 95       	ret

0000093e <__divsf3>:
 93e:	0e 94 b3 04 	call	0x966	; 0x966 <__divsf3x>
 942:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__fp_round>
 946:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscB>
 94a:	58 f0       	brcs	.+22     	; 0x962 <__divsf3+0x24>
 94c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscA>
 950:	40 f0       	brcs	.+16     	; 0x962 <__divsf3+0x24>
 952:	29 f4       	brne	.+10     	; 0x95e <__divsf3+0x20>
 954:	5f 3f       	cpi	r21, 0xFF	; 255
 956:	29 f0       	breq	.+10     	; 0x962 <__divsf3+0x24>
 958:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 95c:	51 11       	cpse	r21, r1
 95e:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 962:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_nan>

00000966 <__divsf3x>:
 966:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_split3>
 96a:	68 f3       	brcs	.-38     	; 0x946 <__divsf3+0x8>

0000096c <__divsf3_pse>:
 96c:	99 23       	and	r25, r25
 96e:	b1 f3       	breq	.-20     	; 0x95c <__divsf3+0x1e>
 970:	55 23       	and	r21, r21
 972:	91 f3       	breq	.-28     	; 0x958 <__divsf3+0x1a>
 974:	95 1b       	sub	r25, r21
 976:	55 0b       	sbc	r21, r21
 978:	bb 27       	eor	r27, r27
 97a:	aa 27       	eor	r26, r26
 97c:	62 17       	cp	r22, r18
 97e:	73 07       	cpc	r23, r19
 980:	84 07       	cpc	r24, r20
 982:	38 f0       	brcs	.+14     	; 0x992 <__divsf3_pse+0x26>
 984:	9f 5f       	subi	r25, 0xFF	; 255
 986:	5f 4f       	sbci	r21, 0xFF	; 255
 988:	22 0f       	add	r18, r18
 98a:	33 1f       	adc	r19, r19
 98c:	44 1f       	adc	r20, r20
 98e:	aa 1f       	adc	r26, r26
 990:	a9 f3       	breq	.-22     	; 0x97c <__divsf3_pse+0x10>
 992:	35 d0       	rcall	.+106    	; 0x9fe <__divsf3_pse+0x92>
 994:	0e 2e       	mov	r0, r30
 996:	3a f0       	brmi	.+14     	; 0x9a6 <__divsf3_pse+0x3a>
 998:	e0 e8       	ldi	r30, 0x80	; 128
 99a:	32 d0       	rcall	.+100    	; 0xa00 <__divsf3_pse+0x94>
 99c:	91 50       	subi	r25, 0x01	; 1
 99e:	50 40       	sbci	r21, 0x00	; 0
 9a0:	e6 95       	lsr	r30
 9a2:	00 1c       	adc	r0, r0
 9a4:	ca f7       	brpl	.-14     	; 0x998 <__divsf3_pse+0x2c>
 9a6:	2b d0       	rcall	.+86     	; 0x9fe <__divsf3_pse+0x92>
 9a8:	fe 2f       	mov	r31, r30
 9aa:	29 d0       	rcall	.+82     	; 0x9fe <__divsf3_pse+0x92>
 9ac:	66 0f       	add	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	bb 1f       	adc	r27, r27
 9b4:	26 17       	cp	r18, r22
 9b6:	37 07       	cpc	r19, r23
 9b8:	48 07       	cpc	r20, r24
 9ba:	ab 07       	cpc	r26, r27
 9bc:	b0 e8       	ldi	r27, 0x80	; 128
 9be:	09 f0       	breq	.+2      	; 0x9c2 <__divsf3_pse+0x56>
 9c0:	bb 0b       	sbc	r27, r27
 9c2:	80 2d       	mov	r24, r0
 9c4:	bf 01       	movw	r22, r30
 9c6:	ff 27       	eor	r31, r31
 9c8:	93 58       	subi	r25, 0x83	; 131
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	3a f0       	brmi	.+14     	; 0x9dc <__divsf3_pse+0x70>
 9ce:	9e 3f       	cpi	r25, 0xFE	; 254
 9d0:	51 05       	cpc	r21, r1
 9d2:	78 f0       	brcs	.+30     	; 0x9f2 <__divsf3_pse+0x86>
 9d4:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 9d8:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	e4 f3       	brlt	.-8      	; 0x9d8 <__divsf3_pse+0x6c>
 9e0:	98 3e       	cpi	r25, 0xE8	; 232
 9e2:	d4 f3       	brlt	.-12     	; 0x9d8 <__divsf3_pse+0x6c>
 9e4:	86 95       	lsr	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f7 95       	ror	r31
 9ee:	9f 5f       	subi	r25, 0xFF	; 255
 9f0:	c9 f7       	brne	.-14     	; 0x9e4 <__divsf3_pse+0x78>
 9f2:	88 0f       	add	r24, r24
 9f4:	91 1d       	adc	r25, r1
 9f6:	96 95       	lsr	r25
 9f8:	87 95       	ror	r24
 9fa:	97 f9       	bld	r25, 7
 9fc:	08 95       	ret
 9fe:	e1 e0       	ldi	r30, 0x01	; 1
 a00:	66 0f       	add	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	bb 1f       	adc	r27, r27
 a08:	62 17       	cp	r22, r18
 a0a:	73 07       	cpc	r23, r19
 a0c:	84 07       	cpc	r24, r20
 a0e:	ba 07       	cpc	r27, r26
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__divsf3_pse+0xae>
 a12:	62 1b       	sub	r22, r18
 a14:	73 0b       	sbc	r23, r19
 a16:	84 0b       	sbc	r24, r20
 a18:	ba 0b       	sbc	r27, r26
 a1a:	ee 1f       	adc	r30, r30
 a1c:	88 f7       	brcc	.-30     	; 0xa00 <__divsf3_pse+0x94>
 a1e:	e0 95       	com	r30
 a20:	08 95       	ret

00000a22 <__fixsfsi>:
 a22:	0e 94 18 05 	call	0xa30	; 0xa30 <__fixunssfsi>
 a26:	68 94       	set
 a28:	b1 11       	cpse	r27, r1
 a2a:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 a2e:	08 95       	ret

00000a30 <__fixunssfsi>:
 a30:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_splitA>
 a34:	88 f0       	brcs	.+34     	; 0xa58 <__fixunssfsi+0x28>
 a36:	9f 57       	subi	r25, 0x7F	; 127
 a38:	98 f0       	brcs	.+38     	; 0xa60 <__fixunssfsi+0x30>
 a3a:	b9 2f       	mov	r27, r25
 a3c:	99 27       	eor	r25, r25
 a3e:	b7 51       	subi	r27, 0x17	; 23
 a40:	b0 f0       	brcs	.+44     	; 0xa6e <__fixunssfsi+0x3e>
 a42:	e1 f0       	breq	.+56     	; 0xa7c <__fixunssfsi+0x4c>
 a44:	66 0f       	add	r22, r22
 a46:	77 1f       	adc	r23, r23
 a48:	88 1f       	adc	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	1a f0       	brmi	.+6      	; 0xa54 <__fixunssfsi+0x24>
 a4e:	ba 95       	dec	r27
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__fixunssfsi+0x14>
 a52:	14 c0       	rjmp	.+40     	; 0xa7c <__fixunssfsi+0x4c>
 a54:	b1 30       	cpi	r27, 0x01	; 1
 a56:	91 f0       	breq	.+36     	; 0xa7c <__fixunssfsi+0x4c>
 a58:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__fp_zero>
 a5c:	b1 e0       	ldi	r27, 0x01	; 1
 a5e:	08 95       	ret
 a60:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__fp_zero>
 a64:	67 2f       	mov	r22, r23
 a66:	78 2f       	mov	r23, r24
 a68:	88 27       	eor	r24, r24
 a6a:	b8 5f       	subi	r27, 0xF8	; 248
 a6c:	39 f0       	breq	.+14     	; 0xa7c <__fixunssfsi+0x4c>
 a6e:	b9 3f       	cpi	r27, 0xF9	; 249
 a70:	cc f3       	brlt	.-14     	; 0xa64 <__fixunssfsi+0x34>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b3 95       	inc	r27
 a7a:	d9 f7       	brne	.-10     	; 0xa72 <__fixunssfsi+0x42>
 a7c:	3e f4       	brtc	.+14     	; 0xa8c <__fixunssfsi+0x5c>
 a7e:	90 95       	com	r25
 a80:	80 95       	com	r24
 a82:	70 95       	com	r23
 a84:	61 95       	neg	r22
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	08 95       	ret

00000a8e <__floatunsisf>:
 a8e:	e8 94       	clt
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__floatsisf+0x12>

00000a92 <__floatsisf>:
 a92:	97 fb       	bst	r25, 7
 a94:	3e f4       	brtc	.+14     	; 0xaa4 <__floatsisf+0x12>
 a96:	90 95       	com	r25
 a98:	80 95       	com	r24
 a9a:	70 95       	com	r23
 a9c:	61 95       	neg	r22
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	99 23       	and	r25, r25
 aa6:	a9 f0       	breq	.+42     	; 0xad2 <__floatsisf+0x40>
 aa8:	f9 2f       	mov	r31, r25
 aaa:	96 e9       	ldi	r25, 0x96	; 150
 aac:	bb 27       	eor	r27, r27
 aae:	93 95       	inc	r25
 ab0:	f6 95       	lsr	r31
 ab2:	87 95       	ror	r24
 ab4:	77 95       	ror	r23
 ab6:	67 95       	ror	r22
 ab8:	b7 95       	ror	r27
 aba:	f1 11       	cpse	r31, r1
 abc:	f8 cf       	rjmp	.-16     	; 0xaae <__floatsisf+0x1c>
 abe:	fa f4       	brpl	.+62     	; 0xafe <__floatsisf+0x6c>
 ac0:	bb 0f       	add	r27, r27
 ac2:	11 f4       	brne	.+4      	; 0xac8 <__floatsisf+0x36>
 ac4:	60 ff       	sbrs	r22, 0
 ac6:	1b c0       	rjmp	.+54     	; 0xafe <__floatsisf+0x6c>
 ac8:	6f 5f       	subi	r22, 0xFF	; 255
 aca:	7f 4f       	sbci	r23, 0xFF	; 255
 acc:	8f 4f       	sbci	r24, 0xFF	; 255
 ace:	9f 4f       	sbci	r25, 0xFF	; 255
 ad0:	16 c0       	rjmp	.+44     	; 0xafe <__floatsisf+0x6c>
 ad2:	88 23       	and	r24, r24
 ad4:	11 f0       	breq	.+4      	; 0xada <__floatsisf+0x48>
 ad6:	96 e9       	ldi	r25, 0x96	; 150
 ad8:	11 c0       	rjmp	.+34     	; 0xafc <__floatsisf+0x6a>
 ada:	77 23       	and	r23, r23
 adc:	21 f0       	breq	.+8      	; 0xae6 <__floatsisf+0x54>
 ade:	9e e8       	ldi	r25, 0x8E	; 142
 ae0:	87 2f       	mov	r24, r23
 ae2:	76 2f       	mov	r23, r22
 ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__floatsisf+0x5e>
 ae6:	66 23       	and	r22, r22
 ae8:	71 f0       	breq	.+28     	; 0xb06 <__floatsisf+0x74>
 aea:	96 e8       	ldi	r25, 0x86	; 134
 aec:	86 2f       	mov	r24, r22
 aee:	70 e0       	ldi	r23, 0x00	; 0
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	2a f0       	brmi	.+10     	; 0xafe <__floatsisf+0x6c>
 af4:	9a 95       	dec	r25
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	88 1f       	adc	r24, r24
 afc:	da f7       	brpl	.-10     	; 0xaf4 <__floatsisf+0x62>
 afe:	88 0f       	add	r24, r24
 b00:	96 95       	lsr	r25
 b02:	87 95       	ror	r24
 b04:	97 f9       	bld	r25, 7
 b06:	08 95       	ret

00000b08 <__fp_inf>:
 b08:	97 f9       	bld	r25, 7
 b0a:	9f 67       	ori	r25, 0x7F	; 127
 b0c:	80 e8       	ldi	r24, 0x80	; 128
 b0e:	70 e0       	ldi	r23, 0x00	; 0
 b10:	60 e0       	ldi	r22, 0x00	; 0
 b12:	08 95       	ret

00000b14 <__fp_nan>:
 b14:	9f ef       	ldi	r25, 0xFF	; 255
 b16:	80 ec       	ldi	r24, 0xC0	; 192
 b18:	08 95       	ret

00000b1a <__fp_pscA>:
 b1a:	00 24       	eor	r0, r0
 b1c:	0a 94       	dec	r0
 b1e:	16 16       	cp	r1, r22
 b20:	17 06       	cpc	r1, r23
 b22:	18 06       	cpc	r1, r24
 b24:	09 06       	cpc	r0, r25
 b26:	08 95       	ret

00000b28 <__fp_pscB>:
 b28:	00 24       	eor	r0, r0
 b2a:	0a 94       	dec	r0
 b2c:	12 16       	cp	r1, r18
 b2e:	13 06       	cpc	r1, r19
 b30:	14 06       	cpc	r1, r20
 b32:	05 06       	cpc	r0, r21
 b34:	08 95       	ret

00000b36 <__fp_round>:
 b36:	09 2e       	mov	r0, r25
 b38:	03 94       	inc	r0
 b3a:	00 0c       	add	r0, r0
 b3c:	11 f4       	brne	.+4      	; 0xb42 <__fp_round+0xc>
 b3e:	88 23       	and	r24, r24
 b40:	52 f0       	brmi	.+20     	; 0xb56 <__fp_round+0x20>
 b42:	bb 0f       	add	r27, r27
 b44:	40 f4       	brcc	.+16     	; 0xb56 <__fp_round+0x20>
 b46:	bf 2b       	or	r27, r31
 b48:	11 f4       	brne	.+4      	; 0xb4e <__fp_round+0x18>
 b4a:	60 ff       	sbrs	r22, 0
 b4c:	04 c0       	rjmp	.+8      	; 0xb56 <__fp_round+0x20>
 b4e:	6f 5f       	subi	r22, 0xFF	; 255
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__fp_split3>:
 b58:	57 fd       	sbrc	r21, 7
 b5a:	90 58       	subi	r25, 0x80	; 128
 b5c:	44 0f       	add	r20, r20
 b5e:	55 1f       	adc	r21, r21
 b60:	59 f0       	breq	.+22     	; 0xb78 <__fp_splitA+0x10>
 b62:	5f 3f       	cpi	r21, 0xFF	; 255
 b64:	71 f0       	breq	.+28     	; 0xb82 <__fp_splitA+0x1a>
 b66:	47 95       	ror	r20

00000b68 <__fp_splitA>:
 b68:	88 0f       	add	r24, r24
 b6a:	97 fb       	bst	r25, 7
 b6c:	99 1f       	adc	r25, r25
 b6e:	61 f0       	breq	.+24     	; 0xb88 <__fp_splitA+0x20>
 b70:	9f 3f       	cpi	r25, 0xFF	; 255
 b72:	79 f0       	breq	.+30     	; 0xb92 <__fp_splitA+0x2a>
 b74:	87 95       	ror	r24
 b76:	08 95       	ret
 b78:	12 16       	cp	r1, r18
 b7a:	13 06       	cpc	r1, r19
 b7c:	14 06       	cpc	r1, r20
 b7e:	55 1f       	adc	r21, r21
 b80:	f2 cf       	rjmp	.-28     	; 0xb66 <__fp_split3+0xe>
 b82:	46 95       	lsr	r20
 b84:	f1 df       	rcall	.-30     	; 0xb68 <__fp_splitA>
 b86:	08 c0       	rjmp	.+16     	; 0xb98 <__fp_splitA+0x30>
 b88:	16 16       	cp	r1, r22
 b8a:	17 06       	cpc	r1, r23
 b8c:	18 06       	cpc	r1, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	f1 cf       	rjmp	.-30     	; 0xb74 <__fp_splitA+0xc>
 b92:	86 95       	lsr	r24
 b94:	71 05       	cpc	r23, r1
 b96:	61 05       	cpc	r22, r1
 b98:	08 94       	sec
 b9a:	08 95       	ret

00000b9c <__fp_zero>:
 b9c:	e8 94       	clt

00000b9e <__fp_szero>:
 b9e:	bb 27       	eor	r27, r27
 ba0:	66 27       	eor	r22, r22
 ba2:	77 27       	eor	r23, r23
 ba4:	cb 01       	movw	r24, r22
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret

00000baa <__gesf2>:
 baa:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_cmp>
 bae:	08 f4       	brcc	.+2      	; 0xbb2 <__gesf2+0x8>
 bb0:	8f ef       	ldi	r24, 0xFF	; 255
 bb2:	08 95       	ret

00000bb4 <__mulsf3>:
 bb4:	0e 94 ed 05 	call	0xbda	; 0xbda <__mulsf3x>
 bb8:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__fp_round>
 bbc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_pscA>
 bc0:	38 f0       	brcs	.+14     	; 0xbd0 <__mulsf3+0x1c>
 bc2:	0e 94 94 05 	call	0xb28	; 0xb28 <__fp_pscB>
 bc6:	20 f0       	brcs	.+8      	; 0xbd0 <__mulsf3+0x1c>
 bc8:	95 23       	and	r25, r21
 bca:	11 f0       	breq	.+4      	; 0xbd0 <__mulsf3+0x1c>
 bcc:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 bd0:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__fp_nan>
 bd4:	11 24       	eor	r1, r1
 bd6:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>

00000bda <__mulsf3x>:
 bda:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_split3>
 bde:	70 f3       	brcs	.-36     	; 0xbbc <__mulsf3+0x8>

00000be0 <__mulsf3_pse>:
 be0:	95 9f       	mul	r25, r21
 be2:	c1 f3       	breq	.-16     	; 0xbd4 <__mulsf3+0x20>
 be4:	95 0f       	add	r25, r21
 be6:	50 e0       	ldi	r21, 0x00	; 0
 be8:	55 1f       	adc	r21, r21
 bea:	62 9f       	mul	r22, r18
 bec:	f0 01       	movw	r30, r0
 bee:	72 9f       	mul	r23, r18
 bf0:	bb 27       	eor	r27, r27
 bf2:	f0 0d       	add	r31, r0
 bf4:	b1 1d       	adc	r27, r1
 bf6:	63 9f       	mul	r22, r19
 bf8:	aa 27       	eor	r26, r26
 bfa:	f0 0d       	add	r31, r0
 bfc:	b1 1d       	adc	r27, r1
 bfe:	aa 1f       	adc	r26, r26
 c00:	64 9f       	mul	r22, r20
 c02:	66 27       	eor	r22, r22
 c04:	b0 0d       	add	r27, r0
 c06:	a1 1d       	adc	r26, r1
 c08:	66 1f       	adc	r22, r22
 c0a:	82 9f       	mul	r24, r18
 c0c:	22 27       	eor	r18, r18
 c0e:	b0 0d       	add	r27, r0
 c10:	a1 1d       	adc	r26, r1
 c12:	62 1f       	adc	r22, r18
 c14:	73 9f       	mul	r23, r19
 c16:	b0 0d       	add	r27, r0
 c18:	a1 1d       	adc	r26, r1
 c1a:	62 1f       	adc	r22, r18
 c1c:	83 9f       	mul	r24, r19
 c1e:	a0 0d       	add	r26, r0
 c20:	61 1d       	adc	r22, r1
 c22:	22 1f       	adc	r18, r18
 c24:	74 9f       	mul	r23, r20
 c26:	33 27       	eor	r19, r19
 c28:	a0 0d       	add	r26, r0
 c2a:	61 1d       	adc	r22, r1
 c2c:	23 1f       	adc	r18, r19
 c2e:	84 9f       	mul	r24, r20
 c30:	60 0d       	add	r22, r0
 c32:	21 1d       	adc	r18, r1
 c34:	82 2f       	mov	r24, r18
 c36:	76 2f       	mov	r23, r22
 c38:	6a 2f       	mov	r22, r26
 c3a:	11 24       	eor	r1, r1
 c3c:	9f 57       	subi	r25, 0x7F	; 127
 c3e:	50 40       	sbci	r21, 0x00	; 0
 c40:	9a f0       	brmi	.+38     	; 0xc68 <__mulsf3_pse+0x88>
 c42:	f1 f0       	breq	.+60     	; 0xc80 <__mulsf3_pse+0xa0>
 c44:	88 23       	and	r24, r24
 c46:	4a f0       	brmi	.+18     	; 0xc5a <__mulsf3_pse+0x7a>
 c48:	ee 0f       	add	r30, r30
 c4a:	ff 1f       	adc	r31, r31
 c4c:	bb 1f       	adc	r27, r27
 c4e:	66 1f       	adc	r22, r22
 c50:	77 1f       	adc	r23, r23
 c52:	88 1f       	adc	r24, r24
 c54:	91 50       	subi	r25, 0x01	; 1
 c56:	50 40       	sbci	r21, 0x00	; 0
 c58:	a9 f7       	brne	.-22     	; 0xc44 <__mulsf3_pse+0x64>
 c5a:	9e 3f       	cpi	r25, 0xFE	; 254
 c5c:	51 05       	cpc	r21, r1
 c5e:	80 f0       	brcs	.+32     	; 0xc80 <__mulsf3_pse+0xa0>
 c60:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_inf>
 c64:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__fp_szero>
 c68:	5f 3f       	cpi	r21, 0xFF	; 255
 c6a:	e4 f3       	brlt	.-8      	; 0xc64 <__mulsf3_pse+0x84>
 c6c:	98 3e       	cpi	r25, 0xE8	; 232
 c6e:	d4 f3       	brlt	.-12     	; 0xc64 <__mulsf3_pse+0x84>
 c70:	86 95       	lsr	r24
 c72:	77 95       	ror	r23
 c74:	67 95       	ror	r22
 c76:	b7 95       	ror	r27
 c78:	f7 95       	ror	r31
 c7a:	e7 95       	ror	r30
 c7c:	9f 5f       	subi	r25, 0xFF	; 255
 c7e:	c1 f7       	brne	.-16     	; 0xc70 <__mulsf3_pse+0x90>
 c80:	fe 2b       	or	r31, r30
 c82:	88 0f       	add	r24, r24
 c84:	91 1d       	adc	r25, r1
 c86:	96 95       	lsr	r25
 c88:	87 95       	ror	r24
 c8a:	97 f9       	bld	r25, 7
 c8c:	08 95       	ret

00000c8e <__fp_cmp>:
 c8e:	99 0f       	add	r25, r25
 c90:	00 08       	sbc	r0, r0
 c92:	55 0f       	add	r21, r21
 c94:	aa 0b       	sbc	r26, r26
 c96:	e0 e8       	ldi	r30, 0x80	; 128
 c98:	fe ef       	ldi	r31, 0xFE	; 254
 c9a:	16 16       	cp	r1, r22
 c9c:	17 06       	cpc	r1, r23
 c9e:	e8 07       	cpc	r30, r24
 ca0:	f9 07       	cpc	r31, r25
 ca2:	c0 f0       	brcs	.+48     	; 0xcd4 <__fp_cmp+0x46>
 ca4:	12 16       	cp	r1, r18
 ca6:	13 06       	cpc	r1, r19
 ca8:	e4 07       	cpc	r30, r20
 caa:	f5 07       	cpc	r31, r21
 cac:	98 f0       	brcs	.+38     	; 0xcd4 <__fp_cmp+0x46>
 cae:	62 1b       	sub	r22, r18
 cb0:	73 0b       	sbc	r23, r19
 cb2:	84 0b       	sbc	r24, r20
 cb4:	95 0b       	sbc	r25, r21
 cb6:	39 f4       	brne	.+14     	; 0xcc6 <__fp_cmp+0x38>
 cb8:	0a 26       	eor	r0, r26
 cba:	61 f0       	breq	.+24     	; 0xcd4 <__fp_cmp+0x46>
 cbc:	23 2b       	or	r18, r19
 cbe:	24 2b       	or	r18, r20
 cc0:	25 2b       	or	r18, r21
 cc2:	21 f4       	brne	.+8      	; 0xccc <__fp_cmp+0x3e>
 cc4:	08 95       	ret
 cc6:	0a 26       	eor	r0, r26
 cc8:	09 f4       	brne	.+2      	; 0xccc <__fp_cmp+0x3e>
 cca:	a1 40       	sbci	r26, 0x01	; 1
 ccc:	a6 95       	lsr	r26
 cce:	8f ef       	ldi	r24, 0xFF	; 255
 cd0:	81 1d       	adc	r24, r1
 cd2:	81 1d       	adc	r24, r1
 cd4:	08 95       	ret

00000cd6 <__udivmodsi4>:
 cd6:	a1 e2       	ldi	r26, 0x21	; 33
 cd8:	1a 2e       	mov	r1, r26
 cda:	aa 1b       	sub	r26, r26
 cdc:	bb 1b       	sub	r27, r27
 cde:	fd 01       	movw	r30, r26
 ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__udivmodsi4_ep>

00000ce2 <__udivmodsi4_loop>:
 ce2:	aa 1f       	adc	r26, r26
 ce4:	bb 1f       	adc	r27, r27
 ce6:	ee 1f       	adc	r30, r30
 ce8:	ff 1f       	adc	r31, r31
 cea:	a2 17       	cp	r26, r18
 cec:	b3 07       	cpc	r27, r19
 cee:	e4 07       	cpc	r30, r20
 cf0:	f5 07       	cpc	r31, r21
 cf2:	20 f0       	brcs	.+8      	; 0xcfc <__udivmodsi4_ep>
 cf4:	a2 1b       	sub	r26, r18
 cf6:	b3 0b       	sbc	r27, r19
 cf8:	e4 0b       	sbc	r30, r20
 cfa:	f5 0b       	sbc	r31, r21

00000cfc <__udivmodsi4_ep>:
 cfc:	66 1f       	adc	r22, r22
 cfe:	77 1f       	adc	r23, r23
 d00:	88 1f       	adc	r24, r24
 d02:	99 1f       	adc	r25, r25
 d04:	1a 94       	dec	r1
 d06:	69 f7       	brne	.-38     	; 0xce2 <__udivmodsi4_loop>
 d08:	60 95       	com	r22
 d0a:	70 95       	com	r23
 d0c:	80 95       	com	r24
 d0e:	90 95       	com	r25
 d10:	9b 01       	movw	r18, r22
 d12:	ac 01       	movw	r20, r24
 d14:	bd 01       	movw	r22, r26
 d16:	cf 01       	movw	r24, r30
 d18:	08 95       	ret

00000d1a <_exit>:
 d1a:	f8 94       	cli

00000d1c <__stop_program>:
 d1c:	ff cf       	rjmp	.-2      	; 0xd1c <__stop_program>
