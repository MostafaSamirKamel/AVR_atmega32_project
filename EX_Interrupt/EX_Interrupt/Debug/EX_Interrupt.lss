
EX_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dde  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000780  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000829  00000000  00000000  00001bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  000023d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000588  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b7a  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000373a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_1>
   8:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_2>
   c:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 94 01 	call	0x328	; 0x328 <main>
  64:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
            case OUTPUT :   switch(Copy_u8PortNumber)
                            {
                                case PORTA :    DDRA_REG = 0xff ;   break;
                                case PORTB :    DDRB_REG = 0xff ;   break;
                                case PORTC :    DDRC_REG = 0xff ;   break;
                                case PORTD :    DDRD_REG = 0xff ;   break;
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_voidSetPinDirection+0x6>
  70:	73 c0       	rjmp	.+230    	; 0x158 <DIO_voidSetPinDirection+0xec>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_voidSetPinDirection+0xc>
  76:	70 c0       	rjmp	.+224    	; 0x158 <DIO_voidSetPinDirection+0xec>
  78:	44 23       	and	r20, r20
  7a:	19 f0       	breq	.+6      	; 0x82 <DIO_voidSetPinDirection+0x16>
  7c:	41 30       	cpi	r20, 0x01	; 1
  7e:	c9 f1       	breq	.+114    	; 0xf2 <DIO_voidSetPinDirection+0x86>
  80:	08 95       	ret
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	91 f0       	breq	.+36     	; 0xaa <DIO_voidSetPinDirection+0x3e>
  86:	28 f0       	brcs	.+10     	; 0x92 <DIO_voidSetPinDirection+0x26>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	d9 f0       	breq	.+54     	; 0xc2 <DIO_voidSetPinDirection+0x56>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	29 f1       	breq	.+74     	; 0xda <DIO_voidSetPinDirection+0x6e>
  90:	08 95       	ret
  92:	2a b3       	in	r18, 0x1a	; 26
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <DIO_voidSetPinDirection+0x32>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <DIO_voidSetPinDirection+0x2e>
  a2:	80 95       	com	r24
  a4:	82 23       	and	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
  aa:	27 b3       	in	r18, 0x17	; 23
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_voidSetPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_voidSetPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_voidSetPinDirection+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_voidSetPinDirection+0x5e>
  d2:	80 95       	com	r24
  d4:	82 23       	and	r24, r18
  d6:	84 bb       	out	0x14, r24	; 20
  d8:	08 95       	ret
  da:	21 b3       	in	r18, 0x11	; 17
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_voidSetPinDirection+0x7a>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_voidSetPinDirection+0x76>
  ea:	80 95       	com	r24
  ec:	82 23       	and	r24, r18
  ee:	81 bb       	out	0x11, r24	; 17
  f0:	08 95       	ret
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	89 f0       	breq	.+34     	; 0x118 <DIO_voidSetPinDirection+0xac>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_voidSetPinDirection+0x96>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	c9 f0       	breq	.+50     	; 0x12e <DIO_voidSetPinDirection+0xc2>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	11 f1       	breq	.+68     	; 0x144 <DIO_voidSetPinDirection+0xd8>
 100:	08 95       	ret
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_voidSetPinDirection+0xa2>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_voidSetPinDirection+0x9e>
 112:	82 2b       	or	r24, r18
 114:	8a bb       	out	0x1a, r24	; 26
 116:	08 95       	ret
 118:	27 b3       	in	r18, 0x17	; 23
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_voidSetPinDirection+0xb8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_voidSetPinDirection+0xb4>
 128:	82 2b       	or	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_voidSetPinDirection+0xce>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_voidSetPinDirection+0xca>
 13e:	82 2b       	or	r24, r18
 140:	84 bb       	out	0x14, r24	; 20
 142:	08 95       	ret
 144:	21 b3       	in	r18, 0x11	; 17
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_voidSetPinDirection+0xe4>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_voidSetPinDirection+0xe0>
 154:	82 2b       	or	r24, r18
 156:	81 bb       	out	0x11, r24	; 17
 158:	08 95       	ret

0000015a <DIO_voidSetPinValue>:
/* Fun. Return : void                                                                     */
/******************************************************************************************/
void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
        /* i/p validation */
    if ( Copy_u8PortNumber > PORTD || Copy_u8PinNumber > PIN7 )
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	08 f0       	brcs	.+2      	; 0x160 <DIO_voidSetPinValue+0x6>
 15e:	73 c0       	rjmp	.+230    	; 0x246 <DIO_voidSetPinValue+0xec>
 160:	68 30       	cpi	r22, 0x08	; 8
 162:	08 f0       	brcs	.+2      	; 0x166 <DIO_voidSetPinValue+0xc>
 164:	70 c0       	rjmp	.+224    	; 0x246 <DIO_voidSetPinValue+0xec>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
 166:	44 23       	and	r20, r20
 168:	19 f0       	breq	.+6      	; 0x170 <DIO_voidSetPinValue+0x16>
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	c9 f1       	breq	.+114    	; 0x1e0 <DIO_voidSetPinValue+0x86>
 16e:	08 95       	ret
        {
            case LOW :    switch(Copy_u8PortNumber)
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	91 f0       	breq	.+36     	; 0x198 <DIO_voidSetPinValue+0x3e>
 174:	28 f0       	brcs	.+10     	; 0x180 <DIO_voidSetPinValue+0x26>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	d9 f0       	breq	.+54     	; 0x1b0 <DIO_voidSetPinValue+0x56>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	29 f1       	breq	.+74     	; 0x1c8 <DIO_voidSetPinValue+0x6e>
 17e:	08 95       	ret
                            {
                                case PORTA :    CLEAR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinValue+0x32>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinValue+0x2e>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
                                case PORTB :    CLEAR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
 198:	28 b3       	in	r18, 0x18	; 24
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPinValue+0x4a>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPinValue+0x46>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	08 95       	ret
                                case PORTC :    CLEAR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
 1b0:	25 b3       	in	r18, 0x15	; 21
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_voidSetPinValue+0x62>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_voidSetPinValue+0x5e>
 1c0:	80 95       	com	r24
 1c2:	82 23       	and	r24, r18
 1c4:	85 bb       	out	0x15, r24	; 21
 1c6:	08 95       	ret
                                case PORTD :    CLEAR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
 1c8:	22 b3       	in	r18, 0x12	; 18
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinValue+0x7a>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinValue+0x76>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	08 95       	ret
                                default    :                                                break; 
                            }
                            break;
            case HIGH :   switch(Copy_u8PortNumber)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	89 f0       	breq	.+34     	; 0x206 <DIO_voidSetPinValue+0xac>
 1e4:	28 f0       	brcs	.+10     	; 0x1f0 <DIO_voidSetPinValue+0x96>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	c9 f0       	breq	.+50     	; 0x21c <DIO_voidSetPinValue+0xc2>
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	11 f1       	breq	.+68     	; 0x232 <DIO_voidSetPinValue+0xd8>
 1ee:	08 95       	ret
                            {
                                case PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
 1f0:	2b b3       	in	r18, 0x1b	; 27
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_voidSetPinValue+0xa2>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_voidSetPinValue+0x9e>
 200:	82 2b       	or	r24, r18
 202:	8b bb       	out	0x1b, r24	; 27
 204:	08 95       	ret
                                case PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
 206:	28 b3       	in	r18, 0x18	; 24
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_voidSetPinValue+0xb8>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_voidSetPinValue+0xb4>
 216:	82 2b       	or	r24, r18
 218:	88 bb       	out	0x18, r24	; 24
 21a:	08 95       	ret
                                case PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
 21c:	25 b3       	in	r18, 0x15	; 21
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_voidSetPinValue+0xce>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_voidSetPinValue+0xca>
 22c:	82 2b       	or	r24, r18
 22e:	85 bb       	out	0x15, r24	; 21
 230:	08 95       	ret
                                case PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
 232:	22 b3       	in	r18, 0x12	; 18
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_voidSetPinValue+0xe4>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_voidSetPinValue+0xe0>
 242:	82 2b       	or	r24, r18
 244:	82 bb       	out	0x12, r24	; 18
 246:	08 95       	ret

00000248 <Enterrupt_GlobalEnable>:
	SET_BIT(SREG_REG,GINT);
}

void Enterrupt_GlobalDisable()
{
	CLEAR_BIT(SREG_REG,GINT);
 248:	8f b7       	in	r24, 0x3f	; 63
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	8f bf       	out	0x3f, r24	; 63
 24e:	08 95       	ret

00000250 <EX_INT_voidEnable>:
}

void EX_INT_voidEnable(u8 Copy_INTNumber , u8 Copy_INTStatus)
{
	switch(Copy_INTNumber)
 250:	86 30       	cpi	r24, 0x06	; 6
 252:	31 f0       	breq	.+12     	; 0x260 <EX_INT_voidEnable+0x10>
 254:	87 30       	cpi	r24, 0x07	; 7
 256:	71 f1       	breq	.+92     	; 0x2b4 <EX_INT_voidEnable+0x64>
 258:	85 30       	cpi	r24, 0x05	; 5
 25a:	09 f0       	breq	.+2      	; 0x25e <EX_INT_voidEnable+0xe>
 25c:	64 c0       	rjmp	.+200    	; 0x326 <EX_INT_voidEnable+0xd6>
 25e:	54 c0       	rjmp	.+168    	; 0x308 <EX_INT_voidEnable+0xb8>
	{
		case INT0 : SET_BIT(GICR_REG,INT0);  //enable external interrupt 0
 260:	8b b7       	in	r24, 0x3b	; 59
 262:	80 64       	ori	r24, 0x40	; 64
 264:	8b bf       	out	0x3b, r24	; 59
		switch(Copy_INTStatus)
 266:	62 30       	cpi	r22, 0x02	; 2
 268:	81 f0       	breq	.+32     	; 0x28a <EX_INT_voidEnable+0x3a>
 26a:	18 f4       	brcc	.+6      	; 0x272 <EX_INT_voidEnable+0x22>
 26c:	61 30       	cpi	r22, 0x01	; 1
 26e:	31 f0       	breq	.+12     	; 0x27c <EX_INT_voidEnable+0x2c>
 270:	08 95       	ret
 272:	63 30       	cpi	r22, 0x03	; 3
 274:	89 f0       	breq	.+34     	; 0x298 <EX_INT_voidEnable+0x48>
 276:	64 30       	cpi	r22, 0x04	; 4
 278:	b1 f0       	breq	.+44     	; 0x2a6 <EX_INT_voidEnable+0x56>
 27a:	08 95       	ret
		{
			case RisingEdge  : SET_BIT(MCUCR_REG,ISC01);    SET_BIT(MCUCR_REG,ISC00);    break;
 27c:	85 b7       	in	r24, 0x35	; 53
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	85 bf       	out	0x35, r24	; 53
 282:	85 b7       	in	r24, 0x35	; 53
 284:	81 60       	ori	r24, 0x01	; 1
 286:	85 bf       	out	0x35, r24	; 53
 288:	08 95       	ret
			case FallingEdge : SET_BIT(MCUCR_REG,ISC01);    CLEAR_BIT(MCUCR_REG,ISC00);  break;
 28a:	85 b7       	in	r24, 0x35	; 53
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	85 bf       	out	0x35, r24	; 53
 290:	85 b7       	in	r24, 0x35	; 53
 292:	8e 7f       	andi	r24, 0xFE	; 254
 294:	85 bf       	out	0x35, r24	; 53
 296:	08 95       	ret
			case LowLevel    : CLEAR_BIT(MCUCR_REG,ISC01);  CLEAR_BIT(MCUCR_REG,ISC00);  break;
 298:	85 b7       	in	r24, 0x35	; 53
 29a:	8d 7f       	andi	r24, 0xFD	; 253
 29c:	85 bf       	out	0x35, r24	; 53
 29e:	85 b7       	in	r24, 0x35	; 53
 2a0:	8e 7f       	andi	r24, 0xFE	; 254
 2a2:	85 bf       	out	0x35, r24	; 53
 2a4:	08 95       	ret
			case AnyChange   : CLEAR_BIT(MCUCR_REG,ISC01);  SET_BIT(MCUCR_REG,ISC00);    break;
 2a6:	85 b7       	in	r24, 0x35	; 53
 2a8:	8d 7f       	andi	r24, 0xFD	; 253
 2aa:	85 bf       	out	0x35, r24	; 53
 2ac:	85 b7       	in	r24, 0x35	; 53
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	85 bf       	out	0x35, r24	; 53
 2b2:	08 95       	ret
			default: break;
		}break;
		
		case INT1 : SET_BIT(GICR_REG,INT1);  //enable external interrupt 1
 2b4:	8b b7       	in	r24, 0x3b	; 59
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	8b bf       	out	0x3b, r24	; 59
		switch(Copy_INTStatus)
 2ba:	62 30       	cpi	r22, 0x02	; 2
 2bc:	81 f0       	breq	.+32     	; 0x2de <EX_INT_voidEnable+0x8e>
 2be:	18 f4       	brcc	.+6      	; 0x2c6 <EX_INT_voidEnable+0x76>
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	31 f0       	breq	.+12     	; 0x2d0 <EX_INT_voidEnable+0x80>
 2c4:	08 95       	ret
 2c6:	63 30       	cpi	r22, 0x03	; 3
 2c8:	89 f0       	breq	.+34     	; 0x2ec <EX_INT_voidEnable+0x9c>
 2ca:	64 30       	cpi	r22, 0x04	; 4
 2cc:	b1 f0       	breq	.+44     	; 0x2fa <EX_INT_voidEnable+0xaa>
 2ce:	08 95       	ret
		{
			case RisingEdge  : SET_BIT(MCUCR_REG,ISC11);    SET_BIT(MCUCR_REG,ISC10);    break;
 2d0:	85 b7       	in	r24, 0x35	; 53
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	85 bf       	out	0x35, r24	; 53
 2d6:	85 b7       	in	r24, 0x35	; 53
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	85 bf       	out	0x35, r24	; 53
 2dc:	08 95       	ret
			case FallingEdge : SET_BIT(MCUCR_REG,ISC11);    CLEAR_BIT(MCUCR_REG,ISC10);  break;
 2de:	85 b7       	in	r24, 0x35	; 53
 2e0:	88 60       	ori	r24, 0x08	; 8
 2e2:	85 bf       	out	0x35, r24	; 53
 2e4:	85 b7       	in	r24, 0x35	; 53
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	85 bf       	out	0x35, r24	; 53
 2ea:	08 95       	ret
			case LowLevel    : CLEAR_BIT(MCUCR_REG,ISC11);  CLEAR_BIT(MCUCR_REG,ISC10);  break;
 2ec:	85 b7       	in	r24, 0x35	; 53
 2ee:	87 7f       	andi	r24, 0xF7	; 247
 2f0:	85 bf       	out	0x35, r24	; 53
 2f2:	85 b7       	in	r24, 0x35	; 53
 2f4:	8b 7f       	andi	r24, 0xFB	; 251
 2f6:	85 bf       	out	0x35, r24	; 53
 2f8:	08 95       	ret
			case AnyChange   : CLEAR_BIT(MCUCR_REG,ISC11);  SET_BIT(MCUCR_REG,ISC10);    break;
 2fa:	85 b7       	in	r24, 0x35	; 53
 2fc:	87 7f       	andi	r24, 0xF7	; 247
 2fe:	85 bf       	out	0x35, r24	; 53
 300:	85 b7       	in	r24, 0x35	; 53
 302:	84 60       	ori	r24, 0x04	; 4
 304:	85 bf       	out	0x35, r24	; 53
 306:	08 95       	ret
			default: break;
		}break;
		
		case INT2 : SET_BIT(GICR_REG,INT2);  //enable external interrupt 2
 308:	8b b7       	in	r24, 0x3b	; 59
 30a:	80 62       	ori	r24, 0x20	; 32
 30c:	8b bf       	out	0x3b, r24	; 59
		switch(Copy_INTStatus)
 30e:	61 30       	cpi	r22, 0x01	; 1
 310:	19 f0       	breq	.+6      	; 0x318 <EX_INT_voidEnable+0xc8>
 312:	62 30       	cpi	r22, 0x02	; 2
 314:	29 f0       	breq	.+10     	; 0x320 <EX_INT_voidEnable+0xd0>
 316:	08 95       	ret
		{
			case RisingEdge  : SET_BIT(MCUCSR_REG,ISC2);     break;
 318:	84 b7       	in	r24, 0x34	; 52
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	84 bf       	out	0x34, r24	; 52
 31e:	08 95       	ret
			case FallingEdge : CLEAR_BIT(MCUCSR_REG,ISC2);   break;
 320:	84 b7       	in	r24, 0x34	; 52
 322:	8f 7b       	andi	r24, 0xBF	; 191
 324:	84 bf       	out	0x34, r24	; 52
 326:	08 95       	ret

00000328 <main>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"

int main(void)
{
    DIO_voidSetPinDirection(PORTC,PIN0,OUTPUT);
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN1,OUTPUT);
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,PIN2,OUTPUT);
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	
	Enterrupt_GlobalEnable();
 346:	0e 94 24 01 	call	0x248	; 0x248 <Enterrupt_GlobalEnable>
	
	EX_INT_voidEnable(INT0,RisingEdge);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	86 e0       	ldi	r24, 0x06	; 6
 34e:	0e 94 28 01 	call	0x250	; 0x250 <EX_INT_voidEnable>
	EX_INT_voidEnable(INT1,AnyChange);
 352:	64 e0       	ldi	r22, 0x04	; 4
 354:	87 e0       	ldi	r24, 0x07	; 7
 356:	0e 94 28 01 	call	0x250	; 0x250 <EX_INT_voidEnable>
	EX_INT_voidEnable(INT2,FallingEdge);
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	85 e0       	ldi	r24, 0x05	; 5
 35e:	0e 94 28 01 	call	0x250	; 0x250 <EX_INT_voidEnable>
	
    while (1) 
    {
		DIO_voidSetPinValue(PORTC,PIN0,HIGH);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTC,PIN1,HIGH);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORTC,PIN2,HIGH);
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_voidSetPinValue>
 380:	f0 cf       	rjmp	.-32     	; 0x362 <main+0x3a>

00000382 <__vector_1>:
    }
}

ISR(INT0_vect)
{
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	2f 93       	push	r18
 38e:	3f 93       	push	r19
 390:	4f 93       	push	r20
 392:	5f 93       	push	r21
 394:	6f 93       	push	r22
 396:	7f 93       	push	r23
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	af 93       	push	r26
 39e:	bf 93       	push	r27
 3a0:	ef 93       	push	r30
 3a2:	ff 93       	push	r31
	DIO_voidSetPinValue(PORTC,PIN0,LOW);
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	83 ed       	ldi	r24, 0xD3	; 211
 3b2:	90 e3       	ldi	r25, 0x30	; 48
 3b4:	21 50       	subi	r18, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <__vector_1+0x32>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <__vector_1+0x3c>
 3be:	00 00       	nop
	_delay_ms(2000);
	
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <__vector_2>:

ISR(INT1_vect)
{
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	DIO_voidSetPinValue(PORTC,PIN1,LOW);
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_voidSetPinValue>
 40e:	2f ef       	ldi	r18, 0xFF	; 255
 410:	83 ed       	ldi	r24, 0xD3	; 211
 412:	90 e3       	ldi	r25, 0x30	; 48
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	_delay_ms(2000);
}
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_3>:

ISR(INT2_vect)
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	DIO_voidSetPinValue(PORTC,PIN2,LOW);
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	0e 94 ad 00 	call	0x15a	; 0x15a <DIO_voidSetPinValue>
 46e:	2f ef       	ldi	r18, 0xFF	; 255
 470:	83 ed       	ldi	r24, 0xD3	; 211
 472:	90 e3       	ldi	r25, 0x30	; 48
 474:	21 50       	subi	r18, 0x01	; 1
 476:	80 40       	sbci	r24, 0x00	; 0
 478:	90 40       	sbci	r25, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <__vector_3+0x32>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__vector_3+0x3c>
 47e:	00 00       	nop
	_delay_ms(2000);
}
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
