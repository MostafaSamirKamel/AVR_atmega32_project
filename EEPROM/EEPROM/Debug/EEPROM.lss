
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000348  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "../MCAL/EEPROM/EEPROM_Interface.h"


int main(void)
{
	EEPROM_voidWrite_eeprom(L30,10);
  6c:	6a e0       	ldi	r22, 0x0A	; 10
  6e:	8e e1       	ldi	r24, 0x1E	; 30
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	0e 94 5d 00 	call	0xba	; 0xba <EEPROM_voidWrite_eeprom>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f ef       	ldi	r18, 0xFF	; 255
  78:	89 e6       	ldi	r24, 0x69	; 105
  7a:	98 e1       	ldi	r25, 0x18	; 24
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
	_delay_ms(1000);
	EEPROM_voidWrite_eeprom(L31,6);
  88:	66 e0       	ldi	r22, 0x06	; 6
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 5d 00 	call	0xba	; 0xba <EEPROM_voidWrite_eeprom>
	EEPROM_voidWrite_eeprom(L32,4);
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 5d 00 	call	0xba	; 0xba <EEPROM_voidWrite_eeprom>
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	89 e6       	ldi	r24, 0x69	; 105
  a0:	98 e1       	ldi	r25, 0x18	; 24
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
	_delay_ms(1000);
	EEPROM_voidWrite_eeprom(L33,5);
  ae:	65 e0       	ldi	r22, 0x05	; 5
  b0:	81 e2       	ldi	r24, 0x21	; 33
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 5d 00 	call	0xba	; 0xba <EEPROM_voidWrite_eeprom>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x4c>

000000ba <EEPROM_voidWrite_eeprom>:
}

void EEPROM_voidWrite_eeprom(u16 Copy_u16Address, u8 Copy_u16DATA)
{
	/* wait for completion of  write operation */
	while(GET_BIT(EECR_REG,EEWE_BIT)==1);
  ba:	2c b3       	in	r18, 0x1c	; 28
	
	/*set up address register*/
	EEARL_REG = (u8)Copy_u16Address;
  bc:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (u8)(Copy_u16Address>>8);
  be:	9f bb       	out	0x1f, r25	; 31
	
	
	/*set up data register*/
	EEDR_REG = Copy_u16DATA ;
  c0:	6d bb       	out	0x1d, r22	; 29
	
	
	/*write logical one to EEMWE*/
	SET_BIT(EECR_REG,EEMWE_BIT);
  c2:	8c b3       	in	r24, 0x1c	; 28
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	8c bb       	out	0x1c, r24	; 28
	
	
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR_REG,EEWE_BIT);
  c8:	8c b3       	in	r24, 0x1c	; 28
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	8c bb       	out	0x1c, r24	; 28
	
	
	/* wait for completion of  write operation */
	while(GET_BIT(EECR_REG,EEWE_BIT)==1);
  ce:	8c b3       	in	r24, 0x1c	; 28
  d0:	08 95       	ret

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
