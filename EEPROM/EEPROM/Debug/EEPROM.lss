
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  0000093b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000336  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000170a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	
	EEPROM_voidWrite_eeprom(L0,0);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_voidWrite_eeprom>
	EEPROM_voidWrite_eeprom(L1,1);
  76:	61 e0       	ldi	r22, 0x01	; 1
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_voidWrite_eeprom>
	EEPROM_voidWrite_eeprom(L2,2);
  80:	62 e0       	ldi	r22, 0x02	; 2
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_voidWrite_eeprom>
	EEPROM_voidWrite_eeprom(L3,3);
  8a:	63 e0       	ldi	r22, 0x03	; 3
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 4b 00 	call	0x96	; 0x96 <EEPROM_voidWrite_eeprom>
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x28>

00000096 <EEPROM_voidWrite_eeprom>:

void EEPROM_voidWrite_eeprom(u16 Copy_u16Address, u8 Copy_u16DATA)
{
	
	/*set up address register*/
	EEARL_REG = (u8)Copy_u16Address;
  96:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (u8)(Copy_u16Address>>8);
  98:	9f bb       	out	0x1f, r25	; 31
	
	
	/*set up data register*/
	EEDR_REG = Copy_u16DATA ;
  9a:	6d bb       	out	0x1d, r22	; 29
	
	
	/*write logical one to EEMWE*/
	SET_BIT(EECR_REG,EEMWE_BIT);
  9c:	8c b3       	in	r24, 0x1c	; 28
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	8c bb       	out	0x1c, r24	; 28
	
	
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR_REG,EEWE_BIT);
  a2:	8c b3       	in	r24, 0x1c	; 28
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8c bb       	out	0x1c, r24	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	84 e3       	ldi	r24, 0x34	; 52
  ac:	9c e0       	ldi	r25, 0x0C	; 12
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <EEPROM_voidWrite_eeprom+0x18>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <EEPROM_voidWrite_eeprom+0x22>
  b8:	00 00       	nop
	
	_delay_ms(500);
	
	
	/* wait for completion of  write operation */
	while(GET_BIT(EECR_REG,EEWE_BIT)==1);
  ba:	8c b3       	in	r24, 0x1c	; 28
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
