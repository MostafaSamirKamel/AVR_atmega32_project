
TrafficLight_withTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000a34  00000ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800098  00800098  00000b00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021fb  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a3  00000000  00000000  00002f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e74  00000000  00000000  000038aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f7  00000000  00000000  00004a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001508  00000000  00000000  00005243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000674b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ca 04 	jmp	0x994	; 0x994 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 39       	cpi	r26, 0x99	; 153
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 03 	call	0x6f0	; 0x6f0 <main>
  8a:	0c 94 18 05 	jmp	0xa30	; 0xa30 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
    else
    {
       switch(Copy_u8PullUpStatus)
       {
            case ON :  DIO_voidSetPortValue (Copy_u8PortNumber, HIGH );  break;
            case OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, LOW );   break;
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
  96:	73 c0       	rjmp	.+230    	; 0x17e <DIO_voidSetPinDirection+0xec>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
  9c:	70 c0       	rjmp	.+224    	; 0x17e <DIO_voidSetPinDirection+0xec>
  9e:	44 23       	and	r20, r20
  a0:	19 f0       	breq	.+6      	; 0xa8 <DIO_voidSetPinDirection+0x16>
  a2:	41 30       	cpi	r20, 0x01	; 1
  a4:	c9 f1       	breq	.+114    	; 0x118 <DIO_voidSetPinDirection+0x86>
  a6:	08 95       	ret
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	91 f0       	breq	.+36     	; 0xd0 <DIO_voidSetPinDirection+0x3e>
  ac:	28 f0       	brcs	.+10     	; 0xb8 <DIO_voidSetPinDirection+0x26>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	d9 f0       	breq	.+54     	; 0xe8 <DIO_voidSetPinDirection+0x56>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	29 f1       	breq	.+74     	; 0x100 <DIO_voidSetPinDirection+0x6e>
  b6:	08 95       	ret
  b8:	2a b3       	in	r18, 0x1a	; 26
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x32>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x2e>
  c8:	80 95       	com	r24
  ca:	82 23       	and	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_voidSetPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_voidSetPinDirection+0x46>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
  e8:	24 b3       	in	r18, 0x14	; 20
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDirection+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDirection+0x5e>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	84 bb       	out	0x14, r24	; 20
  fe:	08 95       	ret
 100:	21 b3       	in	r18, 0x11	; 17
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0x7a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x76>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	81 bb       	out	0x11, r24	; 17
 116:	08 95       	ret
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	89 f0       	breq	.+34     	; 0x13e <DIO_voidSetPinDirection+0xac>
 11c:	28 f0       	brcs	.+10     	; 0x128 <DIO_voidSetPinDirection+0x96>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	c9 f0       	breq	.+50     	; 0x154 <DIO_voidSetPinDirection+0xc2>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	11 f1       	breq	.+68     	; 0x16a <DIO_voidSetPinDirection+0xd8>
 126:	08 95       	ret
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0x9e>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	08 95       	ret
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinDirection+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinDirection+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
 152:	08 95       	ret
 154:	24 b3       	in	r18, 0x14	; 20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinDirection+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinDirection+0xca>
 164:	82 2b       	or	r24, r18
 166:	84 bb       	out	0x14, r24	; 20
 168:	08 95       	ret
 16a:	21 b3       	in	r18, 0x11	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xe4>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xe0>
 17a:	82 2b       	or	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret

00000180 <DIO_voidSetPinValue>:
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	08 f0       	brcs	.+2      	; 0x186 <DIO_voidSetPinValue+0x6>
 184:	73 c0       	rjmp	.+230    	; 0x26c <DIO_voidSetPinValue+0xec>
 186:	68 30       	cpi	r22, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_voidSetPinValue+0xc>
 18a:	70 c0       	rjmp	.+224    	; 0x26c <DIO_voidSetPinValue+0xec>
 18c:	44 23       	and	r20, r20
 18e:	19 f0       	breq	.+6      	; 0x196 <DIO_voidSetPinValue+0x16>
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	c9 f1       	breq	.+114    	; 0x206 <DIO_voidSetPinValue+0x86>
 194:	08 95       	ret
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	91 f0       	breq	.+36     	; 0x1be <DIO_voidSetPinValue+0x3e>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <DIO_voidSetPinValue+0x26>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	d9 f0       	breq	.+54     	; 0x1d6 <DIO_voidSetPinValue+0x56>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	29 f1       	breq	.+74     	; 0x1ee <DIO_voidSetPinValue+0x6e>
 1a4:	08 95       	ret
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_voidSetPinValue+0x32>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_voidSetPinValue+0x2e>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPinValue+0x4a>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_voidSetPinValue+0x46>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_voidSetPinValue+0x62>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_voidSetPinValue+0x5e>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
 1ee:	22 b3       	in	r18, 0x12	; 18
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinValue+0x7a>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinValue+0x76>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	82 bb       	out	0x12, r24	; 18
 204:	08 95       	ret
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	89 f0       	breq	.+34     	; 0x22c <DIO_voidSetPinValue+0xac>
 20a:	28 f0       	brcs	.+10     	; 0x216 <DIO_voidSetPinValue+0x96>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	c9 f0       	breq	.+50     	; 0x242 <DIO_voidSetPinValue+0xc2>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	11 f1       	breq	.+68     	; 0x258 <DIO_voidSetPinValue+0xd8>
 214:	08 95       	ret
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_voidSetPinValue+0xa2>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_voidSetPinValue+0x9e>
 226:	82 2b       	or	r24, r18
 228:	8b bb       	out	0x1b, r24	; 27
 22a:	08 95       	ret
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0xb8>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0xb4>
 23c:	82 2b       	or	r24, r18
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
 242:	25 b3       	in	r18, 0x15	; 21
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinValue+0xce>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinValue+0xca>
 252:	82 2b       	or	r24, r18
 254:	85 bb       	out	0x15, r24	; 21
 256:	08 95       	ret
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_voidSetPinValue+0xe4>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_voidSetPinValue+0xe0>
 268:	82 2b       	or	r24, r18
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	08 95       	ret

0000026e <DIO_voidSetNibbleDirection>:
    }    
}
/*=================================================================================================*/
/*=================================================================================================*/

void DIO_voidSetNibbleDirection (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Direction) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 272:	84 30       	cpi	r24, 0x04	; 4
 274:	58 f5       	brcc	.+86     	; 0x2cc <DIO_voidSetNibbleDirection+0x5e>
 276:	d4 2f       	mov	r29, r20
 278:	c8 2f       	mov	r28, r24
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 27a:	66 23       	and	r22, r22
 27c:	a9 f0       	breq	.+42     	; 0x2a8 <DIO_voidSetNibbleDirection+0x3a>
 27e:	61 30       	cpi	r22, 0x01	; 1
 280:	29 f5       	brne	.+74     	; 0x2cc <DIO_voidSetNibbleDirection+0x5e>
		{
			case LOW_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,0,Copy_u8Direction);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,1,Copy_u8Direction);
 288:	4d 2f       	mov	r20, r29
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,2,Copy_u8Direction);
 292:	4d 2f       	mov	r20, r29
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	8c 2f       	mov	r24, r28
 298:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,3,Copy_u8Direction);
 29c:	4d 2f       	mov	r20, r29
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	8c 2f       	mov	r24, r28
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
			break;
 2a6:	12 c0       	rjmp	.+36     	; 0x2cc <DIO_voidSetNibbleDirection+0x5e>
			case HIGH_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,4,Copy_u8Direction);
 2a8:	64 e0       	ldi	r22, 0x04	; 4
 2aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,5,Copy_u8Direction);
 2ae:	4d 2f       	mov	r20, r29
 2b0:	65 e0       	ldi	r22, 0x05	; 5
 2b2:	8c 2f       	mov	r24, r28
 2b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,6,Copy_u8Direction);
 2b8:	4d 2f       	mov	r20, r29
 2ba:	66 e0       	ldi	r22, 0x06	; 6
 2bc:	8c 2f       	mov	r24, r28
 2be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,7,Copy_u8Direction);
 2c2:	4d 2f       	mov	r20, r29
 2c4:	67 e0       	ldi	r22, 0x07	; 7
 2c6:	8c 2f       	mov	r24, r28
 2c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
			break;
			default:
			break;
		}
	}
}
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <DIO_voidSetNibbleValue>:


void DIO_voidSetNibbleValue (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Value) {
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 2d2:	84 30       	cpi	r24, 0x04	; 4
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <DIO_voidSetNibbleValue+0x6>
 2d6:	4f c0       	rjmp	.+158    	; 0x376 <DIO_voidSetNibbleValue+0xa4>
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 2d8:	66 23       	and	r22, r22
 2da:	41 f1       	breq	.+80     	; 0x32c <DIO_voidSetNibbleValue+0x5a>
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	09 f0       	breq	.+2      	; 0x2e2 <DIO_voidSetNibbleValue+0x10>
 2e0:	4a c0       	rjmp	.+148    	; 0x376 <DIO_voidSetNibbleValue+0xa4>
		{
			case LOW_NIBBLE:
					Copy_u8Value&=0x0f;
 2e2:	4f 70       	andi	r20, 0x0F	; 15
					switch(Copy_u8PortNumber)
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	69 f0       	breq	.+26     	; 0x302 <DIO_voidSetNibbleValue+0x30>
 2e8:	28 f0       	brcs	.+10     	; 0x2f4 <DIO_voidSetNibbleValue+0x22>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	89 f0       	breq	.+34     	; 0x310 <DIO_voidSetNibbleValue+0x3e>
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	b1 f0       	breq	.+44     	; 0x31e <DIO_voidSetNibbleValue+0x4c>
 2f2:	08 95       	ret
					{
						case PORTA:  PORTA_REG&=0xf0;
 2f4:	8b b3       	in	r24, 0x1b	; 27
 2f6:	80 7f       	andi	r24, 0xF0	; 240
 2f8:	8b bb       	out	0x1b, r24	; 27
									PORTA_REG|=Copy_u8Value;
 2fa:	8b b3       	in	r24, 0x1b	; 27
 2fc:	48 2b       	or	r20, r24
 2fe:	4b bb       	out	0x1b, r20	; 27
									break; 
 300:	08 95       	ret
						case PORTB:	PORTB_REG&=0xf0;
 302:	88 b3       	in	r24, 0x18	; 24
 304:	80 7f       	andi	r24, 0xF0	; 240
 306:	88 bb       	out	0x18, r24	; 24
									PORTB_REG|=Copy_u8Value;
 308:	88 b3       	in	r24, 0x18	; 24
 30a:	48 2b       	or	r20, r24
 30c:	48 bb       	out	0x18, r20	; 24
									break;
 30e:	08 95       	ret
						case PORTC:	PORTC_REG&=0xf0;
 310:	85 b3       	in	r24, 0x15	; 21
 312:	80 7f       	andi	r24, 0xF0	; 240
 314:	85 bb       	out	0x15, r24	; 21
									PORTC_REG|=Copy_u8Value;
 316:	85 b3       	in	r24, 0x15	; 21
 318:	48 2b       	or	r20, r24
 31a:	45 bb       	out	0x15, r20	; 21
									break;
 31c:	08 95       	ret
						case PORTD:	PORTD_REG&=0xf0;
 31e:	82 b3       	in	r24, 0x12	; 18
 320:	80 7f       	andi	r24, 0xF0	; 240
 322:	82 bb       	out	0x12, r24	; 18
									PORTD_REG|=Copy_u8Value;
 324:	82 b3       	in	r24, 0x12	; 18
 326:	48 2b       	or	r20, r24
 328:	42 bb       	out	0x12, r20	; 18
									break;
 32a:	08 95       	ret
					}
			break;
			case HIGH_NIBBLE:
			Copy_u8Value <<= 4; // Shift left by 4 to align it with high nibble
 32c:	42 95       	swap	r20
 32e:	40 7f       	andi	r20, 0xF0	; 240
			switch(Copy_u8PortNumber)
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	69 f0       	breq	.+26     	; 0x34e <DIO_voidSetNibbleValue+0x7c>
 334:	28 f0       	brcs	.+10     	; 0x340 <DIO_voidSetNibbleValue+0x6e>
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	89 f0       	breq	.+34     	; 0x35c <DIO_voidSetNibbleValue+0x8a>
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	b1 f0       	breq	.+44     	; 0x36a <DIO_voidSetNibbleValue+0x98>
 33e:	08 95       	ret
			{
				case PORTA:  PORTA_REG &= 0x0F;
 340:	8b b3       	in	r24, 0x1b	; 27
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	8b bb       	out	0x1b, r24	; 27
				PORTA_REG |= Copy_u8Value;
 346:	8b b3       	in	r24, 0x1b	; 27
 348:	48 2b       	or	r20, r24
 34a:	4b bb       	out	0x1b, r20	; 27
				break;
 34c:	08 95       	ret
				case PORTB:  PORTB_REG &= 0x0F;
 34e:	88 b3       	in	r24, 0x18	; 24
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	88 bb       	out	0x18, r24	; 24
				PORTB_REG |= Copy_u8Value;
 354:	88 b3       	in	r24, 0x18	; 24
 356:	48 2b       	or	r20, r24
 358:	48 bb       	out	0x18, r20	; 24
				break;
 35a:	08 95       	ret
				case PORTC:  PORTC_REG &= 0x0F;
 35c:	85 b3       	in	r24, 0x15	; 21
 35e:	8f 70       	andi	r24, 0x0F	; 15
 360:	85 bb       	out	0x15, r24	; 21
				PORTC_REG |= Copy_u8Value;
 362:	85 b3       	in	r24, 0x15	; 21
 364:	48 2b       	or	r20, r24
 366:	45 bb       	out	0x15, r20	; 21
				break;
 368:	08 95       	ret
				case PORTD:  PORTD_REG &= 0x0F;
 36a:	82 b3       	in	r24, 0x12	; 18
 36c:	8f 70       	andi	r24, 0x0F	; 15
 36e:	82 bb       	out	0x12, r24	; 18
				PORTD_REG |= Copy_u8Value;
 370:	82 b3       	in	r24, 0x12	; 18
 372:	48 2b       	or	r20, r24
 374:	42 bb       	out	0x12, r20	; 18
 376:	08 95       	ret

00000378 <LCD_voidSendCommand>:
/* Description : Shifts the entire LCD display right                                     */
/* Return : void                                                                         */
/*****************************************************************************************/
void LCD_voidShiftRight(void)
{
	LCD_voidSendCommand(DIS_SHIFT_RIGHT);
 378:	cf 93       	push	r28
 37a:	c8 2f       	mov	r28, r24
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	67 e0       	ldi	r22, 0x07	; 7
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	66 e0       	ldi	r22, 0x06	; 6
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 390:	4c 2f       	mov	r20, r28
 392:	42 95       	swap	r20
 394:	4f 70       	andi	r20, 0x0F	; 15
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_voidSetNibbleValue>
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	65 e0       	ldi	r22, 0x05	; 5
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3a8:	83 ef       	ldi	r24, 0xF3	; 243
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_voidSendCommand+0x34>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_voidSendCommand+0x3a>
 3b2:	00 00       	nop
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	65 e0       	ldi	r22, 0x05	; 5
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3be:	83 ef       	ldi	r24, 0xF3	; 243
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCD_voidSendCommand+0x4a>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_voidSendCommand+0x50>
 3c8:	00 00       	nop
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	67 e0       	ldi	r22, 0x07	; 7
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	66 e0       	ldi	r22, 0x06	; 6
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3de:	4c 2f       	mov	r20, r28
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_voidSetNibbleValue>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	65 e0       	ldi	r22, 0x05	; 5
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3f2:	83 ef       	ldi	r24, 0xF3	; 243
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_voidSendCommand+0x7e>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_voidSendCommand+0x84>
 3fc:	00 00       	nop
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	65 e0       	ldi	r22, 0x05	; 5
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 408:	83 ef       	ldi	r24, 0xF3	; 243
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <LCD_voidWriteChar>:
 418:	cf 93       	push	r28
 41a:	c8 2f       	mov	r28, r24
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	67 e0       	ldi	r22, 0x07	; 7
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	66 e0       	ldi	r22, 0x06	; 6
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 430:	4c 2f       	mov	r20, r28
 432:	42 95       	swap	r20
 434:	4f 70       	andi	r20, 0x0F	; 15
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_voidSetNibbleValue>
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	65 e0       	ldi	r22, 0x05	; 5
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 448:	83 ef       	ldi	r24, 0xF3	; 243
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <LCD_voidWriteChar+0x34>
 450:	00 c0       	rjmp	.+0      	; 0x452 <LCD_voidWriteChar+0x3a>
 452:	00 00       	nop
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	65 e0       	ldi	r22, 0x05	; 5
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 45e:	83 ef       	ldi	r24, 0xF3	; 243
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <LCD_voidWriteChar+0x4a>
 466:	00 c0       	rjmp	.+0      	; 0x468 <LCD_voidWriteChar+0x50>
 468:	00 00       	nop
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	67 e0       	ldi	r22, 0x07	; 7
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	66 e0       	ldi	r22, 0x06	; 6
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 47e:	4c 2f       	mov	r20, r28
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_voidSetNibbleValue>
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	65 e0       	ldi	r22, 0x05	; 5
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 492:	83 ef       	ldi	r24, 0xF3	; 243
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_voidWriteChar+0x7e>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_voidWriteChar+0x84>
 49c:	00 00       	nop
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	65 e0       	ldi	r22, 0x05	; 5
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 4a8:	83 ef       	ldi	r24, 0xF3	; 243
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_voidWriteChar+0x94>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_voidWriteChar+0x9a>
 4b2:	00 00       	nop
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <LCD_voidWriteString>:
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	8c 01       	movw	r16, r24
 4c0:	c0 e0       	ldi	r28, 0x00	; 0
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <LCD_voidWriteString+0x12>
 4c4:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_voidWriteChar>
 4c8:	cf 5f       	subi	r28, 0xFF	; 255
 4ca:	f8 01       	movw	r30, r16
 4cc:	ec 0f       	add	r30, r28
 4ce:	f1 1d       	adc	r31, r1
 4d0:	80 81       	ld	r24, Z
 4d2:	81 11       	cpse	r24, r1
 4d4:	f7 cf       	rjmp	.-18     	; 0x4c4 <LCD_voidWriteString+0xc>
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

000004de <LCD_voidWriteNumber>:
 4de:	1f 93       	push	r17
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	2a 97       	sbiw	r28, 0x0a	; 10
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	61 15       	cp	r22, r1
 4f6:	71 05       	cpc	r23, r1
 4f8:	81 05       	cpc	r24, r1
 4fa:	91 05       	cpc	r25, r1
 4fc:	c1 f4       	brne	.+48     	; 0x52e <LCD_voidWriteNumber+0x50>
 4fe:	80 e3       	ldi	r24, 0x30	; 48
 500:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_voidWriteChar>
 504:	2a c0       	rjmp	.+84     	; 0x55a <LCD_voidWriteNumber+0x7c>
 506:	2a e0       	ldi	r18, 0x0A	; 10
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__udivmodsi4>
 512:	e1 e0       	ldi	r30, 0x01	; 1
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	ec 0f       	add	r30, r28
 518:	fd 1f       	adc	r31, r29
 51a:	e1 0f       	add	r30, r17
 51c:	f1 1d       	adc	r31, r1
 51e:	60 5d       	subi	r22, 0xD0	; 208
 520:	60 83       	st	Z, r22
 522:	62 2f       	mov	r22, r18
 524:	73 2f       	mov	r23, r19
 526:	84 2f       	mov	r24, r20
 528:	95 2f       	mov	r25, r21
 52a:	1f 5f       	subi	r17, 0xFF	; 255
 52c:	01 c0       	rjmp	.+2      	; 0x530 <LCD_voidWriteNumber+0x52>
 52e:	10 e0       	ldi	r17, 0x00	; 0
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	81 05       	cpc	r24, r1
 536:	91 05       	cpc	r25, r1
 538:	31 f7       	brne	.-52     	; 0x506 <LCD_voidWriteNumber+0x28>
 53a:	11 50       	subi	r17, 0x01	; 1
 53c:	0c c0       	rjmp	.+24     	; 0x556 <LCD_voidWriteNumber+0x78>
 53e:	e1 e0       	ldi	r30, 0x01	; 1
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	ec 0f       	add	r30, r28
 544:	fd 1f       	adc	r31, r29
 546:	e1 0f       	add	r30, r17
 548:	f1 1d       	adc	r31, r1
 54a:	17 fd       	sbrc	r17, 7
 54c:	fa 95       	dec	r31
 54e:	80 81       	ld	r24, Z
 550:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_voidWriteChar>
 554:	11 50       	subi	r17, 0x01	; 1
 556:	11 23       	and	r17, r17
 558:	94 f7       	brge	.-28     	; 0x53e <LCD_voidWriteNumber+0x60>
 55a:	2a 96       	adiw	r28, 0x0a	; 10
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	08 95       	ret

0000056e <LCD_voidGoTo_XY>:
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	e0 f4       	brcc	.+56     	; 0x5aa <LCD_voidGoTo_XY+0x3c>
 572:	60 31       	cpi	r22, 0x10	; 16
 574:	d0 f4       	brcc	.+52     	; 0x5aa <LCD_voidGoTo_XY+0x3c>
 576:	88 23       	and	r24, r24
 578:	19 f0       	breq	.+6      	; 0x580 <LCD_voidGoTo_XY+0x12>
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	61 f0       	breq	.+24     	; 0x596 <LCD_voidGoTo_XY+0x28>
 57e:	08 95       	ret
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	86 0f       	add	r24, r22
 584:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 588:	87 ea       	ldi	r24, 0xA7	; 167
 58a:	91 e6       	ldi	r25, 0x61	; 97
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <LCD_voidGoTo_XY+0x1e>
 590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_voidGoTo_XY+0x24>
 592:	00 00       	nop
 594:	08 95       	ret
 596:	80 ec       	ldi	r24, 0xC0	; 192
 598:	86 0f       	add	r24, r22
 59a:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 59e:	87 ea       	ldi	r24, 0xA7	; 167
 5a0:	91 e6       	ldi	r25, 0x61	; 97
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_voidGoTo_XY+0x34>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_voidGoTo_XY+0x3a>
 5a8:	00 00       	nop
 5aa:	08 95       	ret

000005ac <LCD_voidDrawPattern>:
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	8b 01       	movw	r16, r22
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	08 96       	adiw	r24, 0x08	; 8
 5b8:	88 0f       	add	r24, r24
 5ba:	88 0f       	add	r24, r24
 5bc:	88 0f       	add	r24, r24
 5be:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 5c2:	c0 e0       	ldi	r28, 0x00	; 0
 5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <LCD_voidDrawPattern+0x28>
 5c6:	f8 01       	movw	r30, r16
 5c8:	ec 0f       	add	r30, r28
 5ca:	f1 1d       	adc	r31, r1
 5cc:	80 81       	ld	r24, Z
 5ce:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_voidWriteChar>
 5d2:	cf 5f       	subi	r28, 0xFF	; 255
 5d4:	c8 30       	cpi	r28, 0x08	; 8
 5d6:	b8 f3       	brcs	.-18     	; 0x5c6 <LCD_voidDrawPattern+0x1a>
 5d8:	87 ea       	ldi	r24, 0xA7	; 167
 5da:	91 e6       	ldi	r25, 0x61	; 97
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <LCD_voidDrawPattern+0x30>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <LCD_voidDrawPattern+0x36>
 5e2:	00 00       	nop
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	08 95       	ret

000005ec <LCD_voidShowPattern>:
 5ec:	cf 93       	push	r28
 5ee:	c8 2f       	mov	r28, r24
 5f0:	86 2f       	mov	r24, r22
 5f2:	64 2f       	mov	r22, r20
 5f4:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
 5f8:	8c 2f       	mov	r24, r28
 5fa:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_voidWriteChar>
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <LCD_voidClearDisplay>:
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 608:	83 ef       	ldi	r24, 0xF3	; 243
 60a:	91 e0       	ldi	r25, 0x01	; 1
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	f1 f7       	brne	.-4      	; 0x60c <LCD_voidClearDisplay+0xa>
 610:	00 c0       	rjmp	.+0      	; 0x612 <LCD_voidClearDisplay+0x10>
 612:	00 00       	nop
 614:	82 e0       	ldi	r24, 0x02	; 2
 616:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 61a:	83 ef       	ldi	r24, 0xF3	; 243
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <LCD_voidClearDisplay+0x1c>
 622:	00 c0       	rjmp	.+0      	; 0x624 <LCD_voidClearDisplay+0x22>
 624:	00 00       	nop
 626:	08 95       	ret

00000628 <LCD_voidInit>:
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_voidSetNibbleDirection>
 632:	41 e0       	ldi	r20, 0x01	; 1
 634:	67 e0       	ldi	r22, 0x07	; 7
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	66 e0       	ldi	r22, 0x06	; 6
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 646:	41 e0       	ldi	r20, 0x01	; 1
 648:	65 e0       	ldi	r22, 0x05	; 5
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 650:	8d e2       	ldi	r24, 0x2D	; 45
 652:	92 e2       	ldi	r25, 0x22	; 34
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_voidInit+0x2c>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_voidInit+0x32>
 65a:	00 00       	nop
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 662:	89 ef       	ldi	r24, 0xF9	; 249
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <LCD_voidInit+0x3e>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <LCD_voidInit+0x44>
 66c:	00 00       	nop
 66e:	88 e2       	ldi	r24, 0x28	; 40
 670:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 674:	89 ef       	ldi	r24, 0xF9	; 249
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <LCD_voidInit+0x50>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <LCD_voidInit+0x56>
 67e:	00 00       	nop
 680:	8c e0       	ldi	r24, 0x0C	; 12
 682:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 686:	89 ef       	ldi	r24, 0xF9	; 249
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	f1 f7       	brne	.-4      	; 0x68a <LCD_voidInit+0x62>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <LCD_voidInit+0x68>
 690:	00 00       	nop
 692:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
 696:	83 ef       	ldi	r24, 0xF3	; 243
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_voidInit+0x72>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_voidInit+0x78>
 6a0:	00 00       	nop
 6a2:	86 e0       	ldi	r24, 0x06	; 6
 6a4:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_voidSendCommand>
 6a8:	89 ef       	ldi	r24, 0xF9	; 249
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_voidInit+0x84>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_voidInit+0x8a>
 6b2:	00 00       	nop
 6b4:	08 95       	ret

000006b6 <LCD_voidClearGrid>:
/* Arguments : Copy_u8Line, Copy_u8Position                                              */
/* Return : void                                                                         */
/*****************************************************************************************/
void LCD_voidClearGrid(u8 Copy_u8Line, u8 Copy_u8Position)
{
	LCD_voidGoTo_XY(Copy_u8Line, Copy_u8Position);
 6b6:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
	LCD_voidWriteChar(' ');
 6ba:	80 e2       	ldi	r24, 0x20	; 32
 6bc:	0e 94 0c 02 	call	0x418	; 0x418 <LCD_voidWriteChar>
 6c0:	08 95       	ret

000006c2 <LED_voidInit_Led_Pin>:
    {
        // Do Nothing
    }
    else
    {
        DIO_voidSetPortDirection ( Copy_u8PortNumber, OUTPUT );
 6c2:	84 30       	cpi	r24, 0x04	; 4
 6c4:	28 f4       	brcc	.+10     	; 0x6d0 <LED_voidInit_Led_Pin+0xe>
 6c6:	68 30       	cpi	r22, 0x08	; 8
 6c8:	18 f4       	brcc	.+6      	; 0x6d0 <LED_voidInit_Led_Pin+0xe>
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 6d0:	08 95       	ret

000006d2 <LED_voidStatus_Led_Pin>:
/* Fun. Return : void                                                                                */
/*****************************************************************************************************/
void LED_voidStatus_Led_Pin ( u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Status )
{
    /* i/p validation */
    if ( Copy_u8PortNumber > PORTD  || Copy_u8PinNumber > PIN7 )
 6d2:	84 30       	cpi	r24, 0x04	; 4
 6d4:	60 f4       	brcc	.+24     	; 0x6ee <LED_voidStatus_Led_Pin+0x1c>
 6d6:	68 30       	cpi	r22, 0x08	; 8
 6d8:	50 f4       	brcc	.+20     	; 0x6ee <LED_voidStatus_Led_Pin+0x1c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Status)
 6da:	44 23       	and	r20, r20
 6dc:	29 f0       	breq	.+10     	; 0x6e8 <LED_voidStatus_Led_Pin+0x16>
 6de:	41 30       	cpi	r20, 0x01	; 1
 6e0:	31 f4       	brne	.+12     	; 0x6ee <LED_voidStatus_Led_Pin+0x1c>
        {
            case ON  :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, HIGH );     break;
 6e2:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 6e6:	08 95       	ret
            case OFF :   DIO_voidSetPinValue ( Copy_u8PortNumber, Copy_u8PinNumber, LOW  );     break;
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 6ee:	08 95       	ret

000006f0 <main>:
	0b10001
};

int main(void)
{
	LCD_voidInit();
 6f0:	0e 94 14 03 	call	0x628	; 0x628 <LCD_voidInit>
	TIMER0_voidInit();
 6f4:	0e 94 df 04 	call	0x9be	; 0x9be <TIMER0_voidInit>

	// Load custom patterns into CGRAM
	LCD_voidDrawPattern(0, Car_Pattern);
 6f8:	60 e7       	ldi	r22, 0x70	; 112
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_voidDrawPattern>
	LCD_voidDrawPattern(1, Stop_Pattern);
 702:	68 e6       	ldi	r22, 0x68	; 104
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_voidDrawPattern>
	LCD_voidDrawPattern(2, Warn_Pattern);
 70c:	60 e6       	ldi	r22, 0x60	; 96
 70e:	70 e0       	ldi	r23, 0x00	; 0
 710:	82 e0       	ldi	r24, 0x02	; 2
 712:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_voidDrawPattern>

	// LED Pins
	LED_voidInit_Led_Pin(PORTB, PIN0); // Red
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LED_voidInit_Led_Pin>
	LED_voidInit_Led_Pin(PORTB, PIN1); // Yellow
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LED_voidInit_Led_Pin>
	LED_voidInit_Led_Pin(PORTB, PIN2); // Green
 72e:	62 e0       	ldi	r22, 0x02	; 2
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LED_voidInit_Led_Pin>

	while (1)
	{
		// ========== GREEN PHASE ==========
		count_green = 10;
 73a:	8a e0       	ldi	r24, 0x0A	; 10
 73c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <count_green>
		LCD_voidClearDisplay();
 740:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidShowPattern(0, LINE_1, 5); // Car icon
 744:	45 e0       	ldi	r20, 0x05	; 5
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_voidShowPattern>
		LCD_voidGoTo_XY(LINE_1, 7);
 74e:	67 e0       	ldi	r22, 0x07	; 7
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Go");
 756:	8b e7       	ldi	r24, 0x7B	; 123
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>
		LCD_voidGoTo_XY(LINE_2, 1);
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Remain    sec");
 766:	8e e7       	ldi	r24, 0x7E	; 126
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>

		while (count_green > 0)
 76e:	24 c0       	rjmp	.+72     	; 0x7b8 <main+0xc8>
		{
			if (count_interrupt >= 100)
 770:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <__data_end>
 774:	94 36       	cpi	r25, 0x64	; 100
 776:	c0 f0       	brcs	.+48     	; 0x7a8 <main+0xb8>
			{
				count_green--;
 778:	81 50       	subi	r24, 0x01	; 1
 77a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <count_green>
				LCD_voidGoTo_XY(LINE_2, 8); 
 77e:	68 e0       	ldi	r22, 0x08	; 8
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
				LCD_voidWriteNumber(count_green);
 786:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <count_green>
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_voidWriteNumber>
				
				if (count_green < 10)
 794:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <count_green>
 798:	8a 30       	cpi	r24, 0x0A	; 10
 79a:	20 f4       	brcc	.+8      	; 0x7a4 <main+0xb4>
				{
					LCD_voidClearGrid(LINE_2, 9);
 79c:	69 e0       	ldi	r22, 0x09	; 9
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClearGrid>
				}
				
				count_interrupt = 0;
 7a4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
			}
			LED_voidStatus_Led_Pin(PORTB, PIN2, ON); // Green ON
 7a8:	41 e0       	ldi	r20, 0x01	; 1
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	62 e0       	ldi	r22, 0x02	; 2
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>
		LCD_voidGoTo_XY(LINE_1, 7);
		LCD_voidWriteString("Go");
		LCD_voidGoTo_XY(LINE_2, 1);
		LCD_voidWriteString("Remain    sec");

		while (count_green > 0)
 7b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <count_green>
 7bc:	81 11       	cpse	r24, r1
 7be:	d8 cf       	rjmp	.-80     	; 0x770 <main+0x80>
				
				count_interrupt = 0;
			}
			LED_voidStatus_Led_Pin(PORTB, PIN2, ON); // Green ON
		}
		LED_voidStatus_Led_Pin(PORTB, PIN2, OFF); // Green OFF
 7c0:	40 e0       	ldi	r20, 0x00	; 0
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	62 e0       	ldi	r22, 0x02	; 2
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>

		// ========== YELLOW (READY TO STOP) ==========
		count_yellow = 5;
 7d0:	85 e0       	ldi	r24, 0x05	; 5
 7d2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <count_yellow>
		LCD_voidClearDisplay();
 7d6:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidShowPattern(2, LINE_1, 4); // Warn icon
 7da:	44 e0       	ldi	r20, 0x04	; 4
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_voidShowPattern>
		LCD_voidGoTo_XY(LINE_1, 6);
 7e4:	66 e0       	ldi	r22, 0x06	; 6
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Ready");
 7ec:	8c e8       	ldi	r24, 0x8C	; 140
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>
		LCD_voidGoTo_XY(LINE_2, 1);
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Remain    sec");
 7fc:	8e e7       	ldi	r24, 0x7E	; 126
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>

		while (count_yellow > 0)
 804:	24 c0       	rjmp	.+72     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		{
			if (count_interrupt >= 100)
 806:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <__data_end>
 80a:	94 36       	cpi	r25, 0x64	; 100
 80c:	c0 f0       	brcs	.+48     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
			{
				count_yellow--;
 80e:	81 50       	subi	r24, 0x01	; 1
 810:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <count_yellow>
				LCD_voidGoTo_XY(LINE_2, 8); 
 814:	68 e0       	ldi	r22, 0x08	; 8
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
				LCD_voidWriteNumber(count_yellow);
 81c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <count_yellow>
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_voidWriteNumber>

				if (count_yellow < 10)
 82a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <count_yellow>
 82e:	8a 30       	cpi	r24, 0x0A	; 10
 830:	20 f4       	brcc	.+8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
				{
					LCD_voidClearGrid(LINE_2, 9);
 832:	69 e0       	ldi	r22, 0x09	; 9
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClearGrid>
				}

				count_interrupt = 0;
 83a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
			}
			LED_voidStatus_Led_Pin(PORTB, PIN1, ON); // Yellow ON
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	50 e0       	ldi	r21, 0x00	; 0
 842:	61 e0       	ldi	r22, 0x01	; 1
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>
		LCD_voidGoTo_XY(LINE_1, 6);
		LCD_voidWriteString("Ready");
		LCD_voidGoTo_XY(LINE_2, 1);
		LCD_voidWriteString("Remain    sec");

		while (count_yellow > 0)
 84e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <count_yellow>
 852:	81 11       	cpse	r24, r1
 854:	d8 cf       	rjmp	.-80     	; 0x806 <__DATA_REGION_LENGTH__+0x6>

				count_interrupt = 0;
			}
			LED_voidStatus_Led_Pin(PORTB, PIN1, ON); // Yellow ON
		}
		LED_voidStatus_Led_Pin(PORTB, PIN1, OFF); // Yellow OFF
 856:	40 e0       	ldi	r20, 0x00	; 0
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	61 e0       	ldi	r22, 0x01	; 1
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>

		// ========== RED PHASE ==========
		count_red = 10;
 866:	8a e0       	ldi	r24, 0x0A	; 10
 868:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count_red>
		LCD_voidClearDisplay();
 86c:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidShowPattern(1, LINE_1, 5); // Stop icon
 870:	45 e0       	ldi	r20, 0x05	; 5
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_voidShowPattern>
		LCD_voidGoTo_XY(LINE_1, 7);
 87a:	67 e0       	ldi	r22, 0x07	; 7
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Stop");
 882:	82 e9       	ldi	r24, 0x92	; 146
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>
		LCD_voidGoTo_XY(LINE_2, 1);
 88a:	61 e0       	ldi	r22, 0x01	; 1
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Remain    sec");
 892:	8e e7       	ldi	r24, 0x7E	; 126
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>

		while (count_red > 0)
 89a:	24 c0       	rjmp	.+72     	; 0x8e4 <__stack+0x85>
		{
			if (count_interrupt >= 100)
 89c:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <__data_end>
 8a0:	94 36       	cpi	r25, 0x64	; 100
 8a2:	c0 f0       	brcs	.+48     	; 0x8d4 <__stack+0x75>
			{
				count_red--;
 8a4:	81 50       	subi	r24, 0x01	; 1
 8a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count_red>
				LCD_voidGoTo_XY(LINE_2, 8); 
 8aa:	68 e0       	ldi	r22, 0x08	; 8
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
				LCD_voidWriteNumber(count_red);
 8b2:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <count_red>
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_voidWriteNumber>
				
				if (count_red < 10)
 8c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count_red>
 8c4:	8a 30       	cpi	r24, 0x0A	; 10
 8c6:	20 f4       	brcc	.+8      	; 0x8d0 <__stack+0x71>
				{
					LCD_voidClearGrid(LINE_2, 9);
 8c8:	69 e0       	ldi	r22, 0x09	; 9
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClearGrid>
				}
				
				count_interrupt = 0;
 8d0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
			}
			LED_voidStatus_Led_Pin(PORTB, PIN0, ON); // Red ON
 8d4:	41 e0       	ldi	r20, 0x01	; 1
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>
		LCD_voidGoTo_XY(LINE_1, 7);
		LCD_voidWriteString("Stop");
		LCD_voidGoTo_XY(LINE_2, 1);
		LCD_voidWriteString("Remain    sec");

		while (count_red > 0)
 8e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count_red>
 8e8:	81 11       	cpse	r24, r1
 8ea:	d8 cf       	rjmp	.-80     	; 0x89c <__stack+0x3d>
				
				count_interrupt = 0;
			}
			LED_voidStatus_Led_Pin(PORTB, PIN0, ON); // Red ON
		}
		LED_voidStatus_Led_Pin(PORTB, PIN0, OFF); // Red OFF
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	70 e0       	ldi	r23, 0x00	; 0
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>

		// ========== YELLOW (READY TO GO) ==========
		count_yellow = 5;
 8fc:	85 e0       	ldi	r24, 0x05	; 5
 8fe:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <count_yellow>
		LCD_voidClearDisplay();
 902:	0e 94 01 03 	call	0x602	; 0x602 <LCD_voidClearDisplay>
		LCD_voidShowPattern(2, LINE_1, 4); // Warn icon
 906:	44 e0       	ldi	r20, 0x04	; 4
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	82 e0       	ldi	r24, 0x02	; 2
 90c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_voidShowPattern>
		LCD_voidGoTo_XY(LINE_1, 6);
 910:	66 e0       	ldi	r22, 0x06	; 6
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Ready");
 918:	8c e8       	ldi	r24, 0x8C	; 140
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>
		LCD_voidGoTo_XY(LINE_2, 1);
 920:	61 e0       	ldi	r22, 0x01	; 1
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
		LCD_voidWriteString("Remain    sec");
 928:	8e e7       	ldi	r24, 0x7E	; 126
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD_voidWriteString>

		while (count_yellow > 0)
 930:	24 c0       	rjmp	.+72     	; 0x97a <__stack+0x11b>
		{
			if (count_interrupt >= 100)
 932:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <__data_end>
 936:	94 36       	cpi	r25, 0x64	; 100
 938:	c0 f0       	brcs	.+48     	; 0x96a <__stack+0x10b>
			{
				count_yellow--;
 93a:	81 50       	subi	r24, 0x01	; 1
 93c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <count_yellow>
				LCD_voidGoTo_XY(LINE_2, 8); 
 940:	68 e0       	ldi	r22, 0x08	; 8
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_voidGoTo_XY>
				LCD_voidWriteNumber(count_yellow);
 948:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <count_yellow>
 94c:	70 e0       	ldi	r23, 0x00	; 0
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	0e 94 6f 02 	call	0x4de	; 0x4de <LCD_voidWriteNumber>

				if (count_yellow < 10)
 956:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <count_yellow>
 95a:	8a 30       	cpi	r24, 0x0A	; 10
 95c:	20 f4       	brcc	.+8      	; 0x966 <__stack+0x107>
				{
					LCD_voidClearGrid(LINE_2, 9);
 95e:	69 e0       	ldi	r22, 0x09	; 9
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <LCD_voidClearGrid>
				}

				count_interrupt = 0;
 966:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__data_end>
			}
			LED_voidStatus_Led_Pin(PORTB, PIN1, ON); // Yellow ON
 96a:	41 e0       	ldi	r20, 0x01	; 1
 96c:	50 e0       	ldi	r21, 0x00	; 0
 96e:	61 e0       	ldi	r22, 0x01	; 1
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>
		LCD_voidGoTo_XY(LINE_1, 6);
		LCD_voidWriteString("Ready");
		LCD_voidGoTo_XY(LINE_2, 1);
		LCD_voidWriteString("Remain    sec");

		while (count_yellow > 0)
 97a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <count_yellow>
 97e:	81 11       	cpse	r24, r1
 980:	d8 cf       	rjmp	.-80     	; 0x932 <__stack+0xd3>

				count_interrupt = 0;
			}
			LED_voidStatus_Led_Pin(PORTB, PIN1, ON); // Yellow ON
		}
		LED_voidStatus_Led_Pin(PORTB, PIN1, OFF); // Yellow OFF
 982:	40 e0       	ldi	r20, 0x00	; 0
 984:	50 e0       	ldi	r21, 0x00	; 0
 986:	61 e0       	ldi	r22, 0x01	; 1
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LED_voidStatus_Led_Pin>
	}
 992:	d3 ce       	rjmp	.-602    	; 0x73a <main+0x4a>

00000994 <__vector_10>:
}

// TIMER0_COMP_vect -> VECTOR(10)
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
 994:	1f 92       	push	r1
 996:	0f 92       	push	r0
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	0f 92       	push	r0
 99c:	11 24       	eor	r1, r1
 99e:	8f 93       	push	r24
	count_interrupt++;
 9a0:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__data_end>
 9a4:	8f 5f       	subi	r24, 0xFF	; 255
 9a6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__data_end>
}
 9aa:	8f 91       	pop	r24
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <Enterrupt_GlobalEnable>:
#include "Timer0_config.h"


void Enterrupt_GlobalEnable()
{
	SET_BIT(SREG_REG,GINT_BIT);
 9b6:	8f b7       	in	r24, 0x3f	; 63
 9b8:	80 68       	ori	r24, 0x80	; 128
 9ba:	8f bf       	out	0x3f, r24	; 63
 9bc:	08 95       	ret

000009be <TIMER0_voidInit>:
	// Enable T0 OVF Interrupt [PIE].
	Enterrupt_GlobalEnable();
	SET_BIT(TIMSK_REG,TIMER0_TIMSK_TOIE0);   	
	   
	#elif (MODE == CTC)                  // CTC Mode of Timer/Counter0
	CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_WGM00);
 9be:	83 b7       	in	r24, 0x33	; 51
 9c0:	8f 7b       	andi	r24, 0xBF	; 191
 9c2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_REG,TIMER0_TCCR0_WGM01);
 9c4:	83 b7       	in	r24, 0x33	; 51
 9c6:	88 60       	ori	r24, 0x08	; 8
 9c8:	83 bf       	out	0x33, r24	; 51
	// Enable T0 CTC Interrupt [PIE].
	Enterrupt_GlobalEnable();
 9ca:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Enterrupt_GlobalEnable>
	SET_BIT(TIMSK_REG,TIMER0_TIMSK_OCIE0);   
 9ce:	89 b7       	in	r24, 0x39	; 57
 9d0:	82 60       	ori	r24, 0x02	; 2
 9d2:	89 bf       	out	0x39, r24	; 57
	// load a value in OCR0 
	OCR0_REG = 78; // (10ms * 8MHz) / (1024 prescaler) - 1 ? 78
 9d4:	8e e4       	ldi	r24, 0x4E	; 78
 9d6:	8c bf       	out	0x3c, r24	; 60
	 CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
	 CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
	 SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
	 
	 #elif (PRESCALER == PRESCALER_DIVISION_BY_1024) //
	 SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS00);
 9d8:	83 b7       	in	r24, 0x33	; 51
 9da:	81 60       	ori	r24, 0x01	; 1
 9dc:	83 bf       	out	0x33, r24	; 51
	 CLEAR_BIT(TCCR0_REG,TIMER0_TCCR0_CS01);
 9de:	83 b7       	in	r24, 0x33	; 51
 9e0:	8d 7f       	andi	r24, 0xFD	; 253
 9e2:	83 bf       	out	0x33, r24	; 51
	 SET_BIT(TCCR0_REG,TIMER0_TCCR0_CS02);
 9e4:	83 b7       	in	r24, 0x33	; 51
 9e6:	84 60       	ori	r24, 0x04	; 4
 9e8:	83 bf       	out	0x33, r24	; 51
 9ea:	08 95       	ret

000009ec <__udivmodsi4>:
 9ec:	a1 e2       	ldi	r26, 0x21	; 33
 9ee:	1a 2e       	mov	r1, r26
 9f0:	aa 1b       	sub	r26, r26
 9f2:	bb 1b       	sub	r27, r27
 9f4:	fd 01       	movw	r30, r26
 9f6:	0d c0       	rjmp	.+26     	; 0xa12 <__udivmodsi4_ep>

000009f8 <__udivmodsi4_loop>:
 9f8:	aa 1f       	adc	r26, r26
 9fa:	bb 1f       	adc	r27, r27
 9fc:	ee 1f       	adc	r30, r30
 9fe:	ff 1f       	adc	r31, r31
 a00:	a2 17       	cp	r26, r18
 a02:	b3 07       	cpc	r27, r19
 a04:	e4 07       	cpc	r30, r20
 a06:	f5 07       	cpc	r31, r21
 a08:	20 f0       	brcs	.+8      	; 0xa12 <__udivmodsi4_ep>
 a0a:	a2 1b       	sub	r26, r18
 a0c:	b3 0b       	sbc	r27, r19
 a0e:	e4 0b       	sbc	r30, r20
 a10:	f5 0b       	sbc	r31, r21

00000a12 <__udivmodsi4_ep>:
 a12:	66 1f       	adc	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	1a 94       	dec	r1
 a1c:	69 f7       	brne	.-38     	; 0x9f8 <__udivmodsi4_loop>
 a1e:	60 95       	com	r22
 a20:	70 95       	com	r23
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	9b 01       	movw	r18, r22
 a28:	ac 01       	movw	r20, r24
 a2a:	bd 01       	movw	r22, r26
 a2c:	cf 01       	movw	r24, r30
 a2e:	08 95       	ret

00000a30 <_exit>:
 a30:	f8 94       	cli

00000a32 <__stop_program>:
 a32:	ff cf       	rjmp	.-2      	; 0xa32 <__stop_program>
