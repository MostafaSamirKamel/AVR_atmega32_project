
Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00000b8e  00000c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800112  00800112  00000cd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022d2  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0a  00000000  00000000  0000318a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000108b  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00004d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000781  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001711  00000000  00000000  000057ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006ebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 31       	cpi	r26, 0x12	; 18
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e1       	ldi	r26, 0x12	; 18
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 31       	cpi	r26, 0x18	; 24
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <main>
  8a:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
    else
    {
       switch(Copy_u8PullUpStatus)
       {
            case ON :  DIO_voidSetPortValue (Copy_u8PortNumber, HIGH );  break;
            case OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, LOW );   break;
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
  96:	73 c0       	rjmp	.+230    	; 0x17e <DIO_voidSetPinDirection+0xec>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
  9c:	70 c0       	rjmp	.+224    	; 0x17e <DIO_voidSetPinDirection+0xec>
  9e:	44 23       	and	r20, r20
  a0:	19 f0       	breq	.+6      	; 0xa8 <DIO_voidSetPinDirection+0x16>
  a2:	41 30       	cpi	r20, 0x01	; 1
  a4:	c9 f1       	breq	.+114    	; 0x118 <DIO_voidSetPinDirection+0x86>
  a6:	08 95       	ret
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	91 f0       	breq	.+36     	; 0xd0 <DIO_voidSetPinDirection+0x3e>
  ac:	28 f0       	brcs	.+10     	; 0xb8 <DIO_voidSetPinDirection+0x26>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	d9 f0       	breq	.+54     	; 0xe8 <DIO_voidSetPinDirection+0x56>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	29 f1       	breq	.+74     	; 0x100 <DIO_voidSetPinDirection+0x6e>
  b6:	08 95       	ret
  b8:	2a b3       	in	r18, 0x1a	; 26
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_voidSetPinDirection+0x32>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_voidSetPinDirection+0x2e>
  c8:	80 95       	com	r24
  ca:	82 23       	and	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_voidSetPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_voidSetPinDirection+0x46>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	08 95       	ret
  e8:	24 b3       	in	r18, 0x14	; 20
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_voidSetPinDirection+0x62>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_voidSetPinDirection+0x5e>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	84 bb       	out	0x14, r24	; 20
  fe:	08 95       	ret
 100:	21 b3       	in	r18, 0x11	; 17
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_voidSetPinDirection+0x7a>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_voidSetPinDirection+0x76>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	81 bb       	out	0x11, r24	; 17
 116:	08 95       	ret
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	89 f0       	breq	.+34     	; 0x13e <DIO_voidSetPinDirection+0xac>
 11c:	28 f0       	brcs	.+10     	; 0x128 <DIO_voidSetPinDirection+0x96>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	c9 f0       	breq	.+50     	; 0x154 <DIO_voidSetPinDirection+0xc2>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	11 f1       	breq	.+68     	; 0x16a <DIO_voidSetPinDirection+0xd8>
 126:	08 95       	ret
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_voidSetPinDirection+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_voidSetPinDirection+0x9e>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	08 95       	ret
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinDirection+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinDirection+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
 152:	08 95       	ret
 154:	24 b3       	in	r18, 0x14	; 20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinDirection+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinDirection+0xca>
 164:	82 2b       	or	r24, r18
 166:	84 bb       	out	0x14, r24	; 20
 168:	08 95       	ret
 16a:	21 b3       	in	r18, 0x11	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xe4>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xe0>
 17a:	82 2b       	or	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret

00000180 <DIO_voidSetPinValue>:
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	08 f0       	brcs	.+2      	; 0x186 <DIO_voidSetPinValue+0x6>
 184:	73 c0       	rjmp	.+230    	; 0x26c <DIO_voidSetPinValue+0xec>
 186:	68 30       	cpi	r22, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_voidSetPinValue+0xc>
 18a:	70 c0       	rjmp	.+224    	; 0x26c <DIO_voidSetPinValue+0xec>
 18c:	44 23       	and	r20, r20
 18e:	19 f0       	breq	.+6      	; 0x196 <DIO_voidSetPinValue+0x16>
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	c9 f1       	breq	.+114    	; 0x206 <DIO_voidSetPinValue+0x86>
 194:	08 95       	ret
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	91 f0       	breq	.+36     	; 0x1be <DIO_voidSetPinValue+0x3e>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <DIO_voidSetPinValue+0x26>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	d9 f0       	breq	.+54     	; 0x1d6 <DIO_voidSetPinValue+0x56>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	29 f1       	breq	.+74     	; 0x1ee <DIO_voidSetPinValue+0x6e>
 1a4:	08 95       	ret
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_voidSetPinValue+0x32>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_voidSetPinValue+0x2e>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret
 1be:	28 b3       	in	r18, 0x18	; 24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_voidSetPinValue+0x4a>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_voidSetPinValue+0x46>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	88 bb       	out	0x18, r24	; 24
 1d4:	08 95       	ret
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_voidSetPinValue+0x62>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_voidSetPinValue+0x5e>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
 1ee:	22 b3       	in	r18, 0x12	; 18
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinValue+0x7a>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinValue+0x76>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	82 bb       	out	0x12, r24	; 18
 204:	08 95       	ret
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	89 f0       	breq	.+34     	; 0x22c <DIO_voidSetPinValue+0xac>
 20a:	28 f0       	brcs	.+10     	; 0x216 <DIO_voidSetPinValue+0x96>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	c9 f0       	breq	.+50     	; 0x242 <DIO_voidSetPinValue+0xc2>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	11 f1       	breq	.+68     	; 0x258 <DIO_voidSetPinValue+0xd8>
 214:	08 95       	ret
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_voidSetPinValue+0xa2>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_voidSetPinValue+0x9e>
 226:	82 2b       	or	r24, r18
 228:	8b bb       	out	0x1b, r24	; 27
 22a:	08 95       	ret
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0xb8>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0xb4>
 23c:	82 2b       	or	r24, r18
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
 242:	25 b3       	in	r18, 0x15	; 21
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinValue+0xce>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinValue+0xca>
 252:	82 2b       	or	r24, r18
 254:	85 bb       	out	0x15, r24	; 21
 256:	08 95       	ret
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_voidSetPinValue+0xe4>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_voidSetPinValue+0xe0>
 268:	82 2b       	or	r24, r18
 26a:	82 bb       	out	0x12, r24	; 18
 26c:	08 95       	ret

0000026e <DIO_u8GetPinValue>:
 26e:	84 30       	cpi	r24, 0x04	; 4
 270:	08 f0       	brcs	.+2      	; 0x274 <DIO_u8GetPinValue+0x6>
 272:	5f c0       	rjmp	.+190    	; 0x332 <DIO_u8GetPinValue+0xc4>
 274:	68 30       	cpi	r22, 0x08	; 8
 276:	08 f0       	brcs	.+2      	; 0x27a <DIO_u8GetPinValue+0xc>
 278:	5c c0       	rjmp	.+184    	; 0x332 <DIO_u8GetPinValue+0xc4>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	e1 f0       	breq	.+56     	; 0x2b6 <DIO_u8GetPinValue+0x48>
 27e:	30 f0       	brcs	.+12     	; 0x28c <DIO_u8GetPinValue+0x1e>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	71 f1       	breq	.+92     	; 0x2e0 <DIO_u8GetPinValue+0x72>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	09 f4       	brne	.+2      	; 0x28a <DIO_u8GetPinValue+0x1c>
 288:	40 c0       	rjmp	.+128    	; 0x30a <DIO_u8GetPinValue+0x9c>
 28a:	53 c0       	rjmp	.+166    	; 0x332 <DIO_u8GetPinValue+0xc4>
 28c:	49 b3       	in	r20, 0x19	; 25
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 01       	movw	r18, r24
 294:	06 2e       	mov	r0, r22
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_u8GetPinValue+0x2e>
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_u8GetPinValue+0x2a>
 2a0:	84 2f       	mov	r24, r20
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	82 23       	and	r24, r18
 2a6:	93 23       	and	r25, r19
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_u8GetPinValue+0x40>
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_u8GetPinValue+0x3c>
 2b2:	98 2f       	mov	r25, r24
 2b4:	3e c0       	rjmp	.+124    	; 0x332 <DIO_u8GetPinValue+0xc4>
 2b6:	46 b3       	in	r20, 0x16	; 22
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	9c 01       	movw	r18, r24
 2be:	06 2e       	mov	r0, r22
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_u8GetPinValue+0x58>
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_u8GetPinValue+0x54>
 2ca:	84 2f       	mov	r24, r20
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8GetPinValue+0x6a>
 2d4:	96 95       	lsr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8GetPinValue+0x66>
 2dc:	98 2f       	mov	r25, r24
 2de:	29 c0       	rjmp	.+82     	; 0x332 <DIO_u8GetPinValue+0xc4>
 2e0:	43 b3       	in	r20, 0x13	; 19
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	9c 01       	movw	r18, r24
 2e8:	06 2e       	mov	r0, r22
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8GetPinValue+0x82>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8GetPinValue+0x7e>
 2f4:	84 2f       	mov	r24, r20
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	82 23       	and	r24, r18
 2fa:	93 23       	and	r25, r19
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_u8GetPinValue+0x94>
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_u8GetPinValue+0x90>
 306:	98 2f       	mov	r25, r24
 308:	14 c0       	rjmp	.+40     	; 0x332 <DIO_u8GetPinValue+0xc4>
 30a:	40 b3       	in	r20, 0x10	; 16
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	9c 01       	movw	r18, r24
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8GetPinValue+0xac>
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8GetPinValue+0xa8>
 31e:	84 2f       	mov	r24, r20
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	82 23       	and	r24, r18
 324:	93 23       	and	r25, r19
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8GetPinValue+0xbe>
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8GetPinValue+0xba>
 330:	98 2f       	mov	r25, r24
 332:	89 2f       	mov	r24, r25
 334:	08 95       	ret

00000336 <DIO_voidConfig_Pull_Up_Pin>:
 336:	84 30       	cpi	r24, 0x04	; 4
 338:	60 f4       	brcc	.+24     	; 0x352 <DIO_voidConfig_Pull_Up_Pin+0x1c>
 33a:	68 30       	cpi	r22, 0x08	; 8
 33c:	50 f4       	brcc	.+20     	; 0x352 <DIO_voidConfig_Pull_Up_Pin+0x1c>
 33e:	44 23       	and	r20, r20
 340:	29 f0       	breq	.+10     	; 0x34c <DIO_voidConfig_Pull_Up_Pin+0x16>
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	31 f4       	brne	.+12     	; 0x352 <DIO_voidConfig_Pull_Up_Pin+0x1c>
 346:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 34a:	08 95       	ret
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 352:	08 95       	ret

00000354 <DIO_voidSetNibbleDirection>:
    }    
}
/*=================================================================================================*/
/*=================================================================================================*/

void DIO_voidSetNibbleDirection (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Direction) {
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 358:	84 30       	cpi	r24, 0x04	; 4
 35a:	58 f5       	brcc	.+86     	; 0x3b2 <DIO_voidSetNibbleDirection+0x5e>
 35c:	d4 2f       	mov	r29, r20
 35e:	c8 2f       	mov	r28, r24
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 360:	66 23       	and	r22, r22
 362:	a9 f0       	breq	.+42     	; 0x38e <DIO_voidSetNibbleDirection+0x3a>
 364:	61 30       	cpi	r22, 0x01	; 1
 366:	29 f5       	brne	.+74     	; 0x3b2 <DIO_voidSetNibbleDirection+0x5e>
		{
			case LOW_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,0,Copy_u8Direction);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,1,Copy_u8Direction);
 36e:	4d 2f       	mov	r20, r29
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,2,Copy_u8Direction);
 378:	4d 2f       	mov	r20, r29
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	8c 2f       	mov	r24, r28
 37e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							 DIO_voidSetPinDirection(Copy_u8PortNumber,3,Copy_u8Direction);
 382:	4d 2f       	mov	r20, r29
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	8c 2f       	mov	r24, r28
 388:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
			break;
 38c:	12 c0       	rjmp	.+36     	; 0x3b2 <DIO_voidSetNibbleDirection+0x5e>
			case HIGH_NIBBLE: DIO_voidSetPinDirection(Copy_u8PortNumber,4,Copy_u8Direction);
 38e:	64 e0       	ldi	r22, 0x04	; 4
 390:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,5,Copy_u8Direction);
 394:	4d 2f       	mov	r20, r29
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	8c 2f       	mov	r24, r28
 39a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,6,Copy_u8Direction);
 39e:	4d 2f       	mov	r20, r29
 3a0:	66 e0       	ldi	r22, 0x06	; 6
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
							  DIO_voidSetPinDirection(Copy_u8PortNumber,7,Copy_u8Direction);
 3a8:	4d 2f       	mov	r20, r29
 3aa:	67 e0       	ldi	r22, 0x07	; 7
 3ac:	8c 2f       	mov	r24, r28
 3ae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
			break;
			default:
			break;
		}
	}
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <DIO_voidSetNibbleValue>:


void DIO_voidSetNibbleValue (u8 Copy_u8PortNumber, u8 Copy_u8Nibble, u8 Copy_u8Value) {
	/* Input Validation */
	if (Copy_u8PortNumber > PORTD) {
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	08 f0       	brcs	.+2      	; 0x3be <DIO_voidSetNibbleValue+0x6>
 3bc:	4f c0       	rjmp	.+158    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		// Invalid port number, do nothing
		return;
	}
	else
	{
		switch(Copy_u8Nibble)
 3be:	66 23       	and	r22, r22
 3c0:	41 f1       	breq	.+80     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3c2:	61 30       	cpi	r22, 0x01	; 1
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_voidSetNibbleValue+0x10>
 3c6:	4a c0       	rjmp	.+148    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			case LOW_NIBBLE:
					Copy_u8Value&=0x0f;
 3c8:	4f 70       	andi	r20, 0x0F	; 15
					switch(Copy_u8PortNumber)
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	69 f0       	breq	.+26     	; 0x3e8 <DIO_voidSetNibbleValue+0x30>
 3ce:	28 f0       	brcs	.+10     	; 0x3da <DIO_voidSetNibbleValue+0x22>
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	89 f0       	breq	.+34     	; 0x3f6 <DIO_voidSetNibbleValue+0x3e>
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	b1 f0       	breq	.+44     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3d8:	08 95       	ret
					{
						case PORTA:  PORTA_REG&=0xf0;
 3da:	8b b3       	in	r24, 0x1b	; 27
 3dc:	80 7f       	andi	r24, 0xF0	; 240
 3de:	8b bb       	out	0x1b, r24	; 27
									PORTA_REG|=Copy_u8Value;
 3e0:	8b b3       	in	r24, 0x1b	; 27
 3e2:	48 2b       	or	r20, r24
 3e4:	4b bb       	out	0x1b, r20	; 27
									break; 
 3e6:	08 95       	ret
						case PORTB:	PORTB_REG&=0xf0;
 3e8:	88 b3       	in	r24, 0x18	; 24
 3ea:	80 7f       	andi	r24, 0xF0	; 240
 3ec:	88 bb       	out	0x18, r24	; 24
									PORTB_REG|=Copy_u8Value;
 3ee:	88 b3       	in	r24, 0x18	; 24
 3f0:	48 2b       	or	r20, r24
 3f2:	48 bb       	out	0x18, r20	; 24
									break;
 3f4:	08 95       	ret
						case PORTC:	PORTC_REG&=0xf0;
 3f6:	85 b3       	in	r24, 0x15	; 21
 3f8:	80 7f       	andi	r24, 0xF0	; 240
 3fa:	85 bb       	out	0x15, r24	; 21
									PORTC_REG|=Copy_u8Value;
 3fc:	85 b3       	in	r24, 0x15	; 21
 3fe:	48 2b       	or	r20, r24
 400:	45 bb       	out	0x15, r20	; 21
									break;
 402:	08 95       	ret
						case PORTD:	PORTD_REG&=0xf0;
 404:	82 b3       	in	r24, 0x12	; 18
 406:	80 7f       	andi	r24, 0xF0	; 240
 408:	82 bb       	out	0x12, r24	; 18
									PORTD_REG|=Copy_u8Value;
 40a:	82 b3       	in	r24, 0x12	; 18
 40c:	48 2b       	or	r20, r24
 40e:	42 bb       	out	0x12, r20	; 18
									break;
 410:	08 95       	ret
					}
			break;
			case HIGH_NIBBLE:
			Copy_u8Value <<= 4; // Shift left by 4 to align it with high nibble
 412:	42 95       	swap	r20
 414:	40 7f       	andi	r20, 0xF0	; 240
			switch(Copy_u8PortNumber)
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	69 f0       	breq	.+26     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 41a:	28 f0       	brcs	.+10     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	89 f0       	breq	.+34     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	b1 f0       	breq	.+44     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 424:	08 95       	ret
			{
				case PORTA:  PORTA_REG &= 0x0F;
 426:	8b b3       	in	r24, 0x1b	; 27
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	8b bb       	out	0x1b, r24	; 27
				PORTA_REG |= Copy_u8Value;
 42c:	8b b3       	in	r24, 0x1b	; 27
 42e:	48 2b       	or	r20, r24
 430:	4b bb       	out	0x1b, r20	; 27
				break;
 432:	08 95       	ret
				case PORTB:  PORTB_REG &= 0x0F;
 434:	88 b3       	in	r24, 0x18	; 24
 436:	8f 70       	andi	r24, 0x0F	; 15
 438:	88 bb       	out	0x18, r24	; 24
				PORTB_REG |= Copy_u8Value;
 43a:	88 b3       	in	r24, 0x18	; 24
 43c:	48 2b       	or	r20, r24
 43e:	48 bb       	out	0x18, r20	; 24
				break;
 440:	08 95       	ret
				case PORTC:  PORTC_REG &= 0x0F;
 442:	85 b3       	in	r24, 0x15	; 21
 444:	8f 70       	andi	r24, 0x0F	; 15
 446:	85 bb       	out	0x15, r24	; 21
				PORTC_REG |= Copy_u8Value;
 448:	85 b3       	in	r24, 0x15	; 21
 44a:	48 2b       	or	r20, r24
 44c:	45 bb       	out	0x15, r20	; 21
				break;
 44e:	08 95       	ret
				case PORTD:  PORTD_REG &= 0x0F;
 450:	82 b3       	in	r24, 0x12	; 18
 452:	8f 70       	andi	r24, 0x0F	; 15
 454:	82 bb       	out	0x12, r24	; 18
				PORTD_REG |= Copy_u8Value;
 456:	82 b3       	in	r24, 0x12	; 18
 458:	48 2b       	or	r20, r24
 45a:	42 bb       	out	0x12, r20	; 18
 45c:	08 95       	ret

0000045e <EEPROM_u8Read_eeprom>:
#include "EEPROM_Private.h"

u8 EEPROM_u8Read_eeprom(u16 Copy_u16Address)
{
	/* wait for completion of  write operation */
	while(GET_BIT(EECR_REG,EEWE_BIT)==1);
 45e:	e1 99       	sbic	0x1c, 1	; 28
 460:	fe cf       	rjmp	.-4      	; 0x45e <EEPROM_u8Read_eeprom>
	
	/*set up address register*/
	EEARL_REG = (u8)Copy_u16Address;
 462:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (u8)(Copy_u16Address>>8);
 464:	9f bb       	out	0x1f, r25	; 31
	
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR_REG,EERE_BIT);
 466:	8c b3       	in	r24, 0x1c	; 28
 468:	81 60       	ori	r24, 0x01	; 1
 46a:	8c bb       	out	0x1c, r24	; 28
	
	/*return data from data register*/
	return EEDR_REG ;
 46c:	8d b3       	in	r24, 0x1d	; 29

}
 46e:	08 95       	ret

00000470 <EEPROM_voidWrite_eeprom>:

void EEPROM_voidWrite_eeprom(u16 Copy_u16Address, u8 Copy_u16DATA)
{
	
	/*set up address register*/
	EEARL_REG = (u8)Copy_u16Address;
 470:	8e bb       	out	0x1e, r24	; 30
	EEARH_REG = (u8)(Copy_u16Address>>8);
 472:	9f bb       	out	0x1f, r25	; 31
	
	
	/*set up data register*/
	EEDR_REG = Copy_u16DATA ;
 474:	6d bb       	out	0x1d, r22	; 29
	
	
	/*write logical one to EEMWE*/
	SET_BIT(EECR_REG,EEMWE_BIT);
 476:	8c b3       	in	r24, 0x1c	; 28
 478:	84 60       	ori	r24, 0x04	; 4
 47a:	8c bb       	out	0x1c, r24	; 28
	
	
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR_REG,EEWE_BIT);
 47c:	8c b3       	in	r24, 0x1c	; 28
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	8c bb       	out	0x1c, r24	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	84 e3       	ldi	r24, 0x34	; 52
 486:	9c e0       	ldi	r25, 0x0C	; 12
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <EEPROM_voidWrite_eeprom+0x18>
 490:	00 c0       	rjmp	.+0      	; 0x492 <EEPROM_voidWrite_eeprom+0x22>
 492:	00 00       	nop
	
	_delay_ms(500);
	
	
	/* wait for completion of  write operation */
	while(GET_BIT(EECR_REG,EEWE_BIT)==1);
 494:	e1 99       	sbic	0x1c, 1	; 28
 496:	fe cf       	rjmp	.-4      	; 0x494 <EEPROM_voidWrite_eeprom+0x24>

 498:	08 95       	ret

0000049a <KPAD_voidInit>:
#include "KeyPad_Config.h"

void KPAD_voidInit ()
{
	// Set Rows (Output)
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_R0_PIN,OUTPUT);
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	63 e0       	ldi	r22, 0x03	; 3
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_R1_PIN,OUTPUT);
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	64 e0       	ldi	r22, 0x04	; 4
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_R2_PIN,OUTPUT);
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	65 e0       	ldi	r22, 0x05	; 5
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_R3_PIN,OUTPUT);
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	66 e0       	ldi	r22, 0x06	; 6
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	
	// Set Columns (Input with Pull-Up)
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_C0_PIN,INPUT);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_C1_PIN,INPUT);
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPAD_PORT,KPAD_C2_PIN,INPUT);
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	
	//Pull-Up
	DIO_voidConfig_Pull_Up_Pin(KPAD_PORT,KPAD_C0_PIN,ON);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_voidConfig_Pull_Up_Pin>
	DIO_voidConfig_Pull_Up_Pin(KPAD_PORT,KPAD_C1_PIN,ON);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_voidConfig_Pull_Up_Pin>
	DIO_voidConfig_Pull_Up_Pin(KPAD_PORT,KPAD_C2_PIN,ON);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	62 e0       	ldi	r22, 0x02	; 2
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_voidConfig_Pull_Up_Pin>
 4fe:	08 95       	ret

00000500 <KPAD_u8GetPressedKey>:
}

u8 KPAD_u8GetPressedKey ()
{
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	2c 97       	sbiw	r28, 0x0c	; 12
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
	u8 arr_Key[KPAD_ROWS_NUM][KPAD_COLUMNS_NUM] = {
 51c:	8c e0       	ldi	r24, 0x0C	; 12
 51e:	e0 e6       	ldi	r30, 0x60	; 96
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	de 01       	movw	r26, r28
 524:	11 96       	adiw	r26, 0x01	; 1
 526:	01 90       	ld	r0, Z+
 528:	0d 92       	st	X+, r0
 52a:	8a 95       	dec	r24
 52c:	e1 f7       	brne	.-8      	; 0x526 <KPAD_u8GetPressedKey+0x26>
		{'*', '0', '#'}
	};
		
	u8 Rows_Cont, Columns_Cont;
	u8 Local_CheckPress;
	u8 Local_ReturnValue = NotPressed;
 52e:	ee 24       	eor	r14, r14
 530:	ea 94       	dec	r14

	
	for (Rows_Cont = 0; Rows_Cont < KPAD_ROWS_NUM; Rows_Cont++)
 532:	f1 2c       	mov	r15, r1
 534:	3a c0       	rjmp	.+116    	; 0x5aa <KPAD_u8GetPressedKey+0xaa>
	{
		DIO_voidSetPinValue(KPAD_PORT,KPAD_R0_PIN,HIGH);
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(KPAD_PORT,KPAD_R1_PIN,HIGH);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	64 e0       	ldi	r22, 0x04	; 4
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(KPAD_PORT,KPAD_R2_PIN,HIGH);
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	65 e0       	ldi	r22, 0x05	; 5
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(KPAD_PORT,KPAD_R3_PIN,HIGH);
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	66 e0       	ldi	r22, 0x06	; 6
 558:	82 e0       	ldi	r24, 0x02	; 2
 55a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		
		DIO_voidSetPinValue(KPAD_PORT, Rows_Cont+3, LOW);
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	63 e0       	ldi	r22, 0x03	; 3
 562:	6f 0d       	add	r22, r15
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		
		for (Columns_Cont = 0; Columns_Cont < KPAD_COLUMNS_NUM; Columns_Cont++)
 56a:	10 e0       	ldi	r17, 0x00	; 0
 56c:	19 c0       	rjmp	.+50     	; 0x5a0 <KPAD_u8GetPressedKey+0xa0>
		{
			Local_CheckPress = DIO_u8GetPinValue(KPAD_PORT, Columns_Cont);
 56e:	61 2f       	mov	r22, r17
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8GetPinValue>
 576:	08 2f       	mov	r16, r24
			
			if (Local_CheckPress == 0)
 578:	81 11       	cpse	r24, r1
 57a:	11 c0       	rjmp	.+34     	; 0x59e <KPAD_u8GetPressedKey+0x9e>
			{
				Local_ReturnValue = arr_Key[Rows_Cont][Columns_Cont];
 57c:	8f 2d       	mov	r24, r15
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	e8 0f       	add	r30, r24
 588:	f9 1f       	adc	r31, r25
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	8c 0f       	add	r24, r28
 590:	9d 1f       	adc	r25, r29
 592:	e8 0f       	add	r30, r24
 594:	f9 1f       	adc	r31, r25
 596:	e1 0f       	add	r30, r17
 598:	f1 1d       	adc	r31, r1
 59a:	e0 80       	ld	r14, Z
				break;
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <KPAD_u8GetPressedKey+0xa4>
		DIO_voidSetPinValue(KPAD_PORT,KPAD_R2_PIN,HIGH);
		DIO_voidSetPinValue(KPAD_PORT,KPAD_R3_PIN,HIGH);
		
		DIO_voidSetPinValue(KPAD_PORT, Rows_Cont+3, LOW);
		
		for (Columns_Cont = 0; Columns_Cont < KPAD_COLUMNS_NUM; Columns_Cont++)
 59e:	1f 5f       	subi	r17, 0xFF	; 255
 5a0:	13 30       	cpi	r17, 0x03	; 3
 5a2:	28 f3       	brcs	.-54     	; 0x56e <KPAD_u8GetPressedKey+0x6e>
			{
				Local_ReturnValue = arr_Key[Rows_Cont][Columns_Cont];
				break;
			}
		}
		if (Local_CheckPress == 0)
 5a4:	00 23       	and	r16, r16
 5a6:	21 f0       	breq	.+8      	; 0x5b0 <KPAD_u8GetPressedKey+0xb0>
	u8 Rows_Cont, Columns_Cont;
	u8 Local_CheckPress;
	u8 Local_ReturnValue = NotPressed;

	
	for (Rows_Cont = 0; Rows_Cont < KPAD_ROWS_NUM; Rows_Cont++)
 5a8:	f3 94       	inc	r15
 5aa:	93 e0       	ldi	r25, 0x03	; 3
 5ac:	9f 15       	cp	r25, r15
 5ae:	18 f6       	brcc	.-122    	; 0x536 <KPAD_u8GetPressedKey+0x36>
			break;
		}
	}
	
	return Local_ReturnValue;
}
 5b0:	8e 2d       	mov	r24, r14
 5b2:	2c 96       	adiw	r28, 0x0c	; 12
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	f8 94       	cli
 5b8:	de bf       	out	0x3e, r29	; 62
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	cd bf       	out	0x3d, r28	; 61
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	ff 90       	pop	r15
 5c8:	ef 90       	pop	r14
 5ca:	08 95       	ret

000005cc <LCD_voidSendCommand>:
/*****************************************************************************************/
void LCD_voidShowPattern(u8 Copy_u8Pattern, u8 Copy_u8Line, u8 Copy_u8Position)
{
	LCD_voidGoTo_XY(Copy_u8Line, Copy_u8Position); //  set DDRAM Address
	LCD_voidWriteChar(Copy_u8Pattern);
}
 5cc:	cf 93       	push	r28
 5ce:	c8 2f       	mov	r28, r24
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	66 e0       	ldi	r22, 0x06	; 6
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	65 e0       	ldi	r22, 0x05	; 5
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 5e4:	4c 2f       	mov	r20, r28
 5e6:	42 95       	swap	r20
 5e8:	4f 70       	andi	r20, 0x0F	; 15
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetNibbleValue>
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	64 e0       	ldi	r22, 0x04	; 4
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 5fc:	83 ef       	ldi	r24, 0xF3	; 243
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <LCD_voidSendCommand+0x34>
 604:	00 c0       	rjmp	.+0      	; 0x606 <LCD_voidSendCommand+0x3a>
 606:	00 00       	nop
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	64 e0       	ldi	r22, 0x04	; 4
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 612:	83 ef       	ldi	r24, 0xF3	; 243
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <LCD_voidSendCommand+0x4a>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <LCD_voidSendCommand+0x50>
 61c:	00 00       	nop
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	66 e0       	ldi	r22, 0x06	; 6
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	65 e0       	ldi	r22, 0x05	; 5
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 632:	4c 2f       	mov	r20, r28
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetNibbleValue>
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	64 e0       	ldi	r22, 0x04	; 4
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 646:	83 ef       	ldi	r24, 0xF3	; 243
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <LCD_voidSendCommand+0x7e>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <LCD_voidSendCommand+0x84>
 650:	00 00       	nop
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	64 e0       	ldi	r22, 0x04	; 4
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 65c:	83 ef       	ldi	r24, 0xF3	; 243
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <LCD_voidSendCommand+0x94>
 664:	00 c0       	rjmp	.+0      	; 0x666 <LCD_voidSendCommand+0x9a>
 666:	00 00       	nop
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <LCD_voidWriteChar>:
 66c:	cf 93       	push	r28
 66e:	c8 2f       	mov	r28, r24
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	66 e0       	ldi	r22, 0x06	; 6
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	65 e0       	ldi	r22, 0x05	; 5
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 684:	4c 2f       	mov	r20, r28
 686:	42 95       	swap	r20
 688:	4f 70       	andi	r20, 0x0F	; 15
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetNibbleValue>
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	64 e0       	ldi	r22, 0x04	; 4
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 69c:	83 ef       	ldi	r24, 0xF3	; 243
 69e:	91 e0       	ldi	r25, 0x01	; 1
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCD_voidWriteChar+0x34>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <LCD_voidWriteChar+0x3a>
 6a6:	00 00       	nop
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	64 e0       	ldi	r22, 0x04	; 4
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 6b2:	83 ef       	ldi	r24, 0xF3	; 243
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_voidWriteChar+0x4a>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_voidWriteChar+0x50>
 6bc:	00 00       	nop
 6be:	41 e0       	ldi	r20, 0x01	; 1
 6c0:	66 e0       	ldi	r22, 0x06	; 6
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 6c8:	40 e0       	ldi	r20, 0x00	; 0
 6ca:	65 e0       	ldi	r22, 0x05	; 5
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 6d2:	4c 2f       	mov	r20, r28
 6d4:	61 e0       	ldi	r22, 0x01	; 1
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <DIO_voidSetNibbleValue>
 6dc:	41 e0       	ldi	r20, 0x01	; 1
 6de:	64 e0       	ldi	r22, 0x04	; 4
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 6e6:	83 ef       	ldi	r24, 0xF3	; 243
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <LCD_voidWriteChar+0x7e>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <LCD_voidWriteChar+0x84>
 6f0:	00 00       	nop
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	64 e0       	ldi	r22, 0x04	; 4
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 6fc:	83 ef       	ldi	r24, 0xF3	; 243
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <LCD_voidWriteChar+0x94>
 704:	00 c0       	rjmp	.+0      	; 0x706 <LCD_voidWriteChar+0x9a>
 706:	00 00       	nop
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <LCD_voidWriteString>:
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	cf 93       	push	r28
 712:	8c 01       	movw	r16, r24
 714:	c0 e0       	ldi	r28, 0x00	; 0
 716:	03 c0       	rjmp	.+6      	; 0x71e <LCD_voidWriteString+0x12>
 718:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_voidWriteChar>
 71c:	cf 5f       	subi	r28, 0xFF	; 255
 71e:	f8 01       	movw	r30, r16
 720:	ec 0f       	add	r30, r28
 722:	f1 1d       	adc	r31, r1
 724:	80 81       	ld	r24, Z
 726:	81 11       	cpse	r24, r1
 728:	f7 cf       	rjmp	.-18     	; 0x718 <LCD_voidWriteString+0xc>
 72a:	cf 91       	pop	r28
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	08 95       	ret

00000732 <LCD_voidWriteNumber>:
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
 73c:	2a 97       	sbiw	r28, 0x0a	; 10
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	f8 94       	cli
 742:	de bf       	out	0x3e, r29	; 62
 744:	0f be       	out	0x3f, r0	; 63
 746:	cd bf       	out	0x3d, r28	; 61
 748:	61 15       	cp	r22, r1
 74a:	71 05       	cpc	r23, r1
 74c:	81 05       	cpc	r24, r1
 74e:	91 05       	cpc	r25, r1
 750:	c1 f4       	brne	.+48     	; 0x782 <LCD_voidWriteNumber+0x50>
 752:	80 e3       	ldi	r24, 0x30	; 48
 754:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_voidWriteChar>
 758:	2a c0       	rjmp	.+84     	; 0x7ae <LCD_voidWriteNumber+0x7c>
 75a:	2a e0       	ldi	r18, 0x0A	; 10
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	0e 94 a3 05 	call	0xb46	; 0xb46 <__udivmodsi4>
 766:	e1 e0       	ldi	r30, 0x01	; 1
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	ec 0f       	add	r30, r28
 76c:	fd 1f       	adc	r31, r29
 76e:	e1 0f       	add	r30, r17
 770:	f1 1d       	adc	r31, r1
 772:	60 5d       	subi	r22, 0xD0	; 208
 774:	60 83       	st	Z, r22
 776:	62 2f       	mov	r22, r18
 778:	73 2f       	mov	r23, r19
 77a:	84 2f       	mov	r24, r20
 77c:	95 2f       	mov	r25, r21
 77e:	1f 5f       	subi	r17, 0xFF	; 255
 780:	01 c0       	rjmp	.+2      	; 0x784 <LCD_voidWriteNumber+0x52>
 782:	10 e0       	ldi	r17, 0x00	; 0
 784:	61 15       	cp	r22, r1
 786:	71 05       	cpc	r23, r1
 788:	81 05       	cpc	r24, r1
 78a:	91 05       	cpc	r25, r1
 78c:	31 f7       	brne	.-52     	; 0x75a <LCD_voidWriteNumber+0x28>
 78e:	11 50       	subi	r17, 0x01	; 1
 790:	0c c0       	rjmp	.+24     	; 0x7aa <LCD_voidWriteNumber+0x78>
 792:	e1 e0       	ldi	r30, 0x01	; 1
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	ec 0f       	add	r30, r28
 798:	fd 1f       	adc	r31, r29
 79a:	e1 0f       	add	r30, r17
 79c:	f1 1d       	adc	r31, r1
 79e:	17 fd       	sbrc	r17, 7
 7a0:	fa 95       	dec	r31
 7a2:	80 81       	ld	r24, Z
 7a4:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_voidWriteChar>
 7a8:	11 50       	subi	r17, 0x01	; 1
 7aa:	11 23       	and	r17, r17
 7ac:	94 f7       	brge	.-28     	; 0x792 <LCD_voidWriteNumber+0x60>
 7ae:	2a 96       	adiw	r28, 0x0a	; 10
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	f8 94       	cli
 7b4:	de bf       	out	0x3e, r29	; 62
 7b6:	0f be       	out	0x3f, r0	; 63
 7b8:	cd bf       	out	0x3d, r28	; 61
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	08 95       	ret

000007c2 <LCD_voidGoTo_XY>:
 7c2:	82 30       	cpi	r24, 0x02	; 2
 7c4:	e0 f4       	brcc	.+56     	; 0x7fe <LCD_voidGoTo_XY+0x3c>
 7c6:	60 31       	cpi	r22, 0x10	; 16
 7c8:	d0 f4       	brcc	.+52     	; 0x7fe <LCD_voidGoTo_XY+0x3c>
 7ca:	88 23       	and	r24, r24
 7cc:	19 f0       	breq	.+6      	; 0x7d4 <LCD_voidGoTo_XY+0x12>
 7ce:	81 30       	cpi	r24, 0x01	; 1
 7d0:	61 f0       	breq	.+24     	; 0x7ea <LCD_voidGoTo_XY+0x28>
 7d2:	08 95       	ret
 7d4:	80 e8       	ldi	r24, 0x80	; 128
 7d6:	86 0f       	add	r24, r22
 7d8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 7dc:	87 ea       	ldi	r24, 0xA7	; 167
 7de:	91 e6       	ldi	r25, 0x61	; 97
 7e0:	01 97       	sbiw	r24, 0x01	; 1
 7e2:	f1 f7       	brne	.-4      	; 0x7e0 <LCD_voidGoTo_XY+0x1e>
 7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <LCD_voidGoTo_XY+0x24>
 7e6:	00 00       	nop
 7e8:	08 95       	ret
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	86 0f       	add	r24, r22
 7ee:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 7f2:	87 ea       	ldi	r24, 0xA7	; 167
 7f4:	91 e6       	ldi	r25, 0x61	; 97
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <LCD_voidGoTo_XY+0x34>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <LCD_voidGoTo_XY+0x3a>
 7fc:	00 00       	nop
 7fe:	08 95       	ret

00000800 <LCD_voidClearDisplay>:
/* Description : Clears the entire LCD display                                           */
/* Return : void                                                                         */
/*****************************************************************************************/
void LCD_voidClearDisplay(void)
{
	LCD_voidSendCommand(CLEAR_DIS);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 806:	83 ef       	ldi	r24, 0xF3	; 243
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	01 97       	sbiw	r24, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <LCD_voidClearDisplay+0xa>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <LCD_voidClearDisplay+0x10>
 810:	00 00       	nop
	_delay_ms(2); 
	LCD_voidSendCommand(RETURN_HOME);  // cursor returns to position 0
 812:	82 e0       	ldi	r24, 0x02	; 2
 814:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 818:	83 ef       	ldi	r24, 0xF3	; 243
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	01 97       	sbiw	r24, 0x01	; 1
 81e:	f1 f7       	brne	.-4      	; 0x81c <LCD_voidClearDisplay+0x1c>
 820:	00 c0       	rjmp	.+0      	; 0x822 <LCD_voidClearDisplay+0x22>
 822:	00 00       	nop
 824:	08 95       	ret

00000826 <LCD_voidInit>:
	LCD_voidSendCommand(ENTRY_MODE_INCREASE_NO_SHIFT);
	_delay_ms(1);
	
	#elif defined LCD_4BIT_LOW_NIBBLE
	
	DIO_voidSetNibbleDirection(LCD_DATA_PORT,LOW_NIBBLE,OUTPUT);
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidSetNibbleDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RS_PIN, OUTPUT);
 830:	41 e0       	ldi	r20, 0x01	; 1
 832:	66 e0       	ldi	r22, 0x06	; 6
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, RW_PIN, OUTPUT);
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	65 e0       	ldi	r22, 0x05	; 5
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, E_PIN, OUTPUT);
 844:	41 e0       	ldi	r20, 0x01	; 1
 846:	64 e0       	ldi	r22, 0x04	; 4
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 84e:	8d e2       	ldi	r24, 0x2D	; 45
 850:	92 e2       	ldi	r25, 0x22	; 34
 852:	01 97       	sbiw	r24, 0x01	; 1
 854:	f1 f7       	brne	.-4      	; 0x852 <LCD_voidInit+0x2c>
 856:	00 c0       	rjmp	.+0      	; 0x858 <LCD_voidInit+0x32>
 858:	00 00       	nop
	
	_delay_ms(35);

	
	/* Function Set Command */
	LCD_voidSendCommand(0x02);
 85a:	82 e0       	ldi	r24, 0x02	; 2
 85c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 860:	89 ef       	ldi	r24, 0xF9	; 249
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
 868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
 86a:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendCommand(FS_4BIT_2LINES_5x7);
 86c:	88 e2       	ldi	r24, 0x28	; 40
 86e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 872:	89 ef       	ldi	r24, 0xF9	; 249
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
 87c:	00 00       	nop
	_delay_ms(1);


	/* Display ON, Cursor ON */
	LCD_voidSendCommand(DIS_ON_CURSOR_OFF);
 87e:	8c e0       	ldi	r24, 0x0C	; 12
 880:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 884:	89 ef       	ldi	r24, 0xF9	; 249
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	01 97       	sbiw	r24, 0x01	; 1
 88a:	f1 f7       	brne	.-4      	; 0x888 <__stack+0x29>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <__stack+0x2f>
 88e:	00 00       	nop
	_delay_ms(1);

	/* Clear Display and Reset Cursor */
	LCD_voidClearDisplay();  // Clears display & ensures cursor at (0,0)
 890:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
 894:	83 ef       	ldi	r24, 0xF3	; 243
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <__stack+0x39>
 89c:	00 c0       	rjmp	.+0      	; 0x89e <__stack+0x3f>
 89e:	00 00       	nop
	_delay_ms(2);

	/* Entry Mode Set */
	LCD_voidSendCommand(ENTRY_MODE_INCREASE_NO_SHIFT);
 8a0:	86 e0       	ldi	r24, 0x06	; 6
 8a2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <LCD_voidSendCommand>
 8a6:	89 ef       	ldi	r24, 0xF9	; 249
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <__stack+0x4b>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <__stack+0x51>
 8b0:	00 00       	nop
 8b2:	08 95       	ret

000008b4 <main>:
#define  MAX_TRIES  2
#define  PassWordCont   6  
u8 Password_arr[6];

int main(void)
{
 8b4:	ff 92       	push	r15
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
    
    LCD_voidInit();
 8be:	0e 94 13 04 	call	0x826	; 0x826 <LCD_voidInit>
    KPAD_voidInit();
 8c2:	0e 94 4d 02 	call	0x49a	; 0x49a <KPAD_voidInit>
	
    LCD_voidWriteString("Safe Project");
 8c6:	8c e6       	ldi	r24, 0x6C	; 108
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
    LCD_voidGoTo_XY(LINE_2,0);
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
    LCD_voidWriteString("Eng/MostafaSamir");
 8d6:	89 e7       	ldi	r24, 0x79	; 121
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
 8de:	2f ef       	ldi	r18, 0xFF	; 255
 8e0:	83 ed       	ldi	r24, 0xD3	; 211
 8e2:	90 e3       	ldi	r25, 0x30	; 48
 8e4:	21 50       	subi	r18, 0x01	; 1
 8e6:	80 40       	sbci	r24, 0x00	; 0
 8e8:	90 40       	sbci	r25, 0x00	; 0
 8ea:	e1 f7       	brne	.-8      	; 0x8e4 <main+0x30>
 8ec:	00 c0       	rjmp	.+0      	; 0x8ee <main+0x3a>
 8ee:	00 00       	nop
    _delay_ms(2000);
    LCD_voidClearDisplay();
 8f0:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
    u8 PressValue = NotPressed;
	u8 opened = FALSE ; 
	u8 tries = MAX_TRIES ;
	u8 I ;
	
	if (EEPROM_u8Read_eeprom(L0) == Default )
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 2f 02 	call	0x45e	; 0x45e <EEPROM_u8Read_eeprom>
 8fc:	8f 3f       	cpi	r24, 0xFF	; 255
 8fe:	91 05       	cpc	r25, r1
 900:	09 f0       	breq	.+2      	; 0x904 <main+0x50>
 902:	47 c0       	rjmp	.+142    	; 0x992 <main+0xde>
	{
		LCD_voidWriteString("SET NEW PASSWORD");
 904:	8a e8       	ldi	r24, 0x8A	; 138
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
		
		for (I = 0; I < PassWordCont; I++)
 90c:	d0 e0       	ldi	r29, 0x00	; 0
 90e:	23 c0       	rjmp	.+70     	; 0x956 <main+0xa2>
		{
			do 
			{
				PressValue = KPAD_u8GetPressedKey();
 910:	0e 94 80 02 	call	0x500	; 0x500 <KPAD_u8GetPressedKey>
 914:	c8 2f       	mov	r28, r24
			} while (PressValue == NotPressed);
 916:	8f 3f       	cpi	r24, 0xFF	; 255
 918:	d9 f3       	breq	.-10     	; 0x910 <main+0x5c>
			
			LCD_voidGoTo_XY(LINE_2, I);
 91a:	6d 2f       	mov	r22, r29
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
			LCD_voidWriteChar(PressValue);
 922:	8c 2f       	mov	r24, r28
 924:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_voidWriteChar>
 928:	2f ef       	ldi	r18, 0xFF	; 255
 92a:	84 e3       	ldi	r24, 0x34	; 52
 92c:	9c e0       	ldi	r25, 0x0C	; 12
 92e:	21 50       	subi	r18, 0x01	; 1
 930:	80 40       	sbci	r24, 0x00	; 0
 932:	90 40       	sbci	r25, 0x00	; 0
 934:	e1 f7       	brne	.-8      	; 0x92e <main+0x7a>
 936:	00 c0       	rjmp	.+0      	; 0x938 <main+0x84>
 938:	00 00       	nop
			_delay_ms(500);
			LCD_voidGoTo_XY(LINE_2, I);
 93a:	6d 2f       	mov	r22, r29
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
			LCD_voidWriteChar('*');
 942:	8a e2       	ldi	r24, 0x2A	; 42
 944:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_voidWriteChar>
			
			EEPROM_voidWrite_eeprom(L1 + I, PressValue);
 948:	8d 2f       	mov	r24, r29
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	6c 2f       	mov	r22, r28
 94e:	01 96       	adiw	r24, 0x01	; 1
 950:	0e 94 38 02 	call	0x470	; 0x470 <EEPROM_voidWrite_eeprom>
	
	if (EEPROM_u8Read_eeprom(L0) == Default )
	{
		LCD_voidWriteString("SET NEW PASSWORD");
		
		for (I = 0; I < PassWordCont; I++)
 954:	df 5f       	subi	r29, 0xFF	; 255
 956:	d6 30       	cpi	r29, 0x06	; 6
 958:	d8 f2       	brcs	.-74     	; 0x910 <main+0x5c>
			LCD_voidWriteChar('*');
			
			EEPROM_voidWrite_eeprom(L1 + I, PressValue);
			
		}
		EEPROM_voidWrite_eeprom(L0, 0x00);
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 38 02 	call	0x470	; 0x470 <EEPROM_voidWrite_eeprom>
		
		LCD_voidClearDisplay();
 964:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
		LCD_voidWriteString("PASSWORD HAS");
 968:	8b e9       	ldi	r24, 0x9B	; 155
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
		LCD_voidGoTo_XY(LINE_2, 0);
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
		LCD_voidWriteString("BEEN SET");
 978:	88 ea       	ldi	r24, 0xA8	; 168
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
 980:	2f ef       	ldi	r18, 0xFF	; 255
 982:	89 e6       	ldi	r24, 0x69	; 105
 984:	98 e1       	ldi	r25, 0x18	; 24
 986:	21 50       	subi	r18, 0x01	; 1
 988:	80 40       	sbci	r24, 0x00	; 0
 98a:	90 40       	sbci	r25, 0x00	; 0
 98c:	e1 f7       	brne	.-8      	; 0x986 <main+0xd2>
 98e:	00 c0       	rjmp	.+0      	; 0x990 <main+0xdc>
 990:	00 00       	nop
			LCD_voidClearDisplay();
			LCD_voidWriteString("RIGHT PASSWORD");
			LCD_voidGoTo_XY(LINE_2,0);
			LCD_voidWriteString("Safe OPENED");
			
			opened = TRUE;
 992:	02 e0       	ldi	r16, 0x02	; 2
 994:	f1 2c       	mov	r15, r1
 996:	cc c0       	rjmp	.+408    	; 0xb30 <main+0x27c>
		_delay_ms(1000);
	}

    while (opened == FALSE)
    {
		LCD_voidClearDisplay();
 998:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
		LCD_voidWriteString("CHEK PASSWORD");
 99c:	81 eb       	ldi	r24, 0xB1	; 177
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
		for (I = 0; I < PassWordCont; I++)
 9a4:	10 e0       	ldi	r17, 0x00	; 0
 9a6:	24 c0       	rjmp	.+72     	; 0x9f0 <main+0x13c>
		{
			do 
			{
				Password_arr[I] = KPAD_u8GetPressedKey();
 9a8:	c1 2f       	mov	r28, r17
 9aa:	d0 e0       	ldi	r29, 0x00	; 0
 9ac:	0e 94 80 02 	call	0x500	; 0x500 <KPAD_u8GetPressedKey>
 9b0:	fe 01       	movw	r30, r28
 9b2:	ee 5e       	subi	r30, 0xEE	; 238
 9b4:	fe 4f       	sbci	r31, 0xFE	; 254
 9b6:	80 83       	st	Z, r24
			} while ( Password_arr[I] == NotPressed);
 9b8:	8f 3f       	cpi	r24, 0xFF	; 255
 9ba:	b1 f3       	breq	.-20     	; 0x9a8 <main+0xf4>
			
			LCD_voidGoTo_XY(LINE_2,I);
 9bc:	61 2f       	mov	r22, r17
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
			LCD_voidWriteChar(Password_arr[I]);
 9c4:	ce 5e       	subi	r28, 0xEE	; 238
 9c6:	de 4f       	sbci	r29, 0xFE	; 254
 9c8:	88 81       	ld	r24, Y
 9ca:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_voidWriteChar>
 9ce:	2f ef       	ldi	r18, 0xFF	; 255
 9d0:	84 e3       	ldi	r24, 0x34	; 52
 9d2:	9c e0       	ldi	r25, 0x0C	; 12
 9d4:	21 50       	subi	r18, 0x01	; 1
 9d6:	80 40       	sbci	r24, 0x00	; 0
 9d8:	90 40       	sbci	r25, 0x00	; 0
 9da:	e1 f7       	brne	.-8      	; 0x9d4 <main+0x120>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <main+0x12a>
 9de:	00 00       	nop
			_delay_ms(500);
			LCD_voidGoTo_XY(LINE_2,I);
 9e0:	61 2f       	mov	r22, r17
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
			LCD_voidWriteChar('*');		
 9e8:	8a e2       	ldi	r24, 0x2A	; 42
 9ea:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_voidWriteChar>

    while (opened == FALSE)
    {
		LCD_voidClearDisplay();
		LCD_voidWriteString("CHEK PASSWORD");
		for (I = 0; I < PassWordCont; I++)
 9ee:	1f 5f       	subi	r17, 0xFF	; 255
 9f0:	16 30       	cpi	r17, 0x06	; 6
 9f2:	d0 f2       	brcs	.-76     	; 0x9a8 <main+0xf4>
			_delay_ms(500);
			LCD_voidGoTo_XY(LINE_2,I);
			LCD_voidWriteChar('*');		
		}
		
		if (EEPROM_u8Read_eeprom(L1) == Password_arr[0] && EEPROM_u8Read_eeprom(L2) == Password_arr[1] && EEPROM_u8Read_eeprom(L3) == Password_arr[2] && EEPROM_u8Read_eeprom(L4) == Password_arr[3] && EEPROM_u8Read_eeprom(L5) == Password_arr[4] && EEPROM_u8Read_eeprom(L6) == Password_arr[5])
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 2f 02 	call	0x45e	; 0x45e <EEPROM_u8Read_eeprom>
 9fc:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
 a00:	30 e0       	ldi	r19, 0x00	; 0
 a02:	82 17       	cp	r24, r18
 a04:	93 07       	cpc	r25, r19
 a06:	09 f0       	breq	.+2      	; 0xa0a <main+0x156>
 a08:	43 c0       	rjmp	.+134    	; 0xa90 <main+0x1dc>
 a0a:	82 e0       	ldi	r24, 0x02	; 2
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	0e 94 2f 02 	call	0x45e	; 0x45e <EEPROM_u8Read_eeprom>
 a12:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__data_end+0x1>
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	82 17       	cp	r24, r18
 a1a:	93 07       	cpc	r25, r19
 a1c:	c9 f5       	brne	.+114    	; 0xa90 <main+0x1dc>
 a1e:	83 e0       	ldi	r24, 0x03	; 3
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 2f 02 	call	0x45e	; 0x45e <EEPROM_u8Read_eeprom>
 a26:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end+0x2>
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	82 17       	cp	r24, r18
 a2e:	93 07       	cpc	r25, r19
 a30:	79 f5       	brne	.+94     	; 0xa90 <main+0x1dc>
 a32:	84 e0       	ldi	r24, 0x04	; 4
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	0e 94 2f 02 	call	0x45e	; 0x45e <EEPROM_u8Read_eeprom>
 a3a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <__data_end+0x3>
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	82 17       	cp	r24, r18
 a42:	93 07       	cpc	r25, r19
 a44:	29 f5       	brne	.+74     	; 0xa90 <main+0x1dc>
 a46:	85 e0       	ldi	r24, 0x05	; 5
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 2f 02 	call	0x45e	; 0x45e <EEPROM_u8Read_eeprom>
 a4e:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end+0x4>
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	82 17       	cp	r24, r18
 a56:	93 07       	cpc	r25, r19
 a58:	d9 f4       	brne	.+54     	; 0xa90 <main+0x1dc>
 a5a:	86 e0       	ldi	r24, 0x06	; 6
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	0e 94 2f 02 	call	0x45e	; 0x45e <EEPROM_u8Read_eeprom>
 a62:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <__data_end+0x5>
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	82 17       	cp	r24, r18
 a6a:	93 07       	cpc	r25, r19
 a6c:	89 f4       	brne	.+34     	; 0xa90 <main+0x1dc>
		{
			LCD_voidClearDisplay();
 a6e:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
			LCD_voidWriteString("RIGHT PASSWORD");
 a72:	8f eb       	ldi	r24, 0xBF	; 191
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
			LCD_voidGoTo_XY(LINE_2,0);
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
			LCD_voidWriteString("Safe OPENED");
 a82:	8e ec       	ldi	r24, 0xCE	; 206
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
			
			opened = TRUE;
 a8a:	ff 24       	eor	r15, r15
 a8c:	f3 94       	inc	r15
 a8e:	50 c0       	rjmp	.+160    	; 0xb30 <main+0x27c>
		}
		else
		{
			tries = tries -1;
 a90:	01 50       	subi	r16, 0x01	; 1
			
			if (tries > 0)
 a92:	f1 f0       	breq	.+60     	; 0xad0 <main+0x21c>
			{
				LCD_voidClearDisplay();
 a94:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
				LCD_voidWriteString("WRONG PASSWORD");
 a98:	8a ed       	ldi	r24, 0xDA	; 218
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
				LCD_voidGoTo_XY(LINE_2,0);
 aa0:	60 e0       	ldi	r22, 0x00	; 0
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
				LCD_voidWriteString("TRIES LEFT : ");
 aa8:	89 ee       	ldi	r24, 0xE9	; 233
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
				LCD_voidWriteNumber(tries);
 ab0:	60 2f       	mov	r22, r16
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidWriteNumber>
 abc:	2f ef       	ldi	r18, 0xFF	; 255
 abe:	89 e6       	ldi	r24, 0x69	; 105
 ac0:	98 e1       	ldi	r25, 0x18	; 24
 ac2:	21 50       	subi	r18, 0x01	; 1
 ac4:	80 40       	sbci	r24, 0x00	; 0
 ac6:	90 40       	sbci	r25, 0x00	; 0
 ac8:	e1 f7       	brne	.-8      	; 0xac2 <main+0x20e>
 aca:	00 c0       	rjmp	.+0      	; 0xacc <main+0x218>
 acc:	00 00       	nop
 ace:	30 c0       	rjmp	.+96     	; 0xb30 <main+0x27c>
				_delay_ms(1000);
			} 
			else
			{
				LCD_voidClearDisplay();
 ad0:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
				LCD_voidWriteString("WRONG PASSWORD");
 ad4:	8a ed       	ldi	r24, 0xDA	; 218
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
				LCD_voidGoTo_XY(LINE_2,0);
 adc:	60 e0       	ldi	r22, 0x00	; 0
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
				LCD_voidWriteString("SAFE CLOSED");
 ae4:	87 ef       	ldi	r24, 0xF7	; 247
 ae6:	90 e0       	ldi	r25, 0x00	; 0
 ae8:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
				
				
				opened = TRUE;
				if (opened == TRUE)
				{
					LCD_voidClearDisplay();
 aec:	0e 94 00 04 	call	0x800	; 0x800 <LCD_voidClearDisplay>
					LCD_voidWriteString("WAIT 5 SECOND");
 af0:	83 e0       	ldi	r24, 0x03	; 3
 af2:	91 e0       	ldi	r25, 0x01	; 1
 af4:	0e 94 86 03 	call	0x70c	; 0x70c <LCD_voidWriteString>
					LCD_voidGoTo_XY(LINE_2,0);
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_voidGoTo_XY>
					for (I = 0; I <=4; I++)
 b00:	c0 e0       	ldi	r28, 0x00	; 0
 b02:	14 c0       	rjmp	.+40     	; 0xb2c <main+0x278>
					{
						LCD_voidWriteNumber(I+1);
 b04:	6c 2f       	mov	r22, r28
 b06:	70 e0       	ldi	r23, 0x00	; 0
 b08:	6f 5f       	subi	r22, 0xFF	; 255
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	07 2e       	mov	r0, r23
 b0e:	00 0c       	add	r0, r0
 b10:	88 0b       	sbc	r24, r24
 b12:	99 0b       	sbc	r25, r25
 b14:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidWriteNumber>
 b18:	2f ef       	ldi	r18, 0xFF	; 255
 b1a:	89 e6       	ldi	r24, 0x69	; 105
 b1c:	98 e1       	ldi	r25, 0x18	; 24
 b1e:	21 50       	subi	r18, 0x01	; 1
 b20:	80 40       	sbci	r24, 0x00	; 0
 b22:	90 40       	sbci	r25, 0x00	; 0
 b24:	e1 f7       	brne	.-8      	; 0xb1e <main+0x26a>
 b26:	00 c0       	rjmp	.+0      	; 0xb28 <main+0x274>
 b28:	00 00       	nop
				if (opened == TRUE)
				{
					LCD_voidClearDisplay();
					LCD_voidWriteString("WAIT 5 SECOND");
					LCD_voidGoTo_XY(LINE_2,0);
					for (I = 0; I <=4; I++)
 b2a:	cf 5f       	subi	r28, 0xFF	; 255
 b2c:	c5 30       	cpi	r28, 0x05	; 5
 b2e:	50 f3       	brcs	.-44     	; 0xb04 <main+0x250>
		LCD_voidGoTo_XY(LINE_2, 0);
		LCD_voidWriteString("BEEN SET");
		_delay_ms(1000);
	}

    while (opened == FALSE)
 b30:	ff 20       	and	r15, r15
 b32:	09 f4       	brne	.+2      	; 0xb36 <main+0x282>
 b34:	31 cf       	rjmp	.-414    	; 0x998 <main+0xe4>
			}
			
		}
   
    }
}
 b36:	80 e0       	ldi	r24, 0x00	; 0
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	df 91       	pop	r29
 b3c:	cf 91       	pop	r28
 b3e:	1f 91       	pop	r17
 b40:	0f 91       	pop	r16
 b42:	ff 90       	pop	r15
 b44:	08 95       	ret

00000b46 <__udivmodsi4>:
 b46:	a1 e2       	ldi	r26, 0x21	; 33
 b48:	1a 2e       	mov	r1, r26
 b4a:	aa 1b       	sub	r26, r26
 b4c:	bb 1b       	sub	r27, r27
 b4e:	fd 01       	movw	r30, r26
 b50:	0d c0       	rjmp	.+26     	; 0xb6c <__udivmodsi4_ep>

00000b52 <__udivmodsi4_loop>:
 b52:	aa 1f       	adc	r26, r26
 b54:	bb 1f       	adc	r27, r27
 b56:	ee 1f       	adc	r30, r30
 b58:	ff 1f       	adc	r31, r31
 b5a:	a2 17       	cp	r26, r18
 b5c:	b3 07       	cpc	r27, r19
 b5e:	e4 07       	cpc	r30, r20
 b60:	f5 07       	cpc	r31, r21
 b62:	20 f0       	brcs	.+8      	; 0xb6c <__udivmodsi4_ep>
 b64:	a2 1b       	sub	r26, r18
 b66:	b3 0b       	sbc	r27, r19
 b68:	e4 0b       	sbc	r30, r20
 b6a:	f5 0b       	sbc	r31, r21

00000b6c <__udivmodsi4_ep>:
 b6c:	66 1f       	adc	r22, r22
 b6e:	77 1f       	adc	r23, r23
 b70:	88 1f       	adc	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	1a 94       	dec	r1
 b76:	69 f7       	brne	.-38     	; 0xb52 <__udivmodsi4_loop>
 b78:	60 95       	com	r22
 b7a:	70 95       	com	r23
 b7c:	80 95       	com	r24
 b7e:	90 95       	com	r25
 b80:	9b 01       	movw	r18, r22
 b82:	ac 01       	movw	r20, r24
 b84:	bd 01       	movw	r22, r26
 b86:	cf 01       	movw	r24, r30
 b88:	08 95       	ret

00000b8a <_exit>:
 b8a:	f8 94       	cli

00000b8c <__stop_program>:
 b8c:	ff cf       	rjmp	.-2      	; 0xb8c <__stop_program>
